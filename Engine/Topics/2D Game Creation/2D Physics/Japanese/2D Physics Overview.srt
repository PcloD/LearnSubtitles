1
00:00:01,298 --> 00:00:04,351
ゲームオブジェクトに信ぴょう性のある物理挙動をさせるには

2
00:00:04,351 --> 00:00:07,226
適切な加速・質量感があることの他にも

3
00:00:07,226 --> 00:00:09,750
コリジョンや重力などの力がリアルかつ適切に

4
00:00:09,750 --> 00:00:11,750
作用するようにしなければなりません

5
00:00:13,300 --> 00:00:16,257
Unity のビルトイン物理演算エンジンはそういった

6
00:00:16,257 --> 00:00:19,083
物理シミュレーションを扱うためのコンポーネントが揃っています

7
00:00:21,713 --> 00:00:24,524
Unity には 2 種類の物理演算エンジンがあります

8
00:00:24,524 --> 00:00:27,977
3D 物理演算向けのものと 2D 物理演算向けのものです

9
00:00:29,320 --> 00:00:31,870
両者の主要コンセプトは同一ですが

10
00:00:31,870 --> 00:00:33,870
当然ながら 3D 物理演算の場合は次元がひとつ

11
00:00:33,870 --> 00:00:36,119
追加されたものになっています

12
00:00:36,840 --> 00:00:38,840
しかしシステムとして見た場合両者は

13
00:00:38,840 --> 00:00:40,840
完全に異なるコンポーネントとして実装されています

14
00:00:41,685 --> 00:00:45,467
3D 物理演算エンジンを使ったことのある人であれば

15
00:00:45,467 --> 00:00:48,895
2D 物理演算の Physics2D コンポーネントはなじみのある物に見えると思います

16
00:00:49,657 --> 00:00:51,657
実際  ほとんどの Physics2D コンポーネントは

17
00:00:51,657 --> 00:00:54,783
3D の場合と同様の挙動をします

18
00:00:54,783 --> 00:00:56,921
もちろん 2D 空間で  ですが

19
00:00:56,921 --> 00:00:59,475
名前も似ていますが  こちらは名前の後に

20
00:00:59,475 --> 00:01:01,475
2D という文字が付いています

21
00:01:01,795 --> 00:01:04,002
たとえば 3D 物理演算の

22
00:01:04,002 --> 00:01:06,002
Rigidbody コンポーネントは

23
00:01:06,502 --> 00:01:08,866
2D 物理演算ではほぼ似た名前の

24
00:01:08,866 --> 00:01:10,866
Rigidbody 2D コンポーネントとなっています

25
00:01:11,463 --> 00:01:13,853
これはその他の Physics 2D コンポーネントや

26
00:01:13,853 --> 00:01:16,462
スクリプティングメソッドでも同様です

27
00:01:16,462 --> 00:01:20,384
たとえば Box Collider は Box Collider 2D に

28
00:01:20,384 --> 00:01:24,099
OnTriggerEnter は OnTriggerEnter2D になっています

29
00:01:25,013 --> 00:01:27,677
ただし両者は非常に似ているものの互換性はありません

30
00:01:27,677 --> 00:01:30,133
この点だけは注意しておいてください

31
00:01:30,826 --> 00:01:33,229
3D 物理演算と 2D 物理演算を同一シーンに

32
00:01:33,229 --> 00:01:36,437
共存させることは可能ですが 両者は干渉しません

33
00:01:40,887 --> 00:01:42,887
2D 物理演算と 3D 物理演算には

34
00:01:42,887 --> 00:01:45,318
いくつか重要な相違点があります

35
00:01:45,318 --> 00:01:47,318
最も大きな違いが 2D 物理演算では

36
00:01:47,318 --> 00:01:49,930
奥行きの概念がないことでしょう

37
00:01:50,840 --> 00:01:53,668
すべての 2D 物理演算は X/Y 平面上で行われ

38
00:01:53,668 --> 00:01:57,472
この 2D 平面は Z 軸上では 0 となります

39
00:01:58,276 --> 00:02:01,311
2D 物理演算エンジンに制御されているゲームオブジェクトは

40
00:02:01,311 --> 00:02:03,311
X/Y 平面で移動することができますが

41
00:02:03,311 --> 00:02:06,209
Z 軸に対しては回転のみが可能です

42
00:02:07,096 --> 00:02:09,096
なお 2D ゲームもエディターの

43
00:02:09,096 --> 00:02:11,432
3D モードで表示でき

44
00:02:11,432 --> 00:02:13,432
2D 物理演算を用いたゲームオブジェクトの

45
00:02:13,432 --> 00:02:15,805
Transform 位置 Z を

46
00:02:15,805 --> 00:02:17,612
変更することもできますが

47
00:02:17,612 --> 00:02:19,612
ここで覚えておくべき事項は

48
00:02:19,612 --> 00:02:22,083
物理演算上の干渉はすべて

49
00:02:22,083 --> 00:02:24,601
Z 軸位置 0 で起きるということです

50
00:02:26,144 --> 00:02:29,081
さて 2D 物理演算のいくつかの設定はプロジェクト単位で指定されます

51
00:02:29,081 --> 00:02:30,956
これらを編集する場合は

52
00:02:30,956 --> 00:02:34,266
Edit > Project Settings > Physics 2D にアクセスします

53
00:02:34,987 --> 00:02:36,987
ここでは各種詳細設定  たとえば

54
00:02:36,987 --> 00:02:39,647
重力の強さと方向のようなプロパティ

55
00:02:39,647 --> 00:02:44,095
デフォルトのマテリアル  そしてレイヤーコリジョンのマトリクスなどを指定できます

56
00:02:44,871 --> 00:02:47,759
Physics2DSettings の詳細については

57
00:02:47,759 --> 00:02:50,422
下記リンク先の情報を参照してください

58
00:02:51,488 --> 00:02:53,752
Physics 2D で最も重要なコンポーネントのひとつが

59
00:02:53,752 --> 00:02:56,166
Rigidbody 2D です

60
00:02:56,597 --> 00:02:58,887
Rigidbody 2D コンポーネントをアタッチすると

61
00:02:58,887 --> 00:03:00,887
そのゲームオブジェクトが 2D 物理演算エンジンの

62
00:03:00,887 --> 00:03:02,887
制御下に入ります

63
00:03:05,625 --> 00:03:08,518
Rigidbody 2D コンポーネントはコリジョンを検出する

64
00:03:08,518 --> 00:03:11,774
コライダーと共に使い 力やトルクを受け取ったり

65
00:03:11,774 --> 00:03:13,456
各種ジョイントを動かしたり

66
00:03:13,456 --> 00:03:16,643
その他 2D 物理演算固有の挙動を実現します

67
00:03:17,378 --> 00:03:19,570
またこのコンポーネントはアタッチされた

68
00:03:19,570 --> 00:03:21,890
ゲームオブジェクトの重要な物理プロパティの

69
00:03:21,890 --> 00:03:23,890
経過を追う役割も果たします

70
00:03:24,708 --> 00:03:27,309
たとえば Mass のほかに

71
00:03:27,309 --> 00:03:30,915
Linear / Angular Drag そして Gravity Scale などのプロパティがあります

72
00:03:31,664 --> 00:03:34,644
Rigidbody 2D コンポーネントの詳細については

73
00:03:34,644 --> 00:03:37,114
下記リンク先の情報を参照してください

74
00:03:38,373 --> 00:03:40,799
2Dプロジェクトの Physics2DSettings には必ず

75
00:03:40,799 --> 00:03:42,799
Gravity のデフォルト値が指定されています

76
00:03:43,520 --> 00:03:46,547
Gravity は Rigidbody で明示的に無視するよう指定されていない限り

77
00:03:46,547 --> 00:03:49,747
Rigidbody を持つすべてのゲームオブジェクトに影響を及ぼします

78
00:03:50,620 --> 00:03:54,936
無視するようにする場合は Gravity Scale を 0 に指定してください

79
00:03:58,737 --> 00:04:01,098
Gravity Scale にその他の値を指定した場合は

80
00:04:01,098 --> 00:04:03,098
デフォルト値を修正するかたちで反映されます

81
00:04:03,098 --> 00:04:05,699
なおこれを修正する場合には

82
00:04:05,699 --> 00:04:08,399
ゲームオブジェクト単位で指定を行う必要があります

83
00:04:09,373 --> 00:04:12,042
ゲームオブジェクトにCollider 2D がアタッチされている場合は

84
00:04:12,042 --> 00:04:15,787
物理的なコリジョンやトリガーイベントに干渉できるようになります

85
00:04:16,536 --> 00:04:18,896
2D コライダーは 2D 空間においてゲームオブジェクトに

86
00:04:18,896 --> 00:04:22,292
物理的な形や存在性を与えます

87
00:04:26,576 --> 00:04:28,535
Rigidbody 2D と共に使える 2D コライダーには

88
00:04:28,535 --> 00:04:30,535
複数の種類... すなわち

89
00:04:31,822 --> 00:04:36,327
円形 / 四角形 / エッジ / ポリゴンコライダーがあります

90
00:04:37,089 --> 00:04:39,632
各コライダーのタイプにはそれぞれ異なる挙動のセットが備わっており

91
00:04:39,632 --> 00:04:42,295
その用途も異なります

92
00:04:43,016 --> 00:04:45,785
Collider 2D コンポーネントの詳細については

93
00:04:45,785 --> 00:04:48,018
下記リンク先の情報を参照してください

94
00:04:49,058 --> 00:04:52,051
ゲームオブジェクトにRigidbody 2D がアタッチされている場合

95
00:04:52,051 --> 00:04:55,880
いくつか存在する Joint 2D コンポーネントを使うことができます

96
00:04:56,560 --> 00:04:58,753
Joint 2D コンポーネントを使うと

97
00:04:58,753 --> 00:05:01,487
ゲームオブジェクトに複雑で特殊な物理挙動をさせることが

98
00:05:01,487 --> 00:05:04,147
可能になります これにはヒンジ

99
00:05:04,147 --> 00:05:06,717
バネ・スライダー・連結などがあります

100
00:05:07,420 --> 00:05:09,420
2D ジョイントを使うとゲームオブジェクトを

101
00:05:09,420 --> 00:05:11,420
シーンの任意地点や別のゲームオブジェクトに

102
00:05:11,420 --> 00:05:13,088
アンカーさせ  そのアンカーに対して

103
00:05:13,088 --> 00:05:15,088
物理的な挙動をさせることが可能になります

104
00:05:15,975 --> 00:05:18,154
また Joint 2D を持つゲームオブジェクト同士を

105
00:05:18,154 --> 00:05:20,814
組み合わせることで たとえばチェーンのようなより複雑で

106
00:05:20,814 --> 00:05:24,093
面白い挙動をさせることが可能になります

107
00:05:24,883 --> 00:05:27,269
Joint 2D コンポーネントの詳細や

108
00:05:27,269 --> 00:05:28,363
その使用方法については

109
00:05:28,363 --> 00:05:30,612
下記リンク先の情報を参照してください

110
00:05:32,327 --> 00:05:34,617
Collider 2D のサーフェスプロパティは

111
00:05:34,617 --> 00:05:36,617
特別なタイプ Material で定義されます

112
00:05:37,573 --> 00:05:41,296
この Material は Physics Material 2D アセットです

113
00:05:42,032 --> 00:05:44,887
Physics Material 2D は Collider 2D コンポーネントの

114
00:05:44,887 --> 00:05:47,766
アタッチされた 2 つのゲームオブジェクトが衝突した際の

115
00:05:47,766 --> 00:05:51,345
摩擦と弾性を制御するために使用されます

116
00:05:51,804 --> 00:05:55,691
弾むボールや滑る氷の床などを作る場合は 

117
00:05:55,691 --> 00:05:57,691
ゲームオブジェクトごとに異なる Physics Material 2D を

118
00:05:57,691 --> 00:05:59,691
使うようにします

119
00:06:00,108 --> 00:06:02,288
Material アセットと Physics Material の詳細については

120
00:06:02,288 --> 00:06:06,152
下記リンク先の情報を参照してください

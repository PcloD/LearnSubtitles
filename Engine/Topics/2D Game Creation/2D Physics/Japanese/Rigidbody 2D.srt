1
00:00:01,229 --> 00:00:04,401
Rigidbody 2D はゲームオブジェクトを

2
00:00:04,401 --> 00:00:07,135
2D 物理演算で制御するためのコンポーネントです

3
00:00:07,978 --> 00:00:10,804
また 2D 物理演算を使って対象のゲームオブジェクトを

4
00:00:10,804 --> 00:00:13,608
他のゲームオブジェクトと干渉させるには Collider 2D コンポーネントも

5
00:00:13,608 --> 00:00:15,221
アタッチする必要があります

6
00:00:16,067 --> 00:00:18,925
また 2D ジョイントのような特殊な 2D 物理演算コンポーネントを

7
00:00:18,925 --> 00:00:20,925
使用する場合にも Rigidbody 2D は

8
00:00:20,925 --> 00:00:22,925
必要になります

9
00:00:23,922 --> 00:00:27,036
Rigidbody 2D はまた質量・リニア・回転抵抗・

10
00:00:27,036 --> 00:00:29,230
重力スケールなどゲームオブジェクトの重要な

11
00:00:29,230 --> 00:00:32,339
物理プロパティを定義する時にも

12
00:00:32,339 --> 00:00:34,781
使用します

13
00:00:35,640 --> 00:00:38,491
なお 3D 物理演算とは異なり

14
00:00:38,491 --> 00:00:41,398
Rigidbody 2D では

15
00:00:41,398 --> 00:00:43,398
ゲームオブジェクトごとに

16
00:00:43,398 --> 00:00:45,398
重力スケールが指定できます

17
00:00:46,271 --> 00:00:48,465
さてこのシーンにある prop_ammo_crate は

18
00:00:48,465 --> 00:00:50,548
スプライトを格納しレンダリングする Sprite Renderer を

19
00:00:50,548 --> 00:00:52,963
持つだけのシンプルなゲームオブジェクトです

20
00:00:55,010 --> 00:00:58,405
ここで Play モードに入っても 何も生じません

21
00:00:59,872 --> 00:01:02,834
まずこの弾薬箱に 2D 物理演算の挙動を追加してみましょう

22
00:01:02,834 --> 00:01:05,469
まず Rigidbody 2D を追加するため

23
00:01:05,469 --> 00:01:12,463
Add Component > Physics 2D > Rigidbody 2D の順に操作します

24
00:01:13,833 --> 00:01:15,833
なおゲームオブジェクトにコンポーネントを

25
00:01:15,833 --> 00:01:17,833
アタッチする方法は他にも存在します

26
00:01:19,535 --> 00:01:21,535
コンポーネントおよびゲームオブジェクトへの

27
00:01:21,535 --> 00:01:23,151
追加方法については

28
00:01:23,151 --> 00:01:25,473
下記リンク先の情報を参照してください

29
00:01:27,074 --> 00:01:29,842
さて Play モードに入ると弾薬箱が重力の

30
00:01:29,842 --> 00:01:32,108
影響を受けて落ちるようになりました

31
00:01:32,108 --> 00:01:34,314
ただ宇宙船と衝突（コライド）していません

32
00:01:35,616 --> 00:01:39,205
2D 物理演算で他のゲームオブジェクトと干渉させるには

33
00:01:39,205 --> 00:01:43,100
干渉させるすべてのゲームオブジェクトに Collider 2D コンポーネントが

34
00:01:43,100 --> 00:01:46,959
そして最低 1 個のゲームオブジェクトに Rigidbody 2D がアタッチされている必要があります

35
00:01:47,873 --> 00:01:50,856
宇宙船にはすでに2D コライダーがアタッチされています

36
00:01:50,856 --> 00:01:53,022
Collider 2D コンポーネントを弾薬箱に

37
00:01:53,022 --> 00:01:55,161
追加するには Add Component >

38
00:01:55,161 --> 00:02:01,349
Physics 2D > Box Collider の順に選択します

39
00:02:02,650 --> 00:02:04,871
2D コライダーのサイズは自動的に

40
00:02:04,871 --> 00:02:06,871
スプライトのサイズに合わせられます

41
00:02:08,075 --> 00:02:10,075
今回の場合はコライダーの大きさを

42
00:02:10,075 --> 00:02:12,605
弾薬箱の画像に合うよう調整する必要があります

43
00:02:17,298 --> 00:02:19,159
さてこれで Play モードで

44
00:02:19,659 --> 00:02:22,385
弾薬箱が無事に衝突して宇宙船の上に

45
00:02:22,385 --> 00:02:24,026
みごと落ちました

46
00:02:24,788 --> 00:02:26,788
2D コライダーの詳細については

47
00:02:26,788 --> 00:02:29,244
下記リンク先の情報を参照してください

48
00:02:31,015 --> 00:02:33,683
Rigidbody 2D コンポーネントは単に

49
00:02:33,683 --> 00:02:36,315
ゲームオブジェクトを 2D 物理演算で

50
00:02:36,315 --> 00:02:38,815
制御させる以外にもゲーム重要な

51
00:02:38,815 --> 00:02:40,815
物理プロパティを定義する役割があります

52
00:02:42,669 --> 00:02:45,589
Mass は Rigidbody 2D の質量を示します

53
00:02:46,006 --> 00:02:48,090
質量の高い 2D Rigidbody は

54
00:02:48,090 --> 00:02:49,866
現実世界と同じように

55
00:02:49,866 --> 00:02:52,378
動かすのに必要な力が大きくなり  また他の 2D Rigidbody と

56
00:02:52,378 --> 00:02:55,074
衝突した時にも大きな影響を及ぼすようになります

57
00:02:55,955 --> 00:02:57,845
最初にお見せする例では弾薬箱と

58
00:02:57,845 --> 00:02:59,845
隕石の質量は同じです

59
00:03:05,704 --> 00:03:07,969
しかし隕石の質量を変更すると

60
00:03:08,897 --> 00:03:10,897
両オブジェクトの干渉結果は大きく

61
00:03:10,897 --> 00:03:12,897
変化します

62
00:03:19,253 --> 00:03:21,475
Linear Drag と Angular Drag は

63
00:03:21,475 --> 00:03:24,029
2D Rigidbody の速度に影響します

64
00:03:24,969 --> 00:03:28,211
空気抵抗のようなものと考えると分かりやすいかもしれません

65
00:03:29,098 --> 00:03:31,404
Linear Drag は Rigidbody 2D の

66
00:03:31,404 --> 00:03:33,404
スピード（速度）を遅くします

67
00:03:39,899 --> 00:03:42,270
Angular Drag は回転... あるいは

68
00:03:42,270 --> 00:03:44,270
角速度を遅くします

69
00:04:00,874 --> 00:04:05,008
Gravity Scale は重力が Rigidbody 2D に与える影響を制御します

70
00:04:05,646 --> 00:04:08,351
グローバルな Gravity の値とは異なり

71
00:04:08,351 --> 00:04:10,351
Gravity Scale では対象ゲームオブジェクト

72
00:04:10,351 --> 00:04:12,765
単体の細やかな制御が可能です

73
00:04:13,928 --> 00:04:15,928
Play モードでは弾薬箱が重力の

74
00:04:15,928 --> 00:04:18,218
影響を受けて落下していますね

75
00:04:19,243 --> 00:04:21,243
ここで Gravity Scale の値を下げると

76
00:04:24,008 --> 00:04:26,008
ゲームオブジェクトの落下速度は遅くなります

77
00:04:26,798 --> 00:04:29,452
重力を無効化する場合には値を 0 にセットします

78
00:04:31,121 --> 00:04:33,411
Fixed Angle をオンにすると Rigidbody 2D は

79
00:04:33,411 --> 00:04:35,991
2D 物理演算の力には作用されるものの

80
00:04:35,991 --> 00:04:37,991
回転しなくなります

81
00:04:37,991 --> 00:04:40,559
通常の条件下であれば隕石は落下して

82
00:04:40,559 --> 00:04:43,277
弾薬箱に衝突して転がり落ちていきますが

83
00:04:44,758 --> 00:04:47,258
Fixed Angle をオンにすると

84
00:04:47,258 --> 00:04:50,866
隕石は  衝突のような物理的な力には

85
00:04:51,808 --> 00:04:53,419
作用されるものの

86
00:04:53,990 --> 00:04:55,990
回転はしなくなります

87
00:04:58,230 --> 00:05:00,313
Is Kinematic をオンにすると

88
00:05:00,313 --> 00:05:02,823
Rigidbody 2D は

89
00:05:02,823 --> 00:05:04,823
2D 物理演算の

90
00:05:04,823 --> 00:05:07,505
力や重力あるいは衝突の

91
00:05:07,505 --> 00:05:09,505
影響を受けなくなります

92
00:05:10,516 --> 00:05:12,516
このオプションは主に 2D コライダーを持つ

93
00:05:12,516 --> 00:05:14,516
ゲームオブジェクトを物理演算や

94
00:05:14,516 --> 00:05:16,516
力を使わずに動かす場合に使われます

95
00:05:17,196 --> 00:05:20,053
たとえば移動する足場を作る場合

96
00:05:20,053 --> 00:05:22,053
足場はスクリプトやアニメーションで

97
00:05:22,053 --> 00:05:24,053
制御されて

98
00:05:24,053 --> 00:05:26,219
物理的な力ではなく

99
00:05:26,219 --> 00:05:28,219
Transform で動かされます

100
00:05:28,650 --> 00:05:30,650
しかし足場は他の 2D ゲームオブジェクトとも

101
00:05:30,650 --> 00:05:32,650
干渉できなくてはいけません

102
00:05:33,150 --> 00:05:35,426
このため足場にも 2D コライダーを

103
00:05:35,426 --> 00:05:37,136
アタッチするわけです

104
00:05:38,036 --> 00:05:40,426
これで2D コライダーのアタッチされた移動する

105
00:05:40,426 --> 00:05:42,426
ゲームオブジェクトができました

106
00:05:43,658 --> 00:05:47,018
ゲーム中に Collider 2D を動かす場合には

107
00:05:47,018 --> 00:05:49,824
Rigidbody 2D もアタッチしておくことを

108
00:05:49,824 --> 00:05:51,479
推奨します

109
00:05:52,241 --> 00:05:54,419
しかし足場には物理的な力に

110
00:05:54,419 --> 00:05:56,419
反応して欲しくないので

111
00:05:57,002 --> 00:05:59,002
この場合には Rigidbody の Is Kinematic を

112
00:05:59,002 --> 00:06:01,002
オンに設定するのです

113
00:06:01,861 --> 00:06:03,861
この足場はスクリプトで動かされ

114
00:06:03,861 --> 00:06:05,861
さらに 2D コライダーがアタッチされています

115
00:06:16,678 --> 00:06:18,373
Interpolate 設定はゲームオブジェクトの

116
00:06:18,373 --> 00:06:20,373
動きを滑らかにするものです

117
00:06:20,373 --> 00:06:22,373
Rigidbody 2D で動かされているゲームオブジェクトの

118
00:06:22,373 --> 00:06:24,937
動きがカクカクしている場合

119
00:06:24,937 --> 00:06:26,937
Interpolate 設定を使うと Transform の

120
00:06:26,937 --> 00:06:28,937
移動が滑らかになります

121
00:06:29,796 --> 00:06:31,796
Interpolate 設定はゲームオブジェクトの

122
00:06:31,796 --> 00:06:33,601
直前のフレームにおける位置をベースに

123
00:06:33,601 --> 00:06:35,601
動きを滑らかにします

124
00:06:36,902 --> 00:06:38,902
他方の Extrapolate 設定は

125
00:06:38,902 --> 00:06:40,902
次のフレームの位置を予測して動きを滑らかにします

126
00:06:42,590 --> 00:06:44,590
Sleeping Mode は Rigidbody をスリープさせて

127
00:06:44,590 --> 00:06:47,322
処理時間を短縮するためのオプションです

128
00:06:47,794 --> 00:06:50,280
Never Sleep はスリーピングを無効化し

129
00:06:50,780 --> 00:06:53,280
Start Awake は Rigidbody 2D が

130
00:06:53,280 --> 00:06:56,176
インスタンス化された時にスリープ解除します

131
00:06:56,176 --> 00:06:58,176
Start Asleep はまず Rigidbody 2D を

132
00:06:58,176 --> 00:07:00,176
スリープ状態としておき衝突時に

133
00:07:00,176 --> 00:07:02,590
スリープ解除するようにします

134
00:07:03,988 --> 00:07:05,864
スリープの詳細については

135
00:07:05,864 --> 00:07:08,351
下記リンク先の情報を参照してください

136
00:07:09,690 --> 00:07:11,690
Collision Detection 設定は

137
00:07:11,690 --> 00:07:13,690
Rigidbody 2D で使用する衝突判定の

138
00:07:13,690 --> 00:07:15,690
種類を制御する項目です

139
00:07:16,673 --> 00:07:18,673
デフォルトは Discrete で

140
00:07:18,673 --> 00:07:20,673
問題がない限りは Discrete を

141
00:07:20,673 --> 00:07:22,506
使うことをお勧めします

142
00:07:22,506 --> 00:07:24,939
今回の場合ではゲームオブジェクトの

143
00:07:24,939 --> 00:07:27,232
2D コライダーが物理演算のアップデート中に

144
00:07:27,232 --> 00:07:30,566
他のコライダーと接触した時に衝突が登録されます

145
00:07:31,522 --> 00:07:34,189
Continuous は高速で動くゲームオブジェクトがある時

146
00:07:34,189 --> 00:07:36,189
次のアップデートまでの間に衝突が発生したと思われる場合に

147
00:07:36,189 --> 00:07:40,048
衝突を登録する時に使用する設定です

148
00:07:42,164 --> 00:07:45,944
Physics 2D と Rigidbody 2D の詳細については

149
00:07:45,944 --> 00:07:48,522
下記リンク先の情報を参照してください

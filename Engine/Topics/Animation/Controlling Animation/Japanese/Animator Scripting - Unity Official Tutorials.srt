1
00:00:00,470 --> 00:00:02,445
In this lesson we will be addressing

2
00:00:02,445 --> 00:00:05,542
some of the more common uses of the animator class.

3
00:00:06,097 --> 00:00:09,100
For complete documentation on the animator class

4
00:00:09,100 --> 00:00:11,519
see the documentation linked below.

5
00:00:12,723 --> 00:00:15,295
In order to affect transitions between the states

6
00:00:15,295 --> 00:00:17,781
of an animator controller we need to set the

7
00:00:17,781 --> 00:00:20,393
animator parameters to appropriate values.

8
00:00:20,875 --> 00:00:23,192
To do this we need to use some of the

9
00:00:23,192 --> 00:00:25,468
functions of the animator class.

10
00:00:26,396 --> 00:00:29,871
Here we have a scene with a model Ethan in it.

11
00:00:30,495 --> 00:00:32,635
Ethan has an animator component

12
00:00:32,635 --> 00:00:35,920
and a script called Ethan Script attached.

13
00:00:36,959 --> 00:00:39,373
The animator component is using a

14
00:00:39,373 --> 00:00:41,373
controller named EthanController.

15
00:00:41,873 --> 00:00:43,873
If we open EthanController

16
00:00:43,873 --> 00:00:46,277
we can see that there are 4 states.

17
00:00:46,277 --> 00:00:49,586
Idle, Walk, Run and Jump.

18
00:00:50,625 --> 00:00:53,281
Additionally there are 2 parameters.

19
00:00:53,281 --> 00:00:55,225
A float named Speed and a 

20
00:00:55,225 --> 00:00:57,225
trigger named Jump.

21
00:00:57,960 --> 00:01:00,435
the controller is setup in such a way

22
00:01:00,435 --> 00:01:03,153
that Ethan will transition from Idle to Walk

23
00:01:03,153 --> 00:01:05,978
to Run based on the Speed parameter.

24
00:01:06,647 --> 00:01:09,626
Furthermore, if the Jump parameter is triggered

25
00:01:09,626 --> 00:01:12,226
while Ethan is running Ethan will enter

26
00:01:12,226 --> 00:01:13,837
a Jump state.

27
00:01:15,071 --> 00:01:17,293
All of the animations of the Ethan model

28
00:01:17,293 --> 00:01:19,473
are controlled by these 2 parameters,

29
00:01:19,473 --> 00:01:21,110
which we will now learn to control

30
00:01:21,110 --> 00:01:23,110
with our Ethan script.

31
00:01:24,397 --> 00:01:27,419
Inside the Ethan Script we first need to create

32
00:01:27,419 --> 00:01:30,357
an animator variable named anim

33
00:01:30,357 --> 00:01:32,550
to contain our animator object.

34
00:01:33,327 --> 00:01:35,957
We get a reference to this animator object

35
00:01:35,957 --> 00:01:38,624
in the start method by typing

36
00:01:38,624 --> 00:01:42,805
anim = GetComponent<Animator>

37
00:01:43,719 --> 00:01:47,007
For further details on the GetComponent function

38
00:01:47,007 --> 00:01:49,007
see the lesson linked below.

39
00:01:49,977 --> 00:01:52,214
Are animator controller is setup

40
00:01:52,214 --> 00:01:54,409
so that the Speed parameter will dictate

41
00:01:54,409 --> 00:01:57,035
which moving animation is being played.

42
00:01:57,682 --> 00:01:59,682
We can use the player's input to

43
00:01:59,682 --> 00:02:01,319
control that behaviour.

44
00:02:02,182 --> 00:02:04,100
The first thing we will need to do is create

45
00:02:04,100 --> 00:02:06,597
a float variable which we will call Move

46
00:02:06,597 --> 00:02:08,154
in the update method.

47
00:02:09,636 --> 00:02:12,165
Then we will set the Move variable

48
00:02:12,165 --> 00:02:14,500
equal to the vertical input axis

49
00:02:14,500 --> 00:02:17,645
by typing Input.GetAxis

50
00:02:17,645 --> 00:02:21,347
and in parenthesis we will parse the string Vertical.

51
00:02:22,496 --> 00:02:24,496
Next we will want to parse the

52
00:02:24,496 --> 00:02:26,496
value of the Move variable to the

53
00:02:26,496 --> 00:02:29,402
Speed attribute of the animator controller.

54
00:02:30,164 --> 00:02:32,788
This is done with the SetFloat function

55
00:02:32,788 --> 00:02:34,788
of the animator class.

56
00:02:35,661 --> 00:02:38,381
We are using SetFloat because Speed

57
00:02:38,381 --> 00:02:40,381
is a float parameter.

58
00:02:40,381 --> 00:02:42,381
If it had been a Boolean parameter

59
00:02:42,381 --> 00:02:44,381
we would use SetBool.

60
00:02:44,381 --> 00:02:46,784
If had been a trigger parameter we would use

61
00:02:46,784 --> 00:02:49,443
SetTrigger and so on.

62
00:02:50,513 --> 00:02:52,375
For each of these functions there are

63
00:02:52,375 --> 00:02:54,375
multiple ways that they can be called.

64
00:02:54,875 --> 00:02:56,875
The most common way is to first parse

65
00:02:56,875 --> 00:02:59,000
in the name of the parameter you are setting

66
00:02:59,000 --> 00:03:00,630
as a string.

67
00:03:00,630 --> 00:03:02,781
Then the next item is the value

68
00:03:02,781 --> 00:03:04,781
you wish to set that parameter to.

69
00:03:05,640 --> 00:03:08,125
In this instance we will call the SetFloat

70
00:03:08,125 --> 00:03:11,117
method of our animator variable by typing

71
00:03:11,117 --> 00:03:13,117
anim.SetFloat

72
00:03:13,617 --> 00:03:16,735
and then in parenthesis the string Speed

73
00:03:16,735 --> 00:03:18,735
and our variable Move.

74
00:03:19,622 --> 00:03:22,400
Back in Unity we can run our scene.

75
00:03:22,400 --> 00:03:24,400
We can see that if we press the W key

76
00:03:24,400 --> 00:03:27,594
or the up arrow our model now moves.

77
00:03:27,594 --> 00:03:29,594
The Speed parameter and the movement

78
00:03:29,594 --> 00:03:33,249
animation played is now controlled by the player.

79
00:03:34,343 --> 00:03:35,942
Parsing in a string name for the 

80
00:03:35,942 --> 00:03:38,479
parameter we wish to set can be inefficient

81
00:03:38,479 --> 00:03:40,410
because it means that the animator needs to

82
00:03:40,410 --> 00:03:43,203
evaluate the string every time it is called.

83
00:03:43,725 --> 00:03:45,725
A faster way of setting parameter values

84
00:03:45,725 --> 00:03:47,725
is by using hashIDs.

85
00:03:48,225 --> 00:03:50,225
Each string that an animator can use is

86
00:03:50,225 --> 00:03:52,057
given a hashID.

87
00:03:52,057 --> 00:03:54,197
This is an integer value that is unique

88
00:03:54,197 --> 00:03:55,737
for every different string.

89
00:03:56,237 --> 00:03:58,237
We can store this value and then set

90
00:03:58,237 --> 00:04:00,811
parameters using this ID instead.

91
00:04:01,621 --> 00:04:03,760
To do this, first we will need

92
00:04:03,760 --> 00:04:05,525
to store the value.

93
00:04:05,525 --> 00:04:08,656
Let's create an integer variable named jumpHash

94
00:04:08,656 --> 00:04:10,656
to store the hashID in.

95
00:04:11,198 --> 00:04:13,198
We get the value for our hash variable by

96
00:04:13,198 --> 00:04:16,208
calling the static method of the animator class

97
00:04:16,208 --> 00:04:18,208
string to hash.

98
00:04:18,208 --> 00:04:21,019
Since this method is static we access it

99
00:04:21,019 --> 00:04:25,358
by typing Animator.StringToHash.

100
00:04:26,286 --> 00:04:28,915
In the parenthesis we parse in the string

101
00:04:28,915 --> 00:04:31,567
we wish to know the hashID value of.

102
00:04:32,506 --> 00:04:34,506
In order to make our model jump

103
00:04:34,506 --> 00:04:36,870
we will need to set the Jump trigger parameter

104
00:04:36,870 --> 00:04:38,870
in the animator controller.

105
00:04:39,370 --> 00:04:41,871
In our case we want to make the model jump

106
00:04:41,871 --> 00:04:43,871
whenever we press the space bar.

107
00:04:44,371 --> 00:04:46,123
So we will start by typing 

108
00:04:46,123 --> 00:04:51,302
if Input.GetKeyDown and then in the parenthesis

109
00:04:51,302 --> 00:04:54,736
we will use KeyCode.Space.

110
00:04:55,775 --> 00:04:58,135
Inside our if statement we will set

111
00:04:58,135 --> 00:05:00,774
the Jump trigger parameter using the

112
00:05:00,774 --> 00:05:03,257
anim.SetTrigger method.

113
00:05:03,923 --> 00:05:05,923
Inside the parenthesis we will

114
00:05:05,923 --> 00:05:07,923
parse our jumpHash variable.

115
00:05:09,017 --> 00:05:11,017
Remember that this variable contains

116
00:05:11,017 --> 00:05:13,768
the hasID of our Jump parameter.

117
00:05:14,567 --> 00:05:16,774
Note that since Jump is a trigger

118
00:05:16,774 --> 00:05:19,213
we do not need to also parse in a value.

119
00:05:20,351 --> 00:05:22,893
Back in Unity we can run our scene.

120
00:05:23,666 --> 00:05:26,209
Notice that while we are running we can also

121
00:05:26,209 --> 00:05:28,209
press the spacebar to jump.

122
00:05:29,096 --> 00:05:31,096
We have now utilised both our

123
00:05:31,096 --> 00:05:33,096
float parameter Speed and our

124
00:05:33,096 --> 00:05:35,716
trigger parameter Jump to make our model

125
00:05:35,716 --> 00:05:36,989
more dynamic.

126
00:05:37,843 --> 00:05:40,146
Occasionally, when writing the logic

127
00:05:40,146 --> 00:05:42,271
behind animation we may want to

128
00:05:42,271 --> 00:05:45,017
find out what state the controller is in.

129
00:05:45,986 --> 00:05:47,986
Let's say for example we want to be able to

130
00:05:47,986 --> 00:05:50,153
set the Jump trigger only when the model

131
00:05:50,153 --> 00:05:52,153
is in the Run state.

132
00:05:52,653 --> 00:05:55,495
The animator has some functions that we can call

133
00:05:55,495 --> 00:05:57,495
to find out what state the controller

134
00:05:57,495 --> 00:05:59,008
is currently in.

135
00:05:59,677 --> 00:06:01,872
We can do this by creating an

136
00:06:01,872 --> 00:06:04,243
animator state info variable

137
00:06:04,243 --> 00:06:06,813
which we will call StateInfo.

138
00:06:07,641 --> 00:06:10,045
The animator state info class

139
00:06:10,045 --> 00:06:12,443
stores the name, name hash,

140
00:06:12,443 --> 00:06:14,443
and various other pieces of information

141
00:06:14,443 --> 00:06:15,839
about a state.

142
00:06:17,675 --> 00:06:19,911
We will set our state info variable equal

143
00:06:19,911 --> 00:06:24,830
to the anim.GetCurrentAnimatorStateInfo function.

144
00:06:25,703 --> 00:06:28,838
Inside the parenthesis we will parse the index

145
00:06:28,838 --> 00:06:31,253
of the layer we want to know more about.

146
00:06:31,253 --> 00:06:33,406
Since we are dealing with the base layer

147
00:06:33,406 --> 00:06:35,406
we will parse in a 0.

148
00:06:36,086 --> 00:06:38,086
Again we could compare the current

149
00:06:38,086 --> 00:06:40,703
animation states name with a string

150
00:06:40,703 --> 00:06:42,425
but since it is more efficient to compare

151
00:06:42,425 --> 00:06:45,019
hashIDs let's do that instead.

152
00:06:46,044 --> 00:06:48,044
We will start by creating an integer named

153
00:06:48,044 --> 00:06:51,200
runStateHash and setting it equal to our

154
00:06:51,200 --> 00:06:54,151
Animator.StringToHash function.

155
00:06:54,872 --> 00:06:57,023
We will parse in to the parenthesis

156
00:06:57,023 --> 00:07:00,243
the string Base Layer.Run

157
00:07:01,434 --> 00:07:04,212
We have to include the base layer. part

158
00:07:04,212 --> 00:07:06,544
because we can have states of the same name

159
00:07:06,544 --> 00:07:08,146
on different layers.

160
00:07:08,947 --> 00:07:11,672
Now we can modify our if statement

161
00:07:11,672 --> 00:07:13,910
to also only allow our model to jump

162
00:07:13,910 --> 00:07:17,140
if stateInfo.nameHash

163
00:07:17,140 --> 00:07:20,405
equals our runStateHash variable.

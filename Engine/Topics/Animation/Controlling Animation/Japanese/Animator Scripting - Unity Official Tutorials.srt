1
00:00:00,470 --> 00:00:02,445
このレッスンでは Animator クラスの

2
00:00:02,445 --> 00:00:05,542
一般的な使い方について触れていきます

3
00:00:06,097 --> 00:00:09,100
Animator クラスの包括的なドキュメントをお探しの場合は

4
00:00:09,100 --> 00:00:11,519
下記リンク先の情報を参照してください

5
00:00:12,723 --> 00:00:15,295
アニメーターコントローラーのステート間の遷移に

6
00:00:15,295 --> 00:00:17,781
影響を及ぼすには Animator パラメーターに

7
00:00:17,781 --> 00:00:20,393
適切な値をセットする必要があります

8
00:00:20,875 --> 00:00:23,192
これには Animator クラスの関数を

9
00:00:23,192 --> 00:00:25,468
いくつか使用します

10
00:00:26,396 --> 00:00:29,871
さてここにモデル の Ethan が配置されたシーンがあります

11
00:00:30,495 --> 00:00:32,635
Ethan には Animator コンポーネントと

12
00:00:32,635 --> 00:00:35,920
スクリプト EthanScript がアタッチされています

13
00:00:36,959 --> 00:00:39,373
そして Animator コンポーネントは

14
00:00:39,373 --> 00:00:41,373
EthanController というコントローラーを使用しています

15
00:00:41,873 --> 00:00:43,873
この EthanController を開いてみると

16
00:00:43,873 --> 00:00:46,277
4 個のステートがあるのが確認できます

17
00:00:46,277 --> 00:00:49,586
Idle・Walk・Run・Jump ですね

18
00:00:50,625 --> 00:00:53,281
そしてパラメーターは 2 個

19
00:00:53,281 --> 00:00:55,225
それぞれ Speed という Float と 

20
00:00:55,225 --> 00:00:57,225
Jump という Trigger です

21
00:00:57,960 --> 00:01:00,435
そしてコントローラー側では

22
00:01:00,435 --> 00:01:03,153
Ethan は Idle から Walk そして Run へ

23
00:01:03,153 --> 00:01:05,978
Speed パラメーターに基いて遷移するようになっています

24
00:01:06,647 --> 00:01:09,626
そしてさらに Ethan が Run ステート中に

25
00:01:09,626 --> 00:01:12,226
Jump パラメーターがトリガーされた場合には Jump ステートに

26
00:01:12,226 --> 00:01:13,837
入るようにもなっています

27
00:01:15,071 --> 00:01:17,293
このようにすべての Ethan モデルのアニメーションは

28
00:01:17,293 --> 00:01:19,473
2 つのパラメーターで制御されています

29
00:01:19,473 --> 00:01:21,110
ではこれから EthanScript を使ってそれらの制御方法を

30
00:01:21,110 --> 00:01:23,110
学んでいきましょう

31
00:01:24,397 --> 00:01:27,419
EthanScript で最初にすべきことは

32
00:01:27,419 --> 00:01:30,357
Animator オブジェクトを格納するための

33
00:01:30,357 --> 00:01:32,550
Animator 変数 anim を作ることです

34
00:01:33,327 --> 00:01:35,957
そしてこの Animator オブジェクトへの参照を

35
00:01:35,957 --> 00:01:38,624
Start メソッドで次のように取得します

36
00:01:38,624 --> 00:01:42,805
anim = GetComponent<Animator>

37
00:01:43,719 --> 00:01:47,007
GetComponent 関数の詳細については

38
00:01:47,007 --> 00:01:49,007
下記リンク先にあるレッスンをご覧ください

39
00:01:49,977 --> 00:01:52,214
さてアニメーターコントローラーは設定完了

40
00:01:52,214 --> 00:01:54,409
あとは Speed パラメーターにより

41
00:01:54,409 --> 00:01:57,035
どの移動アニメーションが再生されるかが決定されます

42
00:01:57,682 --> 00:01:59,682
この振る舞いの制御にはプレイヤーの

43
00:01:59,682 --> 00:02:01,319
入力を使うことができます

44
00:02:02,182 --> 00:02:04,100
まずすべきことは Update メソッドの中に

45
00:02:04,100 --> 00:02:06,597
float 変数...ここでは move を

46
00:02:06,597 --> 00:02:08,154
作ることです

47
00:02:09,636 --> 00:02:12,165
続いてmove 変数を

48
00:02:12,165 --> 00:02:14,500
垂直入力軸とイコールでつなぎます

49
00:02:14,500 --> 00:02:17,645
具体的には Input.GetAxis と入力し

50
00:02:17,645 --> 00:02:21,347
さらに対カッコとその中に文字列 "Vertical" を入力します

51
00:02:22,496 --> 00:02:24,496
続いて move 変数の値を

52
00:02:24,496 --> 00:02:26,496
アニメーターコントローラーの

53
00:02:26,496 --> 00:02:29,402
Speed 属性にパースします

54
00:02:30,164 --> 00:02:32,788
これは Animator クラスの SetFloat

55
00:02:32,788 --> 00:02:34,788
関数を用いて行います

56
00:02:35,661 --> 00:02:38,381
SetFloat を使う理由は Speed が

57
00:02:38,381 --> 00:02:40,381
Float パラメーターであるためです

58
00:02:40,381 --> 00:02:42,381
これが Bool パラメーターだったら

59
00:02:42,381 --> 00:02:44,381
使うのは代わりに SetBool となります

60
00:02:44,381 --> 00:02:46,784
また仮に Trigger パラメーターだった場合は

61
00:02:46,784 --> 00:02:49,443
SetTrigger といった具合に変化します

62
00:02:50,513 --> 00:02:52,375
これら変数はそれぞれ

63
00:02:52,375 --> 00:02:54,375
複数の呼び出し方があります

64
00:02:54,875 --> 00:02:56,875
最も一般的なのは

65
00:02:56,875 --> 00:02:59,000
パラメーターの名前を文字列として

66
00:02:59,000 --> 00:03:00,630
パースさせる方法です

67
00:03:00,630 --> 00:03:02,781
続いて指定する項目は

68
00:03:02,781 --> 00:03:04,781
パラメーターにセットする値です

69
00:03:05,640 --> 00:03:08,125
この例ではまずアニメーター変数の SetFloat メソッドを

70
00:03:08,125 --> 00:03:11,117
次のように入力して呼び出します

71
00:03:11,117 --> 00:03:13,117
anim.SetFloat

72
00:03:13,617 --> 00:03:16,735
そして対カッコの中に文字列 "Speed" と

73
00:03:16,735 --> 00:03:18,735
変数 move を入力します

74
00:03:19,622 --> 00:03:22,400
さて Unity に戻ってシーンを実行してみましょう

75
00:03:22,400 --> 00:03:24,400
W または 上矢印キーを押すと

76
00:03:24,400 --> 00:03:27,594
モデルが動くようになったのが確認できました

77
00:03:27,594 --> 00:03:29,594
Speed パラメーターと再生される移動アニメーションが

78
00:03:29,594 --> 00:03:33,249
プレイヤー入力に基づいたものになりましたね

79
00:03:34,343 --> 00:03:35,942
しかしパラメーター名を 

80
00:03:35,942 --> 00:03:38,479
文字列でパースするのは呼び出されるたびに

81
00:03:38,479 --> 00:03:40,410
アニメーターが評価しなくてはいけないという

82
00:03:40,410 --> 00:03:43,203
ことなので非効率です

83
00:03:43,725 --> 00:03:45,725
パラメーターに値をセットするより高速な方法としては

84
00:03:45,725 --> 00:03:47,725
hashID を使う方法があります

85
00:03:48,225 --> 00:03:50,225
アニメーターが使える文字列には必ず

86
00:03:50,225 --> 00:03:52,057
hashID が存在します

87
00:03:52,057 --> 00:03:54,197
これは int 値で  各文字列に対して

88
00:03:54,197 --> 00:03:55,737
一意なものが割り当てられます

89
00:03:56,237 --> 00:03:58,237
そこでこの値を格納しておいて

90
00:03:58,237 --> 00:04:00,811
パラメーターのセット時に代わりにこの ID を使うわけです

91
00:04:01,621 --> 00:04:03,760
具体的には 最初に値を格納する

92
00:04:03,760 --> 00:04:05,525
必要があります

93
00:04:05,525 --> 00:04:08,656
さっそく int 変数 jumpHash を作って

94
00:04:08,656 --> 00:04:10,656
hashID の入れ物としましょう

95
00:04:11,198 --> 00:04:13,198
ハッシュ変数の値は

96
00:04:13,198 --> 00:04:16,208
Animator クラスの static メソッド

97
00:04:16,208 --> 00:04:18,208
StringToHash を呼び出して取得します

98
00:04:18,208 --> 00:04:21,019
このメソッドは static なのでアクセスするときは

99
00:04:21,019 --> 00:04:25,358
Animator.StringToHash と入力します

100
00:04:26,286 --> 00:04:28,915
続けて  対カッコの中にハッシュ ID を

101
00:04:28,915 --> 00:04:31,567
知りたい文字列を入れます

102
00:04:32,506 --> 00:04:34,506
モデルをジャンプさせるには

103
00:04:34,506 --> 00:04:36,870
アニメーターコントローラーで Jump Trigger

104
00:04:36,870 --> 00:04:38,870
パラメーターをセットする必要があります

105
00:04:39,370 --> 00:04:41,871
この例では スペースキーが押されるたびに

106
00:04:41,871 --> 00:04:43,871
モデルをジャンプさせたいので

107
00:04:44,371 --> 00:04:46,123
次のように入力していきます 

108
00:04:46,123 --> 00:04:51,302
if Input.GetKeyDown 続けて対カッコの中に

109
00:04:51,302 --> 00:04:54,736
KeyCode.Space と入力します

110
00:04:55,775 --> 00:04:58,135
そして if 文の中で

111
00:04:58,135 --> 00:05:00,774
Jump Trigger パラメーターをセットします

112
00:05:00,774 --> 00:05:03,257
これには anim.SetTrigger メソッドを使います

113
00:05:03,923 --> 00:05:05,923
そして対カッコの中に

114
00:05:05,923 --> 00:05:07,923
jumpHash 変数を入れます

115
00:05:09,017 --> 00:05:11,017
この変数には先ほどの通り

116
00:05:11,017 --> 00:05:13,768
Jump パラメーターの hashID が格納されています

117
00:05:14,567 --> 00:05:16,774
なお Jump は Trigger なので

118
00:05:16,774 --> 00:05:19,213
値をパースする必要はありません

119
00:05:20,351 --> 00:05:22,893
さて Unity に戻ってシーンを実行してみましょう

120
00:05:23,666 --> 00:05:26,209
Run 中にスペースキーを押すと

121
00:05:26,209 --> 00:05:28,209
ジャンプするのが確認できますね

122
00:05:29,096 --> 00:05:31,096
これで float パラメーター Speed と

123
00:05:31,096 --> 00:05:33,096
trigger パラメーター Jump の両方を使って

124
00:05:33,096 --> 00:05:35,716
よりダイナミックにモデルを

125
00:05:35,716 --> 00:05:36,989
動かせるようになりました

126
00:05:37,843 --> 00:05:40,146
さてアニメーションのロジックを組み立てている時には

127
00:05:40,146 --> 00:05:42,271
時折コントローラーがどのステートにあるのかを

128
00:05:42,271 --> 00:05:45,017
知る必要が出てくることがあります

129
00:05:45,986 --> 00:05:47,986
たとえばモデルが Run ステートの時にだけ

130
00:05:47,986 --> 00:05:50,153
Jump トリガーをセットできるように

131
00:05:50,153 --> 00:05:52,153
したいとしましょう

132
00:05:52,653 --> 00:05:55,495
Animator にはコントローラーの

133
00:05:55,495 --> 00:05:57,495
現在のステートを返す関数が

134
00:05:57,495 --> 00:05:59,008
幾つか用意されています

135
00:05:59,677 --> 00:06:01,872
これを使ってみるため

136
00:06:01,872 --> 00:06:04,243
AnimatorStateInfo 変数

137
00:06:04,243 --> 00:06:06,813
stateInfo を作ってみます

138
00:06:07,641 --> 00:06:10,045
AnimatorStateInfo クラスは

139
00:06:10,045 --> 00:06:12,443
名前・名前のハッシュ

140
00:06:12,443 --> 00:06:14,443
およびステートに関するその他のさまざまな

141
00:06:14,443 --> 00:06:15,839
情報を格納します

142
00:06:17,675 --> 00:06:19,911
stateInfo 変数を 

143
00:06:19,911 --> 00:06:24,830
anim.GetCurrentAnimatorStateInfo 関数とイコールでつなぎ

144
00:06:25,703 --> 00:06:28,838
対カッコの中に詳細を知りたい

145
00:06:28,838 --> 00:06:31,253
レイヤーのインデックスをパースします

146
00:06:31,253 --> 00:06:33,406
ここではベースレイヤーの情報を知りたいので

147
00:06:33,406 --> 00:06:35,406
0 を指定します

148
00:06:36,086 --> 00:06:38,086
繰り返しになりますが現在のアニメーションステート名は

149
00:06:38,086 --> 00:06:40,703
文字列で比較することも可能ですが

150
00:06:40,703 --> 00:06:42,425
hashID を使ったほうが効率的なので

151
00:06:42,425 --> 00:06:45,019
今回もそのようにします

152
00:06:46,044 --> 00:06:48,044
まず runStateHash という int 変数を

153
00:06:48,044 --> 00:06:51,200
作りそれを Animator.StringToHash 関数と

154
00:06:51,200 --> 00:06:54,151
イコールでつなぎます

155
00:06:54,872 --> 00:06:57,023
そして対カッコの中に

156
00:06:57,023 --> 00:07:00,243
文字列 "Base Layer.Run" を入力します

157
00:07:01,434 --> 00:07:04,212
「Base layer.」部分が必要なのは

158
00:07:04,212 --> 00:07:06,544
別のレイヤーでは同名ステートが

159
00:07:06,544 --> 00:07:08,146
存在しうるためです

160
00:07:08,947 --> 00:07:11,672
これで if 文を修正して次の条件が真の時にのみ

161
00:07:11,672 --> 00:07:13,910
モデルがジャンプできるよう指定できるようになりました

162
00:07:13,910 --> 00:07:17,140
具体的には if stateInfo.nameHash

163
00:07:17,140 --> 00:07:20,405
イコール runStateHash 変数と記述します

1
00:00:00,456 --> 00:00:02,260
Unity でゲームオブジェクトのプロパティを

2
00:00:02,260 --> 00:00:04,742
アニメーションさせる際には Animator

3
00:00:04,742 --> 00:00:06,385
コンポーネントを使用します

4
00:00:06,885 --> 00:00:09,315
Animator コンポーネントはアニメーションを追加する

5
00:00:09,315 --> 00:00:11,804
対象に応じたさまざまなプロパティを備えています

6
00:00:12,304 --> 00:00:15,374
これはたとえば 3D ヒューマノイドキャラクターと

7
00:00:15,374 --> 00:00:18,321
2D スプライトでは異なる設定が必要になるためです

8
00:00:19,415 --> 00:00:21,415
さてここにモデルが 1 体配置配置されたシーンがあります

9
00:00:21,998 --> 00:00:24,944
モデルには Animator コンポーネントがアタッチされています

10
00:00:25,900 --> 00:00:28,347
Animator コンポーネントの最初のプロパティには

11
00:00:28,347 --> 00:00:31,418
アニメーターコントローラーアセットへの参照が格納されています

12
00:00:31,821 --> 00:00:34,072
アニメーターコントローラーは Unity が生成するアセットで

13
00:00:34,072 --> 00:00:36,817
シーンの実行中にどのアニメーションを

14
00:00:36,817 --> 00:00:39,247
再生するかを決定するステートマシンを

15
00:00:39,247 --> 00:00:40,736
1 個以上含みます

16
00:00:41,664 --> 00:00:44,112
ステートマシンは複数レイヤー化することができ

17
00:00:44,112 --> 00:00:46,388
さまざまな型のパラメーターを取ることができ

18
00:00:46,388 --> 00:00:48,774
それに応じてステート間の遷移やブレンドを

19
00:00:48,774 --> 00:00:49,901
行います

20
00:00:50,594 --> 00:00:51,618
たとえば

21
00:00:51,939 --> 00:00:53,494
スクリプトでアニメーターコントローラーのパラメーターを

22
00:00:53,494 --> 00:00:56,101
指定することで  キャラクターが走っているのかジャンプしているのか

23
00:00:56,101 --> 00:00:58,351
あるいは銃を撃っているのかを

24
00:00:58,351 --> 00:00:59,712
伝えることなどができます

25
00:01:00,212 --> 00:01:02,776
その後はステートマシンが アニメーションを

26
00:01:02,776 --> 00:01:04,210
自動的に再生およびブレンドします

27
00:01:05,014 --> 00:01:07,815
Avatar は Unity が 3D ヒューマノイドを

28
00:01:07,815 --> 00:01:09,815
インポートする際に作成するアセットです

29
00:01:10,743 --> 00:01:12,743
Avatar にはキャラクターが持つ

30
00:01:12,743 --> 00:01:15,479
スケルタルリグの定義が含まれます

31
00:01:16,226 --> 00:01:17,909
このタイプのキャラクターをシーンに追加する場合

32
00:01:17,909 --> 00:01:20,048
Avatar フィールドは自動的に

33
00:01:20,048 --> 00:01:22,048
そのキャラクター向けに作られた

34
00:01:22,048 --> 00:01:24,048
アセットが割り当てられます

35
00:01:24,866 --> 00:01:27,185
Avatar はアニメーションを付けるときに

36
00:01:27,185 --> 00:01:29,464
モデルを繋ぎ合わせておいてくれる接着剤のように

37
00:01:29,464 --> 00:01:30,884
考えると良いかもしれません

38
00:01:32,199 --> 00:01:34,199
スケルタルリグを持たない汎用オブジェクトの場合

39
00:01:34,199 --> 00:01:37,232
Avatar は不要です

40
00:01:38,672 --> 00:01:41,145
Apply Root Motion（ルートモーションを適用）フィールドはアニメーションが

41
00:01:41,145 --> 00:01:43,145
ゲームオブジェクトの Transform に影響を

42
00:01:43,145 --> 00:01:45,453
及ぼすかどうかを指定するもので

43
00:01:45,453 --> 00:01:48,126
通常は 3D ヒューマノイドに対して使用されます

44
00:01:48,875 --> 00:01:50,875
この Root Motion とは  アニメーション

45
00:01:50,875 --> 00:01:52,682
クリップ内でコアとなる動作を指します

46
00:01:53,251 --> 00:01:54,546
たとえば

47
00:01:54,546 --> 00:01:56,546
移動せずに足踏み走りしている

48
00:01:56,546 --> 00:01:58,809
キャラクターアニメーションと

49
00:01:58,809 --> 00:02:00,809
少しずつ前進していくアニメーションを

50
00:02:00,809 --> 00:02:02,326
想像してみてください

51
00:02:03,074 --> 00:02:04,601
後者のアニメーションであれば

52
00:02:04,601 --> 00:02:06,601
ゲーム内を移動するときの

53
00:02:06,601 --> 00:02:08,783
前進用アニメーションとして

54
00:02:08,783 --> 00:02:10,616
利用できます

55
00:02:10,616 --> 00:02:13,323
そして  そのクリップをループさせることで

56
00:02:13,323 --> 00:02:14,933
リアルな連続的モーションを実現できます

57
00:02:15,478 --> 00:02:17,478
しかし  もし足踏み走りする

58
00:02:17,478 --> 00:02:19,716
アニメーションしかなかったら

59
00:02:19,716 --> 00:02:22,130
Apply Root Motion オプションは外して

60
00:02:22,130 --> 00:02:25,012
キャラクターをスクリプトで移動させたほうが良いでしょう

61
00:02:26,617 --> 00:02:28,381
またこのプロパティは完全にオーバーライド

62
00:02:28,381 --> 00:02:29,942
することも可能です

63
00:02:30,840 --> 00:02:32,840
オーバーライドする場合には  まずスクリプトを作成して

64
00:02:32,840 --> 00:02:36,055
onAnimatorMove 関数を呼び出し

65
00:02:36,055 --> 00:02:38,754
ゲームオブジェクトにアタッチします

66
00:02:39,364 --> 00:02:41,544
この手順についての詳細は以下の

67
00:02:41,544 --> 00:02:43,544
ドキュメントのリンクを参照してください

68
00:02:44,610 --> 00:02:46,928
Animate Physics（物理アニメーション）はオンでも

69
00:02:46,928 --> 00:02:48,177
オフでもかまいません

70
00:02:48,903 --> 00:02:50,903
オンにした場合にはアニメーションが

71
00:02:50,903 --> 00:02:53,402
物理演算エンジンに合わせて

72
00:02:53,402 --> 00:02:54,957
実行されます

73
00:02:55,584 --> 00:02:57,889
一般的にこの設定はアニメーション追加対象が 

74
00:02:57,889 --> 00:02:59,558
Rgidbody（剛体）を含む場合に

75
00:02:59,558 --> 00:03:01,087
オンにします

76
00:03:02,017 --> 00:03:04,017
Culling Mode（カリングモード）は

77
00:03:04,017 --> 00:03:06,212
レンダリングされていない時にアニメーションを

78
00:03:06,212 --> 00:03:08,016
再生するかどうかを指定するオプションです

79
00:03:08,712 --> 00:03:10,558
Always Animate（常にアニメーション）を指定すると

80
00:03:10,558 --> 00:03:12,558
レンダリングされていない状態でも

81
00:03:12,558 --> 00:03:13,766
アニメーションが再生されます

82
00:03:14,266 --> 00:03:16,266
Based On Renderers（レンダラーに合わせる）を指定すると

83
00:03:16,266 --> 00:03:19,323
レンダリングされている間だけアニメーションが再生されます

84
00:03:19,823 --> 00:03:21,781
こうすることでビューから外れたキャラクターの

85
00:03:21,781 --> 00:03:24,380
アニメーションを停止し  パフォーマンスを

86
00:03:24,380 --> 00:03:26,380
高めることができるわけです

87
00:03:27,322 --> 00:03:29,571
いずれのオプションを指定しても Root Motion は

88
00:03:29,571 --> 00:03:31,641
通常と同じように適用されます

89
00:03:31,641 --> 00:03:33,822
このためキャラクターが Root Motion で歩くように

90
00:03:33,822 --> 00:03:36,336
指定されている場合

91
00:03:36,336 --> 00:03:38,336
レンダリングされていない状態でも

92
00:03:38,336 --> 00:03:40,558
歩行移動を続けるので

93
00:03:40,558 --> 00:03:42,350
次に表示される時に正しい位置で

94
00:03:42,350 --> 00:03:44,350
レンダリングされるようになります

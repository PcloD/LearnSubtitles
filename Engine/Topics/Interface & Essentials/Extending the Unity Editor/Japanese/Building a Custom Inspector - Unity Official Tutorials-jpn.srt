1
00:00:00,308 --> 00:00:03,558
Unity ではカスタムインスペクターを作成して

2
00:00:03,558 --> 00:00:05,558
スクリプト中の どのデータを表示するか

3
00:00:05,558 --> 00:00:07,558
そしてエディター上でどう表示するかを制御できます

4
00:00:08,846 --> 00:00:11,547
エディターを拡張できるということは

5
00:00:11,547 --> 00:00:14,507
スクリプトがより強力かつ柔軟に使えるということで

6
00:00:14,507 --> 00:00:16,507
ひいてはワークフローの改良にもつながります

7
00:00:17,997 --> 00:00:19,997
たとえばレベルアップシステムを作っているとしましょう

8
00:00:19,997 --> 00:00:23,729
これは経験値を 750 ポイント獲得すると

9
00:00:23,729 --> 00:00:25,224
レベルがひとつ上がるシステムであるとします

10
00:00:26,191 --> 00:00:29,140
レベルが低いうちは計算も簡単ですが

11
00:00:29,140 --> 00:00:31,699
高レベルになるにつれてだんだんと

12
00:00:31,699 --> 00:00:33,699
計算がめんどくさくなってきます

13
00:00:33,699 --> 00:00:35,851
そこでカスタムインスペクターを

14
00:00:35,851 --> 00:00:37,851
使って この作業を簡単にしてみましょう

15
00:00:38,947 --> 00:00:40,947
ここに LevelScript というスクリプトがあります

16
00:00:41,724 --> 00:00:43,724
このスクリプトが先ほどの経験値ベースの

17
00:00:43,724 --> 00:00:45,724
レベルアップシステムです

18
00:00:46,723 --> 00:00:50,312
スクリプトで最初に目に入るのが experience 変数ですね

19
00:00:50,312 --> 00:00:52,312
この関数はキャラクターが獲得した

20
00:00:52,312 --> 00:00:54,312
経験値の累計を格納します

21
00:00:55,352 --> 00:00:57,921
次に Level というプロパティがあります

22
00:00:58,504 --> 00:01:00,504
このプロパティは 現在の経験値を取り

23
00:01:00,504 --> 00:01:03,372
対応するレベルを返します

24
00:01:03,941 --> 00:01:05,941
プロパティの詳細については

25
00:01:05,941 --> 00:01:07,941
下記リンク先にあるプロパティのレッスンをご覧ください

26
00:01:10,216 --> 00:01:12,913
さて空っぽのゲームオブジェクトを配置して

27
00:01:12,913 --> 00:01:14,705
それに LevelScript をアタッチしてみました

28
00:01:15,385 --> 00:01:17,385
Experience（経験値）プロパティがインスペクターに

29
00:01:17,385 --> 00:01:19,385
表示されているのが見えますね

30
00:01:20,092 --> 00:01:23,522
経験値が 0 ならレベルを計算するのも簡単ですが

31
00:01:23,522 --> 00:01:26,982
49865 だったらどうでしょう?

32
00:01:28,313 --> 00:01:30,313
ここでインスペクターをカスタマイズして

33
00:01:30,313 --> 00:01:32,313
レベルを表示してみましょう

34
00:01:33,020 --> 00:01:35,020
インスペクターをカスタマイズするにはまずエディターの

35
00:01:35,020 --> 00:01:37,636
スクリプトを格納するフォルダを作成する必要があります

36
00:01:38,205 --> 00:01:40,205
Unity に認識させるためこのフォルダの名前は

37
00:01:40,205 --> 00:01:42,205
Editor としてください

38
00:01:42,649 --> 00:01:45,328
そしてフォルダ内に新規スクリプトを作成します

39
00:01:46,119 --> 00:01:48,119
このスクリプトにカスタムインスペクターを含めます

40
00:01:49,588 --> 00:01:51,318
名前は自由に付けられますが

41
00:01:51,318 --> 00:01:53,318
今回は内容に沿って

42
00:01:53,318 --> 00:01:55,570
LevelScriptEditor としましょう

43
00:01:58,751 --> 00:02:01,363
それではこの LevelScriptEditor に

44
00:02:01,363 --> 00:02:03,476
カスタムインスペクターを書いていきます

45
00:02:05,127 --> 00:02:08,169
エディター固有のコードを書くときはまず

46
00:02:08,169 --> 00:02:10,169
UnityEditor 名前空間を使うことを

47
00:02:10,169 --> 00:02:12,169
宣言しなくてはいけません

48
00:02:12,925 --> 00:02:14,925
名前空間の詳細については

49
00:02:14,925 --> 00:02:17,527
下記リンク先にある名前空間のレッスンをご覧ください

50
00:02:19,202 --> 00:02:21,202
次に継承元を MonoBehaviour から

51
00:02:21,202 --> 00:02:23,202
Editor に変更します

52
00:02:23,202 --> 00:02:26,301
エディタの拡張は基本的にこうして行います

53
00:02:27,900 --> 00:02:29,900
継承の詳細については

54
00:02:29,900 --> 00:02:32,424
下記リンク先にある継承のレッスンをご覧ください

55
00:02:34,081 --> 00:02:36,081
さてここからは カスタムインスペクターに

56
00:02:36,081 --> 00:02:38,081
属性を与えて どのスクリプトを

57
00:02:38,081 --> 00:02:40,081
カスタマイズしているのかを示します

58
00:02:41,133 --> 00:02:43,133
構文はまず開き角カッコ  続けて

59
00:02:43,133 --> 00:02:45,133
キーワードCustomEditor

60
00:02:45,133 --> 00:02:48,296
そしてカッコ

61
00:02:49,643 --> 00:02:52,737
カッコの中にはキーワード

62
00:02:52,737 --> 00:02:55,223
typeOf で型を指定します

63
00:02:55,962 --> 00:02:58,527
そしてその中にさらにカッコの対を作り

64
00:02:58,527 --> 00:03:00,527
スクリプトの名前を入力します

65
00:03:01,579 --> 00:03:03,579
この例では ご覧のとおり

66
00:03:03,579 --> 00:03:06,521
カスタマイズするのは LevelScript です

67
00:03:08,517 --> 00:03:11,397
そして行を  閉じ角カッコで締めます

68
00:03:13,031 --> 00:03:15,719
続いて LevelScriptEditor クラスの内部に

69
00:03:15,719 --> 00:03:19,446
メソッド public override void OnInspectorGUI

70
00:03:21,870 --> 00:03:23,870
を作ります

71
00:03:19,446 --> 00:03:21,446
このメソッドはインスペクターが Unity 上で描画される際に

72
00:03:23,862 --> 00:03:25,862
毎回呼び出されます

73
00:03:27,461 --> 00:03:29,461
override キーワードの

74
00:03:29,461 --> 00:03:30,940
挙動の詳細については

75
00:03:30,940 --> 00:03:33,527
下記リンク先にあるオーバーライドのレッスンをご覧ください

76
00:03:36,643 --> 00:03:38,643
これで LevelScript のインスペクターが 

77
00:03:38,643 --> 00:03:40,643
変更されました

78
00:03:41,269 --> 00:03:43,269
この状態で Unity に戻ると

79
00:03:43,269 --> 00:03:45,269
スクリプトのプロパティがひとつも

80
00:03:45,269 --> 00:03:47,269
インスペクタービューに表示されないのがわかります

81
00:03:49,033 --> 00:03:51,033
これではぜんぜん便利でないので

82
00:03:51,033 --> 00:03:53,295
カスタマイズを進めていきましょう

83
00:03:56,544 --> 00:03:58,544
LevelScriptEditor に戻って

84
00:03:58,813 --> 00:04:01,503
インスペクターで表示するフィールドを作ってみます

85
00:04:02,668 --> 00:04:05,893
OnInspectorGUI メソッドの内部には自動的に LevelScript

86
00:04:05,893 --> 00:04:09,505
オブジェクトへの参照である target が含まれます

87
00:04:11,051 --> 00:04:13,051
しかしこれは適切な型の変数に

88
00:04:13,051 --> 00:04:15,051
キャストするまでは使えません

89
00:04:16,077 --> 00:04:18,077
なのでまず myLevelScript という

90
00:04:18,077 --> 00:04:21,346
LevelScript 変数を作り

91
00:04:22,006 --> 00:04:25,256
継承した変数 target とイコールでつなぎます

92
00:04:27,524 --> 00:04:29,524
そして最後に target 変数を

93
00:04:29,524 --> 00:04:31,524
LevelScript 変数としてキャストします

94
00:04:31,524 --> 00:04:35,127
これはカッコで囲んだ LevelScript を隣に書いて表現します

95
00:04:37,769 --> 00:04:40,493
さてここでインスペクターに表示したい情報は

96
00:04:41,064 --> 00:04:43,064
キャラクターの獲得した経験値合計と

97
00:04:43,412 --> 00:04:45,412
現在のレベルの 2 つです

98
00:04:46,507 --> 00:04:49,038
インスペクターに int フィールドを作るときは

99
00:04:49,038 --> 00:04:51,746
EditorGUILayout クラスを使います

100
00:04:52,859 --> 00:04:55,544
構文は  最初にクラス名

101
00:04:55,544 --> 00:04:58,266
EditorGUILayout 続けて.（ピリオド）

102
00:04:58,796 --> 00:05:00,796
そしてメソッド IntField

103
00:05:01,378 --> 00:05:03,378
最後にカッコ

104
00:05:05,594 --> 00:05:09,103
カッコの中にはフィールド名と

105
00:05:09,103 --> 00:05:10,634
フィールドの値を指定します

106
00:05:11,103 --> 00:05:14,736
今回はフィールド名に Experience（経験値）

107
00:05:14,736 --> 00:05:17,924
値に myLevelScript の experience 変数の値を

108
00:05:17,924 --> 00:05:19,924
指定します

109
00:05:22,470 --> 00:05:24,470
このフィールドに experience 変数への書き込みも

110
00:05:24,470 --> 00:05:27,734
させたいので  行全体を myLevelScript.experience と

111
00:05:27,734 --> 00:05:30,688
イコールでつなぎます

112
00:05:32,930 --> 00:05:35,545
Level フィールドもだいたい同じように処理していきます

113
00:05:36,405 --> 00:05:38,405
ただし今回は

114
00:05:38,405 --> 00:05:42,484
EditorGUILayout クラスの LabelField メソッドを使います

115
00:05:43,689 --> 00:05:45,951
ラベルは読み取り専用なので

116
00:05:45,951 --> 00:05:47,951
ユーザーがインスペクター上でレベルを

117
00:05:47,951 --> 00:05:50,371
手動入力してしまうことは起きません 

118
00:05:52,326 --> 00:05:55,058
LabelField メソッドのカッコ内には

119
00:05:55,623 --> 00:05:57,623
Level という名前と

120
00:05:57,623 --> 00:06:00,532
値 myLevelScript.Level を指定します

121
00:06:02,748 --> 00:06:06,027
ただしラベルのコントロールは文字列である必要があるので

122
00:06:06,027 --> 00:06:08,027
ここで Level プロパティに対して

123
00:06:08,027 --> 00:06:10,027
ToString メソッドを使い

124
00:06:10,027 --> 00:06:11,320
文字列に変換します

125
00:06:13,009 --> 00:06:15,762
これでカスタムインスペクターは完成です

126
00:06:16,735 --> 00:06:19,554
さっそく Unity に戻って確認してみましょう

127
00:06:22,500 --> 00:06:24,500
ご覧のとおり インスペクターには

128
00:06:24,500 --> 00:06:28,923
経験値が 49865 のとき

129
00:06:28,923 --> 00:06:30,923
レベルは 66 と表示されました

130
00:06:32,296 --> 00:06:34,296
そして  この経験値のフィールドで

131
00:06:34,296 --> 00:06:36,296
値を変更していくと

132
00:06:36,296 --> 00:06:38,729
自動的にレベルの値も変更されていきます

133
00:06:42,154 --> 00:06:44,154
このようにスクリプト向けにエディターを

134
00:06:44,675 --> 00:06:47,268
カスタマイズすると 手動では面倒くさい

135
00:06:47,268 --> 00:06:49,784
さまざまな事柄が自動化できるわけです

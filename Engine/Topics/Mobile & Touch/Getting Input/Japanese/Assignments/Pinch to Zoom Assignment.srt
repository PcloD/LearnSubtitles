1
00:00:00,180 --> 00:00:02,807
この課題では

2
00:00:02,807 --> 00:00:04,807
標準的なピンチズーム式

3
00:00:04,807 --> 00:00:06,654
タッチコントロールを作っていきます

4
00:00:07,057 --> 00:00:10,157
制御にはスクリプトを使い

5
00:00:10,157 --> 00:00:11,977
それをカメラにアタッチします

6
00:00:12,270 --> 00:00:14,880
まずシーン内のカメラを選択します

7
00:00:15,518 --> 00:00:17,965
続いてカメラに C# スクリプトを

8
00:00:17,965 --> 00:00:22,260
追加します  手順は Add Component > New Script です

9
00:00:22,663 --> 00:00:25,304
スクリプト名は PinchZoom としましょう

10
00:00:25,680 --> 00:00:29,096
完了したら Create and Add をクリックします

11
00:00:29,720 --> 00:00:31,874
続いてスクリプトをダブルクリックして

12
00:00:31,874 --> 00:00:33,874
編集用に開きます

13
00:00:34,650 --> 00:00:36,357
ここではクラスの中身を消して

14
00:00:36,357 --> 00:00:38,357
ゼロからスタートしてみましょう

15
00:00:39,023 --> 00:00:42,324
基本的に PinchZoom は次のように機能します

16
00:00:42,617 --> 00:00:44,311
まずはデバイス上にちょうど 2 つの

17
00:00:44,311 --> 00:00:46,656
タッチがなければなりません

18
00:00:47,322 --> 00:00:49,322
そして前のフレームと現在のフレームでの

19
00:00:49,322 --> 00:00:51,322
両タッチ間の距離も

20
00:00:51,322 --> 00:00:53,322
知る必要があります

21
00:00:54,623 --> 00:00:56,623
タッチ間の距離が

22
00:00:56,623 --> 00:00:59,065
小さくなっていいれば タッチは

23
00:00:59,065 --> 00:01:01,770
近づいているので ズームアウトしなくてはなりません

24
00:01:02,490 --> 00:01:04,686
また同様にタッチ間の距離が

25
00:01:04,686 --> 00:01:07,784
大きくなっていればズームインさせなければなりません

26
00:01:08,788 --> 00:01:10,941
このスクリプトでは最初に

27
00:01:10,941 --> 00:01:13,708
いくつか public float 変数を作ります

28
00:01:14,208 --> 00:01:15,999
これら変数はズームが生じる時の

29
00:01:15,999 --> 00:01:17,999
速度の調整に使用します

30
00:01:18,499 --> 00:01:20,499
遠近投影（Perspective）カメラと平行投影（Orthographic）カメラの

31
00:01:20,499 --> 00:01:23,529
スピードを別々に調整するため

32
00:01:23,529 --> 00:01:25,529
ここでは変数が 2 つ必要です

33
00:01:26,595 --> 00:01:28,414
それぞれの変数名は

34
00:01:28,414 --> 00:01:30,247
perspectiveZoomSpeed

35
00:01:30,247 --> 00:01:33,039
と orthoZoomSpeed としましょう

36
00:01:33,677 --> 00:01:37,066
デフォルトの値は 0.5 としておきます

37
00:01:38,188 --> 00:01:40,518
通常タッチ入力は Update ループ内で

38
00:01:40,518 --> 00:01:43,160
検出されるので 入力は Update 関数内で

39
00:01:43,160 --> 00:01:45,873
対処するのがベストです

40
00:01:46,889 --> 00:01:49,685
ただここではデバイス上にタッチ箇所

41
00:01:49,685 --> 00:01:52,408
2 つだけのとき処理を行いたいですよね

42
00:01:52,862 --> 00:01:56,995
それをチェックするには Input.touchCount プロパティを使います

43
00:01:57,882 --> 00:01:59,799
これで確実にタッチの数が 2 つだけに

44
00:01:59,799 --> 00:02:02,714
なったので  この 2 つを変数の中に

45
00:02:02,714 --> 00:02:04,951
格納していきます

46
00:02:04,951 --> 00:02:07,355
こうしておくことで input クラスのプロパティに

47
00:02:07,355 --> 00:02:09,355
アクセスし続ける必要がなくなるわけです

48
00:02:10,297 --> 00:02:13,431
タッチにアクセスするのには input クラスの

49
00:02:13,431 --> 00:02:15,431
GetTouch 関数を使用します

50
00:02:15,931 --> 00:02:18,594
タッチは 2 つだけなので

51
00:02:18,594 --> 00:02:22,541
タッチ配列のインデックスは 0 と 1 があります

52
00:02:23,207 --> 00:02:25,787
なのでここでも GetTouch 関数に

53
00:02:25,787 --> 00:02:29,813
0 と 1 を渡してタッチのコピーを取得します

54
00:02:30,672 --> 00:02:32,466
これでタッチは揃ったので

55
00:02:32,466 --> 00:02:34,466
次に直前のフレームでの両タッチの位置を

56
00:02:34,466 --> 00:02:35,904
取得していきます

57
00:02:36,565 --> 00:02:39,336
これにはまず現在位置を置いて

58
00:02:39,336 --> 00:02:41,336
そこから delta（差分）位置を引きます

59
00:02:43,134 --> 00:02:45,134
こうしてフレーム間でのタッチの距離を検知した上で

60
00:02:45,134 --> 00:02:48,494
その情報に基づいてズームインするか

61
00:02:48,494 --> 00:02:50,853
ズームアウトするかを決定するのです

62
00:02:51,519 --> 00:02:54,721
フレーム間のタッチの距離を検出するには

63
00:02:54,721 --> 00:02:56,638
タッチ位置を減算することで

64
00:02:56,638 --> 00:02:58,749
タッチ位置間のベクトルを取得します

65
00:02:59,621 --> 00:03:03,295
そしてそのベクトルから大きさを計算します

66
00:03:03,836 --> 00:03:05,836
これはベクトルの減算式を

67
00:03:05,836 --> 00:03:08,614
カッコで囲みドット演算子を使用すれば

68
00:03:08,614 --> 00:03:10,378
1 ステップで可能です

69
00:03:11,183 --> 00:03:12,835
ここでは Delta（差分）という用語を

70
00:03:12,835 --> 00:03:16,623
使っていますが  これは 2 つのデータの変化を示しているためです

71
00:03:17,827 --> 00:03:19,729
さてこれでフレームごとの両タッチ間の距離が

72
00:03:19,729 --> 00:03:21,729
分かるようになったので

73
00:03:21,729 --> 00:03:25,064
距離の差分が分かるようになりました

74
00:03:25,647 --> 00:03:29,383
ここでは何を何で減算するのかが重要になります

75
00:03:29,383 --> 00:03:31,383
ここでは前のフレームのタッチ間の距離から

76
00:03:31,383 --> 00:03:34,826
現在のフレームのタッチ間の距離を引きます

77
00:03:35,464 --> 00:03:37,725
こうすると現在フレームの

78
00:03:37,725 --> 00:03:40,056
距離のほうが大きければ

79
00:03:40,056 --> 00:03:42,056
結果は負の値になり

80
00:03:42,515 --> 00:03:45,630
指が離れていっていることを示します

81
00:03:45,630 --> 00:03:47,630
指が離れていっている場合は

82
00:03:47,630 --> 00:03:49,630
期待される動作はズームインになるので

83
00:03:49,630 --> 00:03:51,187
その結果として視野または

84
00:03:51,187 --> 00:03:53,688
カメラの平行投影サイズを小さくします

85
00:03:55,082 --> 00:03:57,747
視野または平行投影サイズを「小さくしたい」ので

86
00:03:57,747 --> 00:04:00,683
この状況においては2 つの値の減算順序が

87
00:04:00,683 --> 00:04:04,138
これで正しくなるわけです

88
00:04:05,204 --> 00:04:06,786
さてここでカメラのプロパティを

89
00:04:06,786 --> 00:04:08,621
変更していく前に

90
00:04:08,621 --> 00:04:11,627
カメラが遠近投影なのか平行投影なのかを

91
00:04:11,627 --> 00:04:13,627
知る必要があります

92
00:04:13,627 --> 00:04:16,447
カメラが並行投影であればカメラの

93
00:04:16,447 --> 00:04:19,843
平行投影サイズを距離の差分に

94
00:04:19,843 --> 00:04:23,291
平行投影スピードを乗算して調節できます

95
00:04:24,537 --> 00:04:27,824
またこの時カメラの平行投影サイズが

96
00:04:27,824 --> 00:04:29,644
0 を下回らないようにする必要があります

97
00:04:30,062 --> 00:04:32,700
下回ると画像が反転してしまうからです

98
00:04:33,200 --> 00:04:35,337
これを防ぐためここでは

99
00:04:35,337 --> 00:04:38,706
Mathf クラスの Max 関数を使用します

100
00:04:39,206 --> 00:04:41,206
この関数は与えられたパラメーターのうち

101
00:04:41,206 --> 00:04:43,206
最も大きい物を返します

102
00:04:43,706 --> 00:04:46,342
ここにカメラの平行投影サイズと

103
00:04:46,342 --> 00:04:48,342
値 1 をセットします

104
00:04:49,035 --> 00:04:52,536
これでサイズ値が 1 を下回っても

105
00:04:52,536 --> 00:04:55,016
代わりに 1 が返されるわけです

106
00:04:56,376 --> 00:04:59,970
さて  カメラが平行投影でない場合には

107
00:04:59,970 --> 00:05:01,970
それはつまり遠近投影モードであることを示します

108
00:05:01,970 --> 00:05:04,584
そしてその場合には視野を変更する必要があります

109
00:05:05,194 --> 00:05:08,464
視野の変更手順はほぼ同様ですが

110
00:05:08,464 --> 00:05:11,286
ここでは代わりに perspectiveZoomSpeed を使用します

111
00:05:13,029 --> 00:05:15,630
また視野も同じく制限を掛ける必要がありますが

112
00:05:15,630 --> 00:05:19,194
視野は角度で示されるので

113
00:05:19,194 --> 00:05:22,692
ここでは値を 0 から 180 の間でクランプするようにします

114
00:05:23,330 --> 00:05:27,657
これには Mathf クラスの Clamp 関数を使用します

115
00:05:28,157 --> 00:05:30,157
この関数は値を 3 つ取ります

116
00:05:30,157 --> 00:05:32,851
最初がクランプする値

117
00:05:32,851 --> 00:05:35,201
次が最小許容値

118
00:05:35,201 --> 00:05:37,781
最後が最大許容値です

119
00:05:38,834 --> 00:05:41,585
これはカメラの視野角なので

120
00:05:41,585 --> 00:05:44,287
最小 0.1 から

121
00:05:44,287 --> 00:05:46,770
最大 179.9 とします

122
00:05:48,265 --> 00:05:50,668
自身でピンチズームを作成するときには

123
00:05:50,668 --> 00:05:53,153
平行投影モードでも遠近投影モードでも

124
00:05:53,153 --> 00:05:55,990
この制限値はより適切な値に調整したほうが良いでしょう

125
00:05:56,647 --> 00:05:59,241
このスクリプトで扱っている値は

126
00:05:59,241 --> 00:06:01,241
挙動がおかしくならないギリギリの

127
00:06:01,241 --> 00:06:03,086
値であると考えてください

128
00:06:03,610 --> 00:06:07,156
さてこれでスクリプトは準備完了です  さっそくテストしてみましょう

129
00:06:07,977 --> 00:06:10,627
ここではすでにテスト可能なデバイスが

130
00:06:10,627 --> 00:06:12,471
手元にあるものと想定します

131
00:06:12,471 --> 00:06:14,471
デバイスの準備方法などについては

132
00:06:14,471 --> 00:06:16,471
デバイスのドキュメントを参照してください

133
00:06:17,697 --> 00:06:19,697
さてプロジェクトをビルドしていきましょう

134
00:06:19,697 --> 00:06:21,923
File > Build Settings の順に操作し

135
00:06:22,471 --> 00:06:25,043
ここでビルドに現在のシーンを追加する必要があります

136
00:06:25,543 --> 00:06:27,306
シーンを保存するかを求められますので

137
00:06:27,306 --> 00:06:28,939
していない場合は保存しましょう

138
00:06:29,675 --> 00:06:31,877
そうしたら Build And Run をクリックします

139
00:06:32,723 --> 00:06:35,546
これでタッチ箇所を近づけていくと離していくとカメラが

140
00:06:35,546 --> 00:06:37,344
ズームアウトし

141
00:06:37,344 --> 00:06:40,137
離していくとカメラがズームインするのが確認できますね

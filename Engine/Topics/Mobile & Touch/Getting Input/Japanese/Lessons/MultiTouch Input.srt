1
00:00:00,180 --> 00:00:04,379
マウスやキーボードといったデバイスの他に

2
00:00:04,379 --> 00:00:07,574
Unity はタッチスクリーンからの入力にも対応しています

3
00:00:08,143 --> 00:00:10,395
ただしタッチ入力の特性上

4
00:00:10,395 --> 00:00:12,395
その扱いは少し異なります

5
00:00:13,641 --> 00:00:15,641
使用するクラスは input クラスで

6
00:00:15,641 --> 00:00:18,309
これは他の入力デバイスと同じですが

7
00:00:18,309 --> 00:00:20,309
ユーザーがタッチする箇所が同時に複数に

8
00:00:20,309 --> 00:00:23,863
なる場合があるため入力は配列として扱われます

9
00:00:25,067 --> 00:00:27,540
任意のタッチを取得する場合には

10
00:00:27,540 --> 00:00:30,282
input クラスの Get.Touch 関数を

11
00:00:30,282 --> 00:00:32,005
使用するのが効率的です

12
00:00:32,782 --> 00:00:35,803
Get.Touch 関数は int 値をひとつ取り

13
00:00:35,803 --> 00:00:39,231
配列中の該当するインデックスのタッチを返します

14
00:00:39,731 --> 00:00:41,731
たとえば配列中の最初のタッチに

15
00:00:41,731 --> 00:00:43,731
アクセスしたい場合には

16
00:00:43,731 --> 00:00:45,731
touch 変数を作成して 

17
00:00:45,731 --> 00:00:50,523
Input.GetTouch に 0 を指定します

18
00:00:51,230 --> 00:00:55,030
touch 変数は touch 構造体のインスタンスです

19
00:00:55,640 --> 00:00:58,584
構造体はクラスに似ています

20
00:00:58,584 --> 00:01:01,001
変数と関数の集合体というのも

21
00:01:01,001 --> 00:01:03,849
クラスと同じですね  この例では

22
00:01:03,849 --> 00:01:05,849
同じものと考えることも可能です

23
00:01:06,611 --> 00:01:09,179
touch 構造体には複数のプロパティがあり

24
00:01:09,179 --> 00:01:10,886
ゲーム中でタッチをどう扱うかに応じて

25
00:01:10,886 --> 00:01:14,032
さまざまな使い方をすることができます

26
00:01:14,974 --> 00:01:17,750
fingerId プロパティは特定のタッチが

27
00:01:17,750 --> 00:01:19,750
継続している間持続する

28
00:01:19,750 --> 00:01:21,156
一意の識別子です

29
00:01:21,849 --> 00:01:25,819
これを使うことで任意のタッチのアクションを追跡することができます

30
00:01:26,319 --> 00:01:28,662
そしてタッチが配列からなくなると

31
00:01:28,662 --> 00:01:32,405
タッチは終了し また別のタッチにこの ID が使われるようになります

32
00:01:33,582 --> 00:01:37,716
position プロパティはスクリーン上でのタッチの位置を示します

33
00:01:38,216 --> 00:01:41,686
値はスクリーン空間で計測される vector2 です

34
00:01:42,186 --> 00:01:44,628
スクリーン空間は左下隅から

35
00:01:44,628 --> 00:01:46,628
ピクセル（画素数）で計測されます

36
00:01:46,628 --> 00:01:50,715
このため画面左下では両軸は 0 に

37
00:01:50,715 --> 00:01:53,873
スクリーンの右端では画面幅の画素数

38
00:01:53,873 --> 00:01:56,726
スクリーンの上端では画面高の画素数になります

39
00:01:57,437 --> 00:02:00,366
deltaPosition プロパティは vector2 で

40
00:02:00,366 --> 00:02:02,146
タッチの前フレームの位置と

41
00:02:02,146 --> 00:02:05,787
現在フレーム位置の差分を示します

42
00:02:06,276 --> 00:02:08,511
これはタッチの移動方向を知りたい時に

43
00:02:08,511 --> 00:02:11,561
非常に便利なプロパティです

44
00:02:12,213 --> 00:02:14,364
また deltaPosition の他に

45
00:02:14,364 --> 00:02:17,596
touch 構造体には deltaTime プロパティがあります

46
00:02:18,151 --> 00:02:21,344
これは前回タッチされてからの時間を示します

47
00:02:21,941 --> 00:02:25,323
通常、タッチはUpdate関数の中で検出されます

48
00:02:25,892 --> 00:02:28,332
そのような状況下では deltaTime プロパティは

49
00:02:28,332 --> 00:02:31,788
time.deltaTime と同じになります

50
00:02:32,288 --> 00:02:34,806
各タッチには tapCount プロパティが用意されています

51
00:02:35,306 --> 00:02:37,306
これは連続して何度タップされたかを

52
00:02:37,306 --> 00:02:39,114
計測するためのプロパティです

53
00:02:39,654 --> 00:02:43,249
タップが記録された場合 fingerId は維持されます

54
00:02:43,749 --> 00:02:47,352
ただし複数の指で連続してタップが行われた場合

55
00:02:47,352 --> 00:02:49,627
その内容は同一の指が画面中を移動しながら

56
00:02:49,627 --> 00:02:51,239
連続でタップしたものとして捉えられます

57
00:02:52,307 --> 00:02:55,277
最後に紹介するプロパティはタッチの phase です

58
00:02:55,277 --> 00:02:58,285
これは TouchPhase と呼ばれる Enum（列挙）です

59
00:02:58,785 --> 00:03:00,803
phase に指定可能な値は 

60
00:03:00,803 --> 00:03:05,546
Began / Cancelled / Ended / Moved / Stationary があります

61
00:03:06,350 --> 00:03:07,972
phase Began はタッチの最初の

62
00:03:07,972 --> 00:03:09,972
フレームで返されます

63
00:03:09,972 --> 00:03:12,638
Stationary はタッチが移動していない場合に返されます

64
00:03:13,138 --> 00:03:17,414
Moved はタッチが画面上で位置を変化させている場合に返されます

65
00:03:18,439 --> 00:03:22,278
Ended はタッチの最後のフレームで返されます

66
00:03:23,165 --> 00:03:25,165
Cancelled の phase はデバイスが画面入力を

67
00:03:25,165 --> 00:03:27,879
処理できない時に返されます

68
00:03:28,379 --> 00:03:30,379
これは例えばデバイスの対応する数以上の同時タッチが

69
00:03:30,379 --> 00:03:32,323
生じた場合や

70
00:03:32,323 --> 00:03:34,921
画面の広い範囲を押されている場合などがあります

71
00:03:37,875 --> 00:03:40,516
また  タッチオブジェクトの配列を作成してそれを

72
00:03:40,516 --> 00:03:42,516
input クラスの touches プロパティと

73
00:03:42,516 --> 00:03:45,360
イコールでつなぐことで配列全体を

74
00:03:45,360 --> 00:03:47,099
取得することもできます

75
00:03:47,653 --> 00:03:49,653
これでタッチの配列ができました

76
00:03:49,653 --> 00:03:53,139
通常はこれを繰り返すことが推奨されます

77
00:03:53,542 --> 00:03:57,063
そうすることで各タッチをプロパティに基いて

78
00:03:57,063 --> 00:03:58,644
個別に扱えるようにするためです

79
00:03:59,213 --> 00:04:01,997
その場合には for ループを使います

80
00:04:02,566 --> 00:04:05,428
正しい回数だけループさせるには

81
00:04:05,428 --> 00:04:08,598
touches 配列の length プロパティを利用することもできますが

82
00:04:09,098 --> 00:04:11,542
input クラスの touchCount プロパティを

83
00:04:11,542 --> 00:04:14,860
用いたほうがより効率的です

84
00:04:15,470 --> 00:04:18,865
これでタッチを個別に扱えるようになりました

85
00:04:18,865 --> 00:04:21,453
しかし場合によってはこれ以外の方法で

86
00:04:21,453 --> 00:04:23,968
タッチを扱いたい場合というのも生じます

87
00:04:24,657 --> 00:04:28,034
たとえば特定の回数のタッチによって可能になる

88
00:04:28,034 --> 00:04:30,407
複雑なジェスチャーが必要なコードを

89
00:04:30,407 --> 00:04:32,407
書くときなどがこれに当たります

90
00:04:32,907 --> 00:04:35,507
タッチ入力の詳細については

91
00:04:35,507 --> 00:04:37,757
下記リンク先にある課題をご覧ください

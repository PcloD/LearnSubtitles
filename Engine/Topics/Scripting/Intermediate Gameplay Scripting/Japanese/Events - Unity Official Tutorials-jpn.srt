1
00:00:00,269 --> 00:00:01,888
Event は他のクラスに何らかの

2
00:00:01,888 --> 00:00:03,723
出来事が起きたことを通知する事に

3
00:00:03,723 --> 00:00:05,723
特化したデリゲートです

4
00:00:06,454 --> 00:00:08,454
実際には Event は public multicast デリゲートと

5
00:00:08,454 --> 00:00:12,087
よく似た関数のように見えます

6
00:00:12,856 --> 00:00:14,625
デリゲートの詳細については

7
00:00:14,625 --> 00:00:17,069
下記リンク先にあるデリゲートのレッスンをご覧ください

8
00:00:18,740 --> 00:00:21,713
Event はブロードキャストシステムのように捉えることができます

9
00:00:21,713 --> 00:00:23,713
あるイベントに興味を持ったクラスは

10
00:00:23,713 --> 00:00:25,713
そのメソッドを購読（サブスクライブ）することができます

11
00:00:26,550 --> 00:00:28,914
特定の状況が生じたとき...

12
00:00:28,914 --> 00:00:32,458
たとえばボタンのクリックやパワーアップ あるいはプレイヤーが負傷したなどに

13
00:00:32,458 --> 00:00:34,458
イベントを呼び出し その結果として

14
00:00:34,458 --> 00:00:37,110
購読しているクラスのメソッドを呼び出すのです

15
00:00:38,495 --> 00:00:40,495
さて ここに 2 つのオーブが配置されたシーンがあります

16
00:00:40,937 --> 00:00:43,754
一方のオーブには TeleportScript がアタッチされていて

17
00:00:43,754 --> 00:00:46,690
他方には TurnColorScript がアタッチされています

18
00:00:47,315 --> 00:00:50,512
そしてカメラには EventManagerScript がアタッチされています

19
00:00:51,368 --> 00:00:54,466
イベントはどういった状況に対しても発行することができますが

20
00:00:54,466 --> 00:00:57,175
この例ではプレイヤーが画面に描画している

21
00:00:57,175 --> 00:00:58,877
ボタンをクリックした時にイベントを

22
00:00:58,877 --> 00:01:00,877
発行することにします

23
00:01:01,964 --> 00:01:03,964
さて EventManager スクリプトでは

24
00:01:03,964 --> 00:01:06,089
最初にデリゲートの型を作ります

25
00:01:06,089 --> 00:01:08,089
名前は ClickAction としておきましょう

26
00:01:09,031 --> 00:01:12,418
ご覧のとおり イベントを購読するメソッドは

27
00:01:12,418 --> 00:01:16,181
パラメーターなし  戻り値の型なし（void）とする必要があります

28
00:01:16,945 --> 00:01:20,221
続いてイベント変数を作ります

29
00:01:20,221 --> 00:01:23,261
イベントを作るには event キーワードを使います

30
00:01:23,803 --> 00:01:26,235
なお  この変数は static なので

31
00:01:26,235 --> 00:01:28,235
このクラスのオブジェクトをインスタンス化しなくとも

32
00:01:28,235 --> 00:01:31,290
クラスの外側からも使用可能です

33
00:01:32,623 --> 00:01:36,297
ここで OnClicked と名づけられたイベント変数は

34
00:01:36,297 --> 00:01:39,248
上で作ったデリゲートの型になります

35
00:01:40,012 --> 00:01:42,896
さてこのクラスのもう一つの重大な仕事は

36
00:01:42,896 --> 00:01:44,896
適切な状況が生じた時にイベントを

37
00:01:44,896 --> 00:01:46,616
呼び出すことです

38
00:01:47,257 --> 00:01:48,949
先述の通り

39
00:01:48,949 --> 00:01:50,949
このイベントを呼び出すのはプレイヤーが

40
00:01:50,949 --> 00:01:52,298
ボタンをクリックした時です

41
00:01:52,298 --> 00:01:55,521
そのために  このスクリプトには OnGUI メソッドがあります

42
00:01:56,729 --> 00:01:58,631
OnGUI メソッド内部では

43
00:01:58,631 --> 00:02:00,631
画面に表示するボタンを作成します

44
00:02:01,089 --> 00:02:03,089
プレイヤーがボタンをクリックすると

45
00:02:03,089 --> 00:02:06,035
イベント変数が関数のように使われて

46
00:02:06,535 --> 00:02:09,328
イベントが発行されます

47
00:02:10,550 --> 00:02:12,886
なおデリゲートの場合と同様に

48
00:02:12,886 --> 00:02:14,886
サブスクライバーが存在しないイベントを発行すると

49
00:02:14,886 --> 00:02:16,886
エラーが生じます

50
00:02:16,886 --> 00:02:18,886
このためイベントの発行前には

51
00:02:18,886 --> 00:02:20,886
必ずnull とイコールにならない

52
00:02:20,886 --> 00:02:22,886
ようにしましょう

53
00:02:23,789 --> 00:02:26,137
さて先程のシーンでは 2 つのオーブに

54
00:02:26,137 --> 00:02:29,393
それぞれ異なるスクリプトがアタッチされていました

55
00:02:29,393 --> 00:02:31,393
この 2 つのスクリプトはイベントのサブスクライバーとして

56
00:02:31,393 --> 00:02:33,184
機能します

57
00:02:33,184 --> 00:02:35,184
それでは中身を見てみましょう

58
00:02:36,503 --> 00:02:38,503
TeleportScript 内には

59
00:02:38,503 --> 00:02:40,503
Teleport というメソッドが作られています

60
00:02:41,114 --> 00:02:43,114
これは EventManager で作成した

61
00:02:43,114 --> 00:02:46,023
イベントを購読することになるメソッドです

62
00:02:46,815 --> 00:02:50,097
ご覧のとおり Teleport メソッドはパラメーターを取らず

63
00:02:50,097 --> 00:02:51,875
戻り値の型もなし（void）です

64
00:02:51,875 --> 00:02:53,583
デリゲートと同じですね

65
00:02:54,292 --> 00:02:56,292
Teleport メソッドはオブジェクトの

66
00:02:56,292 --> 00:02:59,492
Y 軸の位置をランダムに変更するものです

67
00:03:00,284 --> 00:03:01,980
スクリプトの最上部近くには

68
00:03:01,980 --> 00:03:04,601
OnEnable というメソッドがあります

69
00:03:04,601 --> 00:03:06,601
これはビルトインメソッドで スクリプトがアタッチされた

70
00:03:06,601 --> 00:03:08,601
オブジェクトが作成されるかシーンで

71
00:03:08,601 --> 00:03:12,296
有効になると呼び出されます

72
00:03:13,185 --> 00:03:15,352
このメソッドは Teleport メソッドを

73
00:03:15,352 --> 00:03:18,429
EventScript の OnClicked イベントに

74
00:03:18,429 --> 00:03:20,624
購読させるのに使用します

75
00:03:20,624 --> 00:03:22,624
ご覧のとおり メソッドをイベントに

76
00:03:22,624 --> 00:03:25,467
購読させるのには += 演算子を使います

77
00:03:26,425 --> 00:03:28,704
メソッドをイベントに購読させると

78
00:03:28,704 --> 00:03:30,997
以後はイベントが発生するたびに

79
00:03:30,997 --> 00:03:32,997
メソッドが呼び出されるようになります

80
00:03:33,900 --> 00:03:37,622
続いては OnDisable メソッドです

81
00:03:37,622 --> 00:03:39,622
OnEnable メソッドとは反対に

82
00:03:39,622 --> 00:03:41,622
OnDisable メソッドはオブジェクトがシーン内で

83
00:03:41,622 --> 00:03:45,006
無効化されるか破壊されると呼び出されます

84
00:03:45,775 --> 00:03:47,955
OnDisabled メソッドの内側では

85
00:03:47,955 --> 00:03:50,749
メソッドをイベントから購読解除しています

86
00:03:51,330 --> 00:03:53,219
メソッドをイベントから購読解除するには

87
00:03:53,219 --> 00:03:55,689
-= 演算子を使用します

88
00:03:56,511 --> 00:03:58,511
これでイベントが発生してもメソッドが

89
00:03:58,511 --> 00:04:01,037
呼び出されなくなります

90
00:04:02,233 --> 00:04:04,233
この手順は非常に重要なものです

91
00:04:04,233 --> 00:04:06,233
行わない場合メモリリークやエラーといった

92
00:04:06,233 --> 00:04:08,233
結果につながる可能性があります

93
00:04:08,844 --> 00:04:10,844
メソッドをイベントに購読するときは

94
00:04:10,844 --> 00:04:12,844
必ずそれに対応する購読解除プロセスを

95
00:04:12,844 --> 00:04:15,531
用意すると覚えておくとよいでしょう

96
00:04:17,017 --> 00:04:19,017
さて TurnColorScript のほうも

97
00:04:19,017 --> 00:04:22,219
TeleportScript とかなり似た構造をしています

98
00:04:22,816 --> 00:04:26,081
こちらにある TurnColor というメソッドも

99
00:04:26,081 --> 00:04:28,081
パラメーターも取らず  戻り値の型は

100
00:04:28,081 --> 00:04:29,619
ありません（void）

101
00:04:30,414 --> 00:04:32,069
この TurnColor メソッドは

102
00:04:32,069 --> 00:04:34,959
オブジェクトのマテリアルをランダムな色に変更します

103
00:04:35,515 --> 00:04:38,182
そして先程と同様に OnEnable と

104
00:04:38,182 --> 00:04:40,182
OnDisable メソッドがあります

105
00:04:40,793 --> 00:04:42,793
こちらの場合にはイベントの登録と

106
00:04:42,793 --> 00:04:45,334
登録解除に TurnColor メソッドが

107
00:04:45,334 --> 00:04:46,862
使われています

108
00:04:47,584 --> 00:04:49,584
大事なことなので 2 回言いますが

109
00:04:49,584 --> 00:04:51,584
イベントを正しくエラーなく使う上で

110
00:04:51,584 --> 00:04:54,232
メソッドをイベントから購読解除するのは

111
00:04:54,232 --> 00:04:56,232
非常に重要です

112
00:04:57,454 --> 00:05:00,092
さて Unity に戻ってシーンを実行してみましょう

113
00:05:00,092 --> 00:05:02,092
画面上部にボタンが表示される

114
00:05:02,092 --> 00:05:03,799
ようになりましたね

115
00:05:03,799 --> 00:05:05,799
このボタンをクリックするとイベントが発行されて

116
00:05:05,799 --> 00:05:09,120
Teleport と TurnColor メソッドが呼び出されます

117
00:05:09,120 --> 00:05:11,120
ボタンは複数回押してもかまいません

118
00:05:11,120 --> 00:05:14,600
押されるたびにメソッドの購読が呼び出されます

119
00:05:15,836 --> 00:05:17,836
こうして見てきたとおり EventManager は

120
00:05:17,836 --> 00:05:20,338
自身とイベントのトリガーだけを

121
00:05:20,338 --> 00:05:22,577
気にかけておけばよくなっています

122
00:05:22,577 --> 00:05:24,926
EventManager 側では TeleportScript のことも

123
00:05:24,926 --> 00:05:26,636
TurnColorScript のことも知らなくて OK です

124
00:05:27,259 --> 00:05:31,055
同様に TeleportScript と TurnColorScript も

125
00:05:31,055 --> 00:05:33,055
互いの存在を感知する必要がありません

126
00:05:33,916 --> 00:05:35,916
こうしておくことで実に堅牢で柔軟な

127
00:05:35,916 --> 00:05:38,909
ブロードキャストシステムを構築できるのです

128
00:05:40,346 --> 00:05:42,346
しかし EventManager ではどうして static な

129
00:05:42,346 --> 00:05:45,089
イベント変数を使うのでしょう? public なデリゲート変数では

130
00:05:45,089 --> 00:05:46,669
いけないのでしょうか?

131
00:05:47,353 --> 00:05:50,205
実のことを言うと たとえ public なデリゲート変数を使っても

132
00:05:50,205 --> 00:05:53,297
まったく同じ機能が実現可能です

133
00:05:53,797 --> 00:05:56,894
じっさいこのレッスンの最初でも

134
00:05:56,894 --> 00:05:59,879
イベントは特別な用途向けのデリゲートであると言いました

135
00:05:59,879 --> 00:06:01,879
ここで public なデリゲート変数を使わず

136
00:06:01,879 --> 00:06:04,849
イベントを使っているのは イベントには

137
00:06:04,849 --> 00:06:06,849
デリゲートにはない継承されたセキュリティが

138
00:06:06,849 --> 00:06:08,849
備わっているからです

139
00:06:09,433 --> 00:06:11,433
イベントの場合 他のクラスは

140
00:06:11,433 --> 00:06:13,698
購読と購読解除のみしか行えません

141
00:06:14,350 --> 00:06:17,584
しかし public なデリゲート関数を使っていたら

142
00:06:17,584 --> 00:06:19,584
他のクラスはデリゲート変数を呼び出したり

143
00:06:19,584 --> 00:06:21,584
オーバーライドしたりして

144
00:06:21,584 --> 00:06:23,584
色々邪悪なことができてしまいます

145
00:06:24,431 --> 00:06:27,348
一般的に 複数のクラスを含む動的な

146
00:06:27,348 --> 00:06:30,579
メソッドシステムを作るのであれば デリゲート変数ではなく

147
00:06:30,579 --> 00:06:33,632
イベントを使ったほうが良いのです

1
00:00:00,345 --> 00:00:02,268
Generics とはクラスやメソッドなどが

2
00:00:02,268 --> 00:00:04,268
型をパラメーターとして扱える

3
00:00:04,268 --> 00:00:06,046
ようにする機能です

4
00:00:06,046 --> 00:00:08,409
これを使うと 扱っているデータの型が

5
00:00:08,409 --> 00:00:09,910
具体的に何かは分からなくても

6
00:00:09,910 --> 00:00:11,645
プログラミングを進められるわけです

7
00:00:11,645 --> 00:00:13,645
以前にも GetComponment メソッドで

8
00:00:13,645 --> 00:00:15,645
generic パラメーターを使って目当ての

9
00:00:15,645 --> 00:00:17,867
コンポーネントの型を取得しましたね

10
00:00:17,867 --> 00:00:20,624
GetComponent は generic メソッドとして知られています

11
00:00:20,986 --> 00:00:22,986
今回は ひとつ作ってみましょう

12
00:00:22,986 --> 00:00:25,329
ここにひとつシンプルな generic メソッドがあります

13
00:00:25,329 --> 00:00:27,980
最初に目を引くのが generic パラメーターでしょう

14
00:00:27,980 --> 00:00:31,050
T と名付けられたこれは山カッコで閉じられて

15
00:00:33,447 --> 00:00:35,212
メソッド名と通常の、正式なパラメーター名の間に

16
00:00:31,060 --> 00:00:33,447
置かれています

17
00:00:35,212 --> 00:00:37,448
この T はあらゆる型を表せ

18
00:00:37,448 --> 00:00:40,328
名前も任意指定できますが

19
00:00:40,328 --> 00:00:42,328
T を使うのが通則となっています

20
00:00:42,328 --> 00:00:44,328
また複数の generic パラメーターを作りたい場合は

21
00:00:44,328 --> 00:00:47,550
カンマで区切って追加できます

22
00:00:47,550 --> 00:00:49,550
この際の命名規則は通常 T に始まり

23
00:00:49,550 --> 00:00:52,974
続けて U そして V と続きます

24
00:00:53,308 --> 00:00:55,308
generic 関数のパラメーター数は 3 個までに

25
00:00:55,308 --> 00:00:57,308
制限されているわけではありませんが それ以上が必要になるケースは

26
00:00:57,308 --> 00:00:58,563
まれといえるでしょう

27
00:00:58,563 --> 00:01:00,563
さて これでこのメソッドに関連付けられた generic 型は

28
00:01:00,563 --> 00:01:02,160
T だとわかりましたが

29
00:01:02,160 --> 00:01:04,160
T は単なるプレースホルダーに過ぎません

30
00:01:04,160 --> 00:01:06,976
実際の型はメソッドが呼び出された時に確定します

31
00:01:06,976 --> 00:01:08,976
T の型が何になっても

32
00:01:08,976 --> 00:01:10,976
メソッドは T を型として使っているので

33
00:01:10,976 --> 00:01:12,976
その戻り値の型と引数の型は

34
00:01:12,976 --> 00:01:14,726
T と同じになります

35
00:01:15,226 --> 00:01:16,648
さて今見ているのは generic 型を使うメソッドなわけですが

36
00:01:16,648 --> 00:01:19,680
このままではあまり役に立ちません

37
00:01:19,680 --> 00:01:21,946
generic 型はどのように活用すればいいのでしょう?

38
00:01:21,946 --> 00:01:23,946
現在私達はこの generic 型がどう作用するのか知らないので

39
00:01:23,946 --> 00:01:25,946
それを活用することもできません

40
00:01:26,446 --> 00:01:28,446
generic パラメーターは何にでも たとえば

41
00:01:28,446 --> 00:01:31,105
float 型でも monobehaviour 型でも何にでもなれます

42
00:01:31,105 --> 00:01:33,105
しかし中身が何か分からないままでは

43
00:01:33,105 --> 00:01:35,105
それに対して何が行なえるかも分かりません

44
00:01:35,105 --> 00:01:37,105
たとえば monobehaviour に 2 を掛けるとか

45
00:01:37,105 --> 00:01:39,451
float のゲームオブジェクトフィールドに

46
00:01:39,451 --> 00:01:41,785
アクセスするとかいったことはできないわけです

47
00:01:41,785 --> 00:01:43,785
現時点ではクラスオブジェクトであるかのように 

48
00:01:43,785 --> 00:01:45,785
扱われています これはすべての C# クラスが

49
00:01:45,785 --> 00:01:48,475
黙示的に継承している基本クラスです

50
00:01:48,975 --> 00:01:51,448
より多くのことをするには ここからどうしたらよいでしょう?

51
00:01:51,448 --> 00:01:53,629
型を使って何ができるのかを把握するには

52
00:01:53,629 --> 00:01:55,629
まず使われる型に制約を適用する必要があります

53
00:01:55,629 --> 00:01:58,085
これは generic パラメーターに制約を加える事で行います

54
00:01:58,585 --> 00:02:01,249
関数に制約を追加するにはまず

55
00:02:01,249 --> 00:02:03,249
パラメーターの後ろに where と入力します

56
00:02:03,249 --> 00:02:04,902
関数本文よりも前である点に注意してください

57
00:02:04,902 --> 00:02:06,902
そして where の後ろに制約する generic 型を入力します

58
00:02:06,902 --> 00:02:10,326
この場合だと T ですね  続けてコロンを入力し

59
00:02:10,825 --> 00:02:12,825
コロンの後に制約をカンマで

60
00:02:12,825 --> 00:02:15,005
区切って入力します

61
00:02:15,005 --> 00:02:18,113
制約は通常 4 つのカテゴリーに分類されます

62
00:02:18,113 --> 00:02:20,113
まずキーワード class を使うと

63
00:02:20,113 --> 00:02:22,280
T が確実に参照型になります

64
00:02:22,280 --> 00:02:25,240
次にキーワード struct を使うと T は値型に

65
00:02:25,240 --> 00:02:27,106
キーワード new とそれに続けて

66
00:02:27,106 --> 00:02:29,106
対カッコを入力した場合には T が

67
00:02:29,106 --> 00:02:31,106
パラメーターなしの public なコンストラクターになります

68
00:02:31,647 --> 00:02:33,647
この他 クラス名を入力して T がそのクラスであると

69
00:02:33,647 --> 00:02:36,696
指定することもできますし または polymorphism を使い

70
00:02:36,696 --> 00:02:38,904
派生クラスのいずれかにすることも可能です

71
00:02:38,904 --> 00:02:41,139
制約の最後のカテゴリーは インターフェースです

72
00:02:41,139 --> 00:02:43,139
インターフェース名を指定することで T が

73
00:02:43,139 --> 00:02:45,360
そのインターフェースを実装します

74
00:02:45,360 --> 00:02:47,360
generic メソッドを使うにはまず

75
00:02:47,360 --> 00:02:50,209
使用する型を指定する必要があります

76
00:02:50,209 --> 00:02:52,209
たとえば今作った generic メソッドを

77
00:02:52,209 --> 00:02:53,545
使うとしましょう

78
00:02:53,545 --> 00:02:55,545
別のクラスでこのメソッド名を書いて

79
00:02:55,545 --> 00:02:58,199
続けて山カッコと使いたい型の名前を記入したとします

80
00:02:58,199 --> 00:02:59,895
そして続けてカッコを入力し

81
00:02:59,895 --> 00:03:01,447
引数を入力したとしましょう

82
00:03:01,447 --> 00:03:03,447
これまでにお話してきた機能のすべては

83
00:03:03,447 --> 00:03:06,650
generic クラスとインターフェース そしてメソッドに適用されます

84
00:03:06,650 --> 00:03:08,650
クラスに generic 型を与えたことで

85
00:03:08,650 --> 00:03:10,650
そこに含まれるフィールド・プロパティ・メソッドの型が

86
00:03:10,650 --> 00:03:12,539
影響を受けることになります

87
00:03:12,539 --> 00:03:14,539
generic クラスを作成するのは generic の使い方として

88
00:03:14,539 --> 00:03:16,539
非常に一般的なものです これはデータ構造を

89
00:03:16,539 --> 00:03:18,358
実装する上で非常に役に立ちます

90
00:03:18,358 --> 00:03:20,722
では generic クラスを見てみましょう

91
00:03:21,636 --> 00:03:23,636
このクラスは generic 型 T を用います

92
00:03:24,012 --> 00:03:26,012
つまりクラス内で型 T が型として使われる

93
00:03:26,012 --> 00:03:28,012
すべてのインスタンスは使用されるときに

94
00:03:28,012 --> 00:03:30,583
実際の型で置き換えられます

95
00:03:30,973 --> 00:03:32,973
このクラスには item という名の型 T の

96
00:03:32,973 --> 00:03:35,609
メンバー変数がひとつあります

97
00:03:36,081 --> 00:03:38,568
またクラスには UpdateItem という名のメソッドもあり

98
00:03:38,568 --> 00:03:40,485
このメソッドは型 T の引数を 1 つ取り

99
00:03:40,485 --> 00:03:42,485
それをメンバーアイテムに割り当てます

100
00:03:43,040 --> 00:03:45,040
このクラスのオブジェクトをインスタンス化するには

101
00:03:45,040 --> 00:03:47,744
T に型を指定する必要があります

102
00:03:47,744 --> 00:03:49,744
これはクラス名を入力し 続けて

103
00:03:49,744 --> 00:03:52,477
続けて山カッコと使いたい型の名前を記入すれば OK です

104
00:03:52,904 --> 00:03:54,904
なおこれはコンストラクターの名前と

105
00:03:54,904 --> 00:03:57,888
コンストラクターのパラメーターリストの間にも入力する必要があります

106
00:03:58,388 --> 00:04:00,388
generic の一般的な用途のひとつは

107
00:04:00,388 --> 00:04:02,877
辞書やリストのようなコレクションです

108
00:04:02,877 --> 00:04:04,877
辞書やリストの詳細については

109
00:04:04,877 --> 00:04:06,877
下記リンク先にあるレッスンをご覧ください

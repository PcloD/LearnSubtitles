1
00:00:00,815 --> 00:00:03,446
名前空間とはクラスの容器のような存在です

2
00:00:03,446 --> 00:00:05,446
これはスクリプトの競合防止など

3
00:00:05,446 --> 00:00:07,974
構造的な整理のために使われます

4
00:00:08,347 --> 00:00:10,347
たとえば Unity 上でアプリケーション開発に

5
00:00:10,347 --> 00:00:12,347
役立つツールを作成しているとします

6
00:00:12,847 --> 00:00:14,847
その際ツールとアプリケーション自体を

7
00:00:14,847 --> 00:00:16,847
別々の名前空間に分けておけば クラス名の

8
00:00:16,847 --> 00:00:20,178
自動補完機能に不要なクラス名が表示されないようにできるわけです

9
00:00:20,809 --> 00:00:22,809
おそらくこれまでに書いたスクリプトはすべて

10
00:00:22,809 --> 00:00:25,140
名前空間を使用していることでしょう

11
00:00:25,140 --> 00:00:27,140
Unity で C# スクリプトを書くとき

12
00:00:27,140 --> 00:00:29,140
デフォルトでは最初に 2 行記述があるはずです

13
00:00:29,140 --> 00:00:31,140
using UnityEngine  

14
00:00:31,140 --> 00:00:33,140
using System.Collections の 2 つですね

15
00:00:33,820 --> 00:00:37,673
UnityEngine と System.Collections はどちらも名前空間です

16
00:00:37,673 --> 00:00:39,673
using キーワードは指定した名前空間内のすべてを

17
00:00:39,673 --> 00:00:42,939
スクリプト内で使用できるという意味を持ちます

18
00:00:42,939 --> 00:00:44,939
試しにスクリプトからこの 2 つのディレクティブをコメントアウトしてみるとます

19
00:00:44,939 --> 00:00:46,939
自動補完機能で提示される（つまり使える）クラス名が

20
00:00:46,939 --> 00:00:49,574
大幅に減るのが分かると思います

21
00:00:49,991 --> 00:00:51,991
これはたとえば GameObject や Transform

22
00:00:51,991 --> 00:00:54,517
Rigid Body などの多くのクラスが UnityEngine の

23
00:00:54,517 --> 00:00:56,945
名前空間に含まれるためです

24
00:00:57,818 --> 00:00:59,818
自分のクラスを名前空間に含めるには

25
00:00:59,818 --> 00:01:02,963
そのクラス名を名前空間の構文で記す必要があります

26
00:01:02,963 --> 00:01:05,339
まずはキーワード namespace

27
00:01:05,339 --> 00:01:07,339
そして指定する名前空間の名前

28
00:01:07,339 --> 00:01:10,067
これは既存のものでも新規のものでも構いません

29
00:01:10,067 --> 00:01:12,067
今回は新規で名前をつけるとして

30
00:01:12,067 --> 00:01:13,861
SampleNamespace としましょう

31
00:01:14,498 --> 00:01:16,498
そしてクラスの前に開き中カッコと

32
00:01:16,498 --> 00:01:18,847
クラスの後ろに閉じ中カッコを記します

33
00:01:18,847 --> 00:01:21,331
これでクラスが SampleNamespace に属したので

34
00:01:21,331 --> 00:01:23,331
インデントを入れてそう示しましょう

35
00:01:24,218 --> 00:01:26,218
さて特定の名前空間からクラスを使う方法は

36
00:01:26,218 --> 00:01:28,094
3 つあります

37
00:01:28,094 --> 00:01:30,094
最初の方法は先ほど見た

38
00:01:30,094 --> 00:01:32,382
スクリプトの最初でディレクティブを使う方法です

39
00:01:33,022 --> 00:01:34,410
2 つ目のやり方は

40
00:01:34,410 --> 00:01:35,963
.（ドット）演算子を使う方法です

41
00:01:35,963 --> 00:01:37,963
たとえばスクリプトの最初に

42
00:01:37,963 --> 00:01:40,464
using SampleNamespace を記さず

43
00:01:40,464 --> 00:01:42,464
SampleNamespace 名前空間のクラスを

44
00:01:42,464 --> 00:01:44,464
参照するたびに次のように入力するわけです

45
00:01:44,464 --> 00:01:47,761
SampleNamespace  ドット  クラス名

46
00:01:47,761 --> 00:01:50,674
この方法を使うと あいまいさ回避にはなりますが 扱いにくくもあります

47
00:01:50,674 --> 00:01:52,674
今回のように名前空間の名前が

48
00:01:52,674 --> 00:01:54,674
長ければなおさらです

49
00:01:54,674 --> 00:01:56,674
最後の方法は書いているクラスを  アクセスが必要な

50
00:01:56,674 --> 00:01:59,145
名前空間の中に書いてしまう方法です

51
00:01:59,645 --> 00:02:02,197
通常この方法はお勧めしません  明示的にどうしても

52
00:02:02,197 --> 00:02:04,638
同一名前空間内に置いておく必要がある場合を除けば ですが

53
00:02:05,207 --> 00:02:07,207
なお名前空間が異なりさえすれば

54
00:02:07,207 --> 00:02:08,973
同一クラス名を使うことも可能です

55
00:02:08,973 --> 00:02:10,973
しかしスクリプト名は内包するクラス名と同一になるため

56
00:02:10,973 --> 00:02:12,973
同名スクリプトは別のフォルダに分けて置かなければ

57
00:02:12,973 --> 00:02:15,491
同一クラス名を持たせることはできません

58
00:02:15,860 --> 00:02:17,860
なお名前空間を使うときには定義があいまいにならないよう

59
00:02:17,860 --> 00:02:19,429
注意するようにしましょう 

60
00:02:19,429 --> 00:02:21,429
たとえば非常に頻繁に使われる名前空間には

61
00:02:21,429 --> 00:02:24,043
System と UnityEngine がありますが

62
00:02:24,043 --> 00:02:26,043
その両方に Random という名前のクラスが

63
00:02:26,043 --> 00:02:28,043
存在していますなので両方を使用している場合には

64
00:02:28,043 --> 00:02:30,043
クラスのあいまいさを回避するため

65
00:02:30,043 --> 00:02:32,043
.（ドット）演算子を使う必要があります

66
00:02:32,043 --> 00:02:35,567
System.Random または UnityEngine.Random といった感じですね

67
00:02:36,067 --> 00:02:38,067
さて デフォルトの名前空間の 2 番目ですが

68
00:02:38,067 --> 00:02:40,974
using ディレクティブが system.collections 名前空間になっています

69
00:02:41,489 --> 00:02:44,080
これは名前空間がネスト化可能であることを意味します

70
00:02:44,080 --> 00:02:46,552
名前空間をネスト化したい場合には

71
00:02:46,552 --> 00:02:49,200
ネスト化する名前空間の宣言を内包するよう記述してください

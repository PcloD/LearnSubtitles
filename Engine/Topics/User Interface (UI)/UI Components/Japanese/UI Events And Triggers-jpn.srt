1
00:00:01,395 --> 00:00:04,309
シーンで使う UI 要素は多くの場合

2
00:00:04,309 --> 00:00:06,309
インタラクティブ（入力に対してアクションを返すよう）にします

3
00:00:06,809 --> 00:00:10,380
ユーザーからの入力と UI 要素はイベントによって制御されます

4
00:00:11,323 --> 00:00:15,302
このレッスンでは イベントの生成および制御方法を紹介します

5
00:00:16,285 --> 00:00:18,927
シーンに Canvas が作成されると自動的に

6
00:00:18,927 --> 00:00:22,326
event system ゲームオブジェクトも合わせて追加されます

7
00:00:22,826 --> 00:00:25,792
このゲームオブジェクトには複数のコンポーネントが含まれます  たとえば

8
00:00:25,792 --> 00:00:30,951
event system コンポーネントや各種入力モジュールコンポーネントなどです

9
00:00:31,893 --> 00:00:35,594
シーンが開始されると イベントシステムはまず

10
00:00:35,594 --> 00:00:38,507
同ゲームオブジェクト内にある入力モジュールを検出し

11
00:00:38,507 --> 00:00:42,291
検出されたモジュールに応じて各 UI 要素と入力の関係を決定します

12
00:00:43,288 --> 00:00:45,960
event system 自身のプロパティは

13
00:00:45,960 --> 00:00:47,794
First Selected（最初の選択対象）のみです

14
00:00:47,794 --> 00:00:51,494
このプロパティにはすべてのインタラクティブな UI 要素を指定でき

15
00:00:51,494 --> 00:00:54,075
指定された UI 要素はシーン開始時に

16
00:00:54,075 --> 00:00:56,955
デフォルトで選択されるようになります

17
00:00:57,731 --> 00:01:01,858
ここでは このプロパティにボタンを指定してみましょう

18
00:01:02,483 --> 00:01:04,607
続いて シーンを開始すると

19
00:01:04,607 --> 00:01:07,199
ボタンの色が若干変化するのが確認できます

20
00:01:07,199 --> 00:01:09,199
これはボタンが選択状態であることを示します

21
00:01:10,141 --> 00:01:12,211
ここでスペースキーを押してみると 画面上のボタンが

22
00:01:12,211 --> 00:01:15,693
マウスでクリックしなくとも 押された状態になります

23
00:01:15,693 --> 00:01:18,892
これはコントローラー操作など マウスカーソルを用いない

24
00:01:18,892 --> 00:01:21,731
メニューシステムを作る際に便利です

25
00:01:22,977 --> 00:01:24,977
さて event system コンポーネントの下には

26
00:01:24,977 --> 00:01:28,548
デフォルトで 2 個の入力モジュールが追加されます

27
00:01:28,548 --> 00:01:31,171
ひとつはスタンドアロンビルド向けのもので 入力にマウスと

28
00:01:31,171 --> 00:01:32,979
キーボード / ゲームコントローラーを使えます

29
00:01:32,979 --> 00:01:34,979
もうひとつはタッチ入力用のものです

30
00:01:35,589 --> 00:01:38,588
スタンドアロン用の入力モジュールには複数のプロパティがあり

31
00:01:38,588 --> 00:01:40,781
それぞれがインタラクティブな UI 要素各種の

32
00:01:40,781 --> 00:01:43,920
選択時に使われる操作上の移動軸を参照しています

33
00:01:44,869 --> 00:01:49,142
この「入力軸」には Submit（送信）と Cancel（キャンセル）ボタンも含まれます

34
00:01:49,654 --> 00:01:53,079
これらはすべて入力マネージャーがデフォルトで追加します

35
00:01:53,579 --> 00:01:57,437
インタラクティブな UI 要素間を移動する方法の詳細については

36
00:01:57,437 --> 00:01:59,437
下記リンク先の情報を参照してください

37
00:02:01,318 --> 00:02:04,092
入力の受け付け頻度を調節したい場合は

38
00:02:04,092 --> 00:02:07,031
Input Actions Per Second（1 秒あたりの入力アクション）プロパティを使います

39
00:02:07,933 --> 00:02:12,058
デフォルト設定では 1 秒あたり 10 回の入力アクションを受け付けます

40
00:02:12,058 --> 00:02:14,757
これは入力アクションが受け取られてから次のアクションが

41
00:02:14,757 --> 00:02:18,487
受け取られるまでの間に 1/10 秒の遅延が生じることを意味します

42
00:02:19,415 --> 00:02:21,415
最後のプロパティはモバイルデバイス上でスタンドアロンの

43
00:02:21,415 --> 00:02:24,133
入力系を使えるようにするものです

44
00:02:24,133 --> 00:02:26,480
デフォルトではスタンドアロンの入力モジュールは

45
00:02:26,480 --> 00:02:28,480
モバイルデバイスでは機能しないよう設定されています

46
00:02:29,726 --> 00:02:32,183
タッチ入力ではマウスと同様に

47
00:02:32,183 --> 00:02:34,499
操作上の移動軸が不要ですが

48
00:02:34,499 --> 00:02:37,300
スタンドアロン入力モジュールの時と同様に

49
00:02:37,300 --> 00:02:39,634
スタンドアロン用のデバイス上でタッチ入力モジュールを

50
00:02:39,634 --> 00:02:41,634
有効化することも可能です

51
00:02:43,059 --> 00:02:45,059
イベントシステムと入力モジュールの仕事は

52
00:02:45,059 --> 00:02:47,366
イベントがいつ 別のゲームオブジェクトに対して

53
00:02:47,366 --> 00:02:49,076
送信 / 起動されるか定義することです

54
00:02:49,728 --> 00:02:52,395
たとえば OnClick イベントは

55
00:02:52,395 --> 00:02:54,395
ボタンが押された時に呼び出されます

56
00:02:54,895 --> 00:02:58,249
より厳密に言えば OnClick が発生するのはマウスカーソルがボタン矩形状にあり

57
00:02:58,249 --> 00:03:00,525
対象のボタン上でポインターが押下状態イベントが生じ

58
00:03:00,525 --> 00:03:02,441
続いてポインターが放されたことを示す

59
00:03:02,441 --> 00:03:04,441
イベントが生じた時ということになります

60
00:03:05,659 --> 00:03:08,072
各種入力イベントの詳細については

61
00:03:08,072 --> 00:03:10,072
下記リンク先の情報を参照してください

62
00:03:11,304 --> 00:03:14,101
これらイベントにはさまざまな使い道があります

63
00:03:14,101 --> 00:03:16,957
一部インタラクティブ UI 要素のコンポーネントに含まれる

64
00:03:16,957 --> 00:03:18,957
関数リストは対象 UI 要素に関連付けられた

65
00:03:18,957 --> 00:03:21,952
イベントが発行されたときに呼び出されます

66
00:03:22,825 --> 00:03:26,052
たとえば button コンポーネントには OnClick イベントが

67
00:03:26,052 --> 00:03:28,857
発行された時に呼び出される関数のリストがあります

68
00:03:29,785 --> 00:03:31,923
コンポーネントにデフォルトで登録されていないイベントを

69
00:03:31,923 --> 00:03:33,923
キャッチする必要がある場合は

70
00:03:33,923 --> 00:03:35,923
event trigger コンポーネントを使用します

71
00:03:36,603 --> 00:03:38,603
このコンポーネントの関数リストは他のコンポーネントと

72
00:03:38,603 --> 00:03:42,207
同様の使い方ができますが 必要なイベントごとに

73
00:03:42,207 --> 00:03:45,465
複数のリストを持たせることができる点が異なります

74
00:03:46,545 --> 00:03:48,629
たとえば image のコントロールでは

75
00:03:48,629 --> 00:03:51,412
特定のイベントに対してアクションを起こせませんが

76
00:03:52,520 --> 00:03:55,907
event trigger コンポーネントを使えばそれが可能になります

77
00:03:55,907 --> 00:03:58,060
その場合は次の順にメニューを選択してコンポーネントを追加します

78
00:03:58,060 --> 00:04:01,941
Add Component > Event > Event Trigger

79
00:04:02,966 --> 00:04:05,880
新たにイベントを追加するには Add New ボタンをクリックします

80
00:04:06,380 --> 00:04:08,380
これでキャッチ可能な各種イベントが

81
00:04:08,380 --> 00:04:10,119
リスト表示されます

82
00:04:10,687 --> 00:04:13,337
ここでイベントを選択するとリストが

83
00:04:13,337 --> 00:04:15,337
コンポーネントに追加されます

84
00:04:16,541 --> 00:04:19,773
作成したリストに関数を追加するには + アイコンをクリックします

85
00:04:20,273 --> 00:04:23,576
すると空の関数が呼び出し可能になります

86
00:04:24,546 --> 00:04:27,830
続いて目的のイベントで操作したいオブジェクトをリストの

87
00:04:27,830 --> 00:04:30,493
オブジェクトプロパティにドラッグ & ドロップします

88
00:04:31,697 --> 00:04:34,460
オブジェクトの適用が完了するとドロップダウンリストが更新され

89
00:04:34,460 --> 00:04:37,556
呼び出し可能な関数が表示されるようになります

90
00:04:38,553 --> 00:04:40,830
ご覧のとおり これらイベントで呼び出せる関数は多く

91
00:04:40,830 --> 00:04:43,206
また多数のコンポーネントに存在します

92
00:04:43,206 --> 00:04:46,035
ここでは自分で書いたスクリプトの関数を呼び出すことも可能です

93
00:04:46,839 --> 00:04:49,032
イベントに関数を呼ばせるには

94
00:04:49,032 --> 00:04:52,280
関数が public かつ戻り値の型が void で

95
00:04:52,280 --> 00:04:54,798
引数が 0～1 個である必要があります

96
00:04:55,623 --> 00:04:57,512
また関数に引数がある場合は

97
00:04:57,512 --> 00:04:59,885
次の型である必要があります

98
00:04:59,885 --> 00:05:03,657
float / integer / string / オブジェクト参照

99
00:05:05,386 --> 00:05:08,992
以上! これで イベントは設定完了です

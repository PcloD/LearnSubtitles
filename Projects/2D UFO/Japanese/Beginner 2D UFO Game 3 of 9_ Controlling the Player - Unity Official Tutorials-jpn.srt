1
00:00:02,621 --> 00:00:06,774
これから Player ゲームオブジェクトを動かしてみます

2
00:00:06,774 --> 00:00:08,774
まず、Player ゲームオブジェクトに

3
00:00:08,774 --> 00:00:10,774
どんなふるまいが必要か考えてみましょう

4
00:00:11,689 --> 00:00:14,475
Player はゲームエリアを飛び回り

5
00:00:14,475 --> 00:00:16,475
プレイフィールド内にとどまり

6
00:00:16,475 --> 00:00:18,475
空間に飛び出すべきではありません。

7
00:00:18,849 --> 00:00:20,849
アイテムのゲームオブジェクトと接触して 

8
00:00:20,849 --> 00:00:23,995
それを取得することも必要です

9
00:00:23,995 --> 00:00:25,995
これには 物理演算が必要です

10
00:00:26,453 --> 00:00:28,453
Unity には 2 種類の物理演算があります

11
00:00:28,453 --> 00:00:30,453
2D と 3D 用です

12
00:00:31,507 --> 00:00:33,507
これらのシステムは互いに匹敵し

13
00:00:33,507 --> 00:00:35,507
互換性があります。 そのため

14
00:00:35,507 --> 00:00:37,507
両方を同じシーンに設定することができます

15
00:00:37,979 --> 00:00:39,979
ただし、重要なのは

16
00:00:39,979 --> 00:00:41,979
これらは相互に作用することはできません

17
00:00:42,922 --> 00:00:44,922
このプロジェクトには

18
00:00:44,922 --> 00:00:46,922
2D 物理演算を利用します

19
00:00:47,713 --> 00:00:50,275
2D 物理演算を使用するには、ゲームオブジェクトに

20
00:00:50,275 --> 00:00:53,926
Rigidbody2D コンポーネントをアタッチする必要があります

21
00:00:55,119 --> 00:00:57,119
新規のコンポーネントをアタッチするには

22
00:00:57,119 --> 00:00:59,119
最初に、そのコンポーネントをアタッチしたい

23
00:00:59,119 --> 00:01:01,119
ゲームオブジェクトを選びます

24
00:01:01,119 --> 00:01:04,413
この場合は Player ゲームオブジェクトを選択します

25
00:01:06,369 --> 00:01:08,369
それから Component メニューで

26
00:01:08,369 --> 00:01:10,369
Physics 2D > Rigidbody2d

27
00:01:10,369 --> 00:01:12,787
と選び

28
00:01:12,787 --> 00:01:14,203
このコンポーネントと選択したゲームオブジェクトを

29
00:01:14,203 --> 00:01:16,203
アタッチするか

30
00:01:16,203 --> 00:01:18,869
または、Inspector の Add Component ボタンを使い

31
00:01:18,869 --> 00:01:22,065
Rigidbody2D を選びます

32
00:01:23,494 --> 00:01:25,494
大切なのは、Physics や 3D でなく

33
00:01:25,494 --> 00:01:28,129
このコンポーネントの Physics 2D バージョンを

34
00:01:28,129 --> 00:01:31,123
選ぶことです

35
00:01:31,123 --> 00:01:33,498
なぜなら 3D Physics のRigidbody　も 

36
00:01:33,498 --> 00:01:35,498
Rigidbody2D　コンポーネントも

37
00:01:35,498 --> 00:01:38,181
どちらでも選べるからです

38
00:01:40,134 --> 00:01:42,134
これらのコンポーネントは一緒には使えません

39
00:01:42,134 --> 00:01:44,134
作成中のゲームのタイプに

40
00:01:44,134 --> 00:01:46,134
正しいコンポーネントを選ぶよう気を付けてください

41
00:01:47,535 --> 00:01:49,535
必要があれば

42
00:01:49,535 --> 00:01:51,535
コンポーネントの右上の歯車型メニューで

43
00:01:52,007 --> 00:01:54,284
ゲームオブジェクトのコンポーネントの順序を

44
00:01:54,284 --> 00:01:56,284
アレンジしなおすことができます

45
00:01:56,964 --> 00:01:59,796
これによって、ゲームのパフォーマンスに影響はありませんが

46
00:01:59,796 --> 00:02:01,796
ゲームオブジェクトのコンポーネントの順番に

47
00:02:01,796 --> 00:02:03,796
一貫性を持たせることは 

48
00:02:03,796 --> 00:02:05,796
Project や Hierarchy を整理整頓した状態に

49
00:02:05,796 --> 00:02:07,796
維持することにより 

50
00:02:07,796 --> 00:02:09,796
開発をスピードアップする助けになることもあります

51
00:02:10,892 --> 00:02:12,892
Component のタイトルバーをクリックして

52
00:02:12,892 --> 00:02:14,892
Component ビューを畳んだり広げたりできることを

53
00:02:14,892 --> 00:02:17,294
覚えておいてください

54
00:02:18,972 --> 00:02:20,972
それでは、Player オブジェクトを制御して

55
00:02:20,972 --> 00:02:22,972
動かしてみることにしましょう

56
00:02:23,721 --> 00:02:25,721
オブジェクトを動かすには キーボードを通して

57
00:02:25,721 --> 00:02:27,721
プレイヤーからの入力を取得し

58
00:02:27,721 --> 00:02:31,082
その入力を、シーン内で Player オブジェクトを動かす力として

59
00:02:31,082 --> 00:02:33,082
as forces to move 

60
00:02:33,082 --> 00:02:35,082
適用する必要があります

61
00:02:36,067 --> 00:02:38,657
これをPlayer ゲームオブジェクトに

62
00:02:38,982 --> 00:02:42,177
スクリプトをアタッチして行います

63
00:02:43,661 --> 00:02:46,229
まず 新しいC# スクリプトを作成しましょう

64
00:02:47,269 --> 00:02:48,794
新しいスクリプトを作るには

65
00:02:48,794 --> 00:02:50,386
いくつか方法があります

66
00:02:50,386 --> 00:02:52,750
Assets > Create > C# Script の順に選んで

67
00:02:52,750 --> 00:02:54,750
新しいC# スクリプトを作成するか

68
00:02:55,180 --> 00:02:57,864
または、Project ビューの Create メニューを

69
00:02:57,864 --> 00:02:59,864
使用する方法もあります

70
00:02:59,864 --> 00:03:01,864
しかし、この場合 もっと効果的な方法は

71
00:03:01,864 --> 00:03:04,496
Player ゲームオブジェクトを選び

72
00:03:04,496 --> 00:03:07,863
Inspector の Add Component ボタンを使用します

73
00:03:09,194 --> 00:03:11,194
Add Component メニューに

74
00:03:11,194 --> 00:03:13,584
New Script という選択肢があります

75
00:03:14,165 --> 00:03:16,165
これを選ぶと いっぺんに

76
00:03:16,165 --> 00:03:19,301
スクリプトの作成とアタッチができます

77
00:03:20,495 --> 00:03:23,055
まずこのスクリプトを 

78
00:03:23,055 --> 00:03:25,055
PlayerController と名付けます

79
00:03:25,887 --> 00:03:27,887
スクリプトの言語を選べます

80
00:03:27,887 --> 00:03:29,565
ここではC# を選び

81
00:03:29,565 --> 00:03:31,844
それから Create and Add をクリックします

82
00:03:32,369 --> 00:03:35,307
単に Return/Enter キーを押しても

83
00:03:35,307 --> 00:03:37,307
同様です

84
00:03:37,890 --> 00:03:40,732
Unity はこのスクリプトを作成、コンパイルし

85
00:03:40,732 --> 00:03:42,732
選択したゲームオブジェクトに

86
00:03:42,732 --> 00:03:44,732
アタッチします

87
00:03:45,564 --> 00:03:47,426
気を付けたいのは

88
00:03:47,426 --> 00:03:49,426
この方法でスクリプトを作成すると

89
00:03:49,426 --> 00:03:51,426
ルートか Project ビューの最上位に

90
00:03:51,426 --> 00:03:54,187
スクリプトアセットは作成されます

91
00:03:55,075 --> 00:03:57,075
Project ビューを効率的に保つために

92
00:03:57,075 --> 00:03:59,075
そのアセットを Scripts ディレクトリに

93
00:03:59,075 --> 00:04:01,865
移動します

94
00:04:02,780 --> 00:04:05,143
Project ビューでスクリプトを選ぶと

95
00:04:05,143 --> 00:04:07,143
Inspector 内でスクリプトアセットの

96
00:04:07,143 --> 00:04:09,143
プレビューが表示されます

97
00:04:09,143 --> 00:04:11,143
ただし、これは編集できません

98
00:04:11,573 --> 00:04:13,573
スクリプトを開いて編集してみましょう

99
00:04:14,031 --> 00:04:16,031
たくさんの方法があります

100
00:04:16,031 --> 00:04:18,031
スクリプトがアタッチしたゲームオブジェクトを

101
00:04:18,031 --> 00:04:20,031
検証しているときは

102
00:04:20,031 --> 00:04:22,368
歯車型メニューで Edit Script を選びます

103
00:04:25,457 --> 00:04:27,457
Project ビューでスクリプトアセットを

104
00:04:27,457 --> 00:04:30,321
ダブルクリックします

105
00:04:30,321 --> 00:04:32,321
または、Project ビューで

106
00:04:32,321 --> 00:04:34,321
スクリプトが選択されているときは

107
00:04:34,321 --> 00:04:36,321
Inspector の Open ボタンを使います

108
00:04:38,692 --> 00:04:40,692
こうして スクリプトを

109
00:04:40,692 --> 00:04:42,692
好みのスクリプトエディターで開きます

110
00:04:43,594 --> 00:04:45,594
最初に、基本スクリプトの

111
00:04:45,594 --> 00:04:48,395
サンプルコードを削除します

112
00:04:49,213 --> 00:04:51,213
次に、このスクリプトで何をしたいのかを

113
00:04:51,213 --> 00:04:53,074
考えてみましょう

114
00:04:53,074 --> 00:04:55,074
必用なのは、各フレームごとに 

115
00:04:55,074 --> 00:04:57,074
プレイヤーの入力をチェックして

116
00:04:57,074 --> 00:04:59,074
その入力を各フレームの動きとして

117
00:04:59,074 --> 00:05:02,001
Player ゲームオブジェクトに適用することです

118
00:05:02,808 --> 00:05:05,585
では、どうやってこの入力をチェックして適用しましょうか。

119
00:05:05,585 --> 00:05:07,305
2 つ方法があります

120
00:05:07,305 --> 00:05:09,305
Update() と FixedUpdate() です

121
00:05:10,276 --> 00:05:13,118
Update はフレームをレンダリングする前に呼び出されます

122
00:05:13,118 --> 00:05:15,118
たいてのゲームコードは

123
00:05:15,118 --> 00:05:16,880
これを使います

124
00:05:16,880 --> 00:05:18,880
一方、FixedUpdate は

125
00:05:18,880 --> 00:05:20,880
物理演算が行われる寸前に

126
00:05:20,880 --> 00:05:22,880
呼び出されます

127
00:05:22,880 --> 00:05:25,575
私たちは、こちらを物理演算コードに使います

128
00:05:26,047 --> 00:05:28,047
力を Rigidbody2D に適用して 

129
00:05:28,047 --> 00:05:30,047
UFO を動かします

130
00:05:30,047 --> 00:05:32,379
つまり、物理演算です

131
00:05:33,129 --> 00:05:35,129
2D 物理演算が 

132
00:05:35,129 --> 00:05:37,129
3D のそれと違うことは

133
00:05:37,725 --> 00:05:39,725
この場合は、あまり関係ありません

134
00:05:40,807 --> 00:05:43,658
FixedUpdate にコードを加えることにします

135
00:05:44,457 --> 00:05:46,457
次に、どのコードを 

136
00:05:46,457 --> 00:05:48,766
FixedUpdate に加えるかです

137
00:05:49,372 --> 00:05:51,077
Input (入力) が必要なことはわかっていますが

138
00:05:51,636 --> 00:05:53,636
それ以上どうやって調べたらよいでしょうか。

139
00:05:54,385 --> 00:05:56,385
MonoDevelop にはショートカットがあります

140
00:05:56,912 --> 00:05:58,912
それで Unity API を検索できます

141
00:05:59,495 --> 00:06:02,489
Mac では Command + '

142
00:06:03,016 --> 00:06:06,187
Windows では Control + ' です

143
00:06:07,116 --> 00:06:09,116
調べたいものを選びます

144
00:06:09,116 --> 00:06:10,660
この場合は Input です

145
00:06:10,660 --> 00:06:12,660
そして、Command か Control キーを押しながら

146
00:06:12,660 --> 00:06:14,660
 ' キーを押します

147
00:06:16,338 --> 00:06:18,338
この検索で、Unity のドキュメンテーションにある

148
00:06:18,338 --> 00:06:21,348
Input に関する参照すべてが表示されます

149
00:06:22,499 --> 00:06:25,847
一番上の Input を選んで

150
00:06:25,847 --> 00:06:27,847
Input システムを見てみましょう

151
00:06:28,582 --> 00:06:30,886
これで Input に関するページが表示されます

152
00:06:31,607 --> 00:06:34,721
これは Input クラスのページです

153
00:06:35,747 --> 00:06:38,232
このクラスは Input Manager で

154
00:06:38,232 --> 00:06:40,232
軸の設定を読み込み、

155
00:06:40,232 --> 00:06:43,253
モバイルデバイスのmultitouch と accelerometer のデータに

156
00:06:43,683 --> 00:06:45,172
アクセスするために使用されます

157
00:06:45,960 --> 00:06:47,960
ページの上の方にあるテキストを読んで

158
00:06:47,960 --> 00:06:49,960
クラスの使用法を理解します

159
00:06:49,960 --> 00:06:51,960
私たちの場合は、モバイルデバイスを含む

160
00:06:51,960 --> 00:06:55,160
すべてのプラットフォームの Player から Input を取得します

161
00:06:56,256 --> 00:06:58,256
説明の下には

162
00:06:58,256 --> 00:07:01,777
クラスの変数と関数のリストがあります

163
00:07:03,025 --> 00:07:05,025
クラス変数は touchCount のように接触数、または

164
00:07:05,025 --> 00:07:08,343
gyro のようにデフォルトのジャイロスコープの参照などを

165
00:07:08,343 --> 00:07:11,795
一時的に保持します

166
00:07:12,502 --> 00:07:15,688
クラス関数は何かと役に立ちます

167
00:07:17,491 --> 00:07:19,491
ここでは

168
00:07:19,491 --> 00:07:21,491
Input.GetAxis を使います

169
00:07:22,712 --> 00:07:24,712
興味があるものをみつけたときは

170
00:07:24,712 --> 00:07:26,712
リンクをクリックして、その関数や変数に関する

171
00:07:26,712 --> 00:07:28,712
ページを開きます

172
00:07:29,419 --> 00:07:31,945
input.GetAxis を見てみましょう

173
00:07:32,556 --> 00:07:35,496
このページには関数のシグネチャと

174
00:07:35,496 --> 00:07:37,496
関数の説明と

175
00:07:37,496 --> 00:07:39,496
Unity の Java Script と C# で

176
00:07:39,496 --> 00:07:41,496
どのように使うかを示す

177
00:07:41,496 --> 00:07:43,887
コードスニペッツが含まれています

178
00:07:44,633 --> 00:07:46,900
ここではC# を使います

179
00:07:46,900 --> 00:07:50,886
Input と Input Manager に関する情報は

180
00:07:50,886 --> 00:07:52,886
下のリンクのページを参照してください

181
00:07:54,065 --> 00:07:57,028
これから Input.GetAxis を

182
00:07:57,028 --> 00:07:59,028
表示されているコードスニペッツと

183
00:07:59,028 --> 00:08:01,028
とても似た用法で使います

184
00:08:01,028 --> 00:08:03,028
スクリプトに戻って

185
00:08:03,028 --> 00:08:05,028
コードを書いてみましょう

186
00:08:06,970 --> 00:08:15,539
以下を入力します 
float moveHorizontal = Input.GetAxis (*Horizontal*);

187
00:08:18,070 --> 00:08:24,314
float moveVertical = Input.GetAxis (*Vertical*); 

188
00:08:26,394 --> 00:08:30,059
そして Input の行を消します

189
00:08:31,682 --> 00:08:33,682
これで キーボードを通して 

190
00:08:33,682 --> 00:08:35,682
Player から入力を取得できます

191
00:08:36,500 --> 00:08:38,500
Float 変数の moveHorizontal と

192
00:08:38,500 --> 00:08:40,500
moveVertical は

193
00:08:40,500 --> 00:08:42,901
キーボードのキーによって制御される

194
00:08:42,901 --> 00:08:45,995
水平と垂直の軸からの

195
00:08:45,995 --> 00:08:47,995
入力を記録します

196
00:08:47,995 --> 00:08:49,995
InputManager では、これらのキーはデフォルトで

197
00:08:49,995 --> 00:08:51,995
設定されます

198
00:08:58,804 --> 00:09:00,804
Player ゲームオブジェクトは

199
00:09:00,804 --> 00:09:02,804
Rigidbody2D を利用して

200
00:09:02,804 --> 00:09:05,663
2D 物理演算エンジンと交信します

201
00:09:06,536 --> 00:09:08,826
入力することにより

202
00:09:08,826 --> 00:09:10,826
Rigidbody2D に力を加え

203
00:09:10,826 --> 00:09:13,579
シーンで Player ゲームオブジェクトを動かします

204
00:09:15,877 --> 00:09:17,877
どうやって Rigidbody2D に力を適用するかを

205
00:09:17,877 --> 00:09:19,877
もっと知るために

206
00:09:19,877 --> 00:09:21,877
ドキュメンテーションを見てみましょう

207
00:09:21,877 --> 00:09:25,401
最初に スクリプトに Rigidbody2D と入力します

208
00:09:25,997 --> 00:09:27,997
Rigidbody2D を選んで

209
00:09:27,997 --> 00:09:29,997
Mac なら Command キー

210
00:09:29,997 --> 00:09:31,997
Windows なら Control キー と

211
00:09:31,997 --> 00:09:33,997
‘ を入力します

212
00:09:34,649 --> 00:09:37,303
再び、検索用語 Rigidbody2D で検索される

213
00:09:37,303 --> 00:09:40,210
ページが表示されます

214
00:09:41,292 --> 00:09:42,692
それをクリックしてみましょう

215
00:09:43,639 --> 00:09:46,242
Rigidbody2D ページが表示されます

216
00:09:46,963 --> 00:09:49,829
Player ゲームオブジェクトに力を適用したければ

217
00:09:49,829 --> 00:09:51,829
何かをしなければなりません

218
00:09:51,829 --> 00:09:53,829
それで、Rigidbody2D クラスに使用可能な

219
00:09:53,829 --> 00:09:57,083
関数を見てみましょう

220
00:09:58,054 --> 00:10:00,054
使いたい関数が見つかるまで

221
00:10:00,054 --> 00:10:01,791
説明を読んで探します

222
00:10:01,791 --> 00:10:04,760
今回はAddForce を選びましょう

223
00:10:05,537 --> 00:10:07,716
これで Rigidbody2D に力を加えます

224
00:10:08,312 --> 00:10:10,312
結果として、動き始めます

225
00:10:11,158 --> 00:10:13,158
リンクをクリックして 

226
00:10:13,158 --> 00:10:14,751
AddForce のページを開いてください

227
00:10:15,435 --> 00:10:17,435
ページの一番上に

228
00:10:17,435 --> 00:10:19,142
関数のシグネチャがあります

229
00:10:19,643 --> 00:10:21,308
シグネチャによると、Rigidbody2D に力を加えるには

230
00:10:21,308 --> 00:10:23,308
vector2 と

231
00:10:23,308 --> 00:10:25,308
オプションで ForceMode　が

232
00:10:25,724 --> 00:10:28,183
必要です

233
00:10:28,932 --> 00:10:30,560
Vector2 とは何でしょうか

234
00:10:30,560 --> 00:10:33,070
Vector2 に関する詳しい情報は

235
00:10:33,070 --> 00:10:35,194
下のリンクのページを参照してください

236
00:10:35,194 --> 00:10:37,194
簡単に言うと Vector2 は 

237
00:10:37,194 --> 00:10:39,194
2 つの十進法の値を 

238
00:10:39,194 --> 00:10:41,194
1 つのコンテナーに保持します

239
00:10:41,194 --> 00:10:43,194
これによって

240
00:10:43,194 --> 00:10:45,194
2D スペースの力のような

241
00:10:45,194 --> 00:10:47,194
X と Y 両軸の力を必要とする値を

242
00:10:47,194 --> 00:10:49,194
自由に変えて使用することが

243
00:10:49,194 --> 00:10:52,436
容易になります

244
00:10:53,385 --> 00:10:56,292
すべてのドキュメンテーションページは関連付けられています

245
00:10:56,292 --> 00:10:58,292
Vector2 をクリックすると

246
00:10:58,292 --> 00:10:59,885
そのドキュメンテーションが

247
00:10:59,885 --> 00:11:01,885
開きます

248
00:11:09,542 --> 00:11:11,542
次に解決すべき問題は

249
00:11:11,542 --> 00:11:13,092
ゲームオブジェクトの異なるコンポーネントを

250
00:11:13,092 --> 00:11:15,092
どのように捕らえて

251
00:11:15,092 --> 00:11:17,092
参照するかということです

252
00:11:17,411 --> 00:11:19,411
私たちは現在、PlayerController という

253
00:11:19,411 --> 00:11:21,411
スクリプトを作成しています

254
00:11:21,411 --> 00:11:23,411
それはスクリプトコンポーネントとして

255
00:11:23,411 --> 00:11:24,867
Player ゲームオブジェクトにアタッチされています

256
00:11:25,564 --> 00:11:28,344
このスクリプトで Rigidbody2D コンポーネントを使って

257
00:11:28,344 --> 00:11:30,344
力を加えます

258
00:11:30,899 --> 00:11:32,899
スクリプトを通してそのコンポーネントに

259
00:11:32,899 --> 00:11:34,733
アクセスする必要があります

260
00:11:34,733 --> 00:11:36,733
何種類か方法がありますが

261
00:11:36,733 --> 00:11:38,733
同じゲーム上の他のコンポーネントに

262
00:11:38,733 --> 00:11:41,013
アクセスする主な方法のうち

263
00:11:41,013 --> 00:11:43,885
ここでは　1 つだけを取り上げます

264
00:11:44,703 --> 00:11:46,703
スクリプト内で

265
00:11:46,703 --> 00:11:48,703
この参照を記憶する変数を作り

266
00:11:48,703 --> 00:11:51,826
この参照を Start 関数に設定します

267
00:11:52,672 --> 00:11:54,672
スクリプトに戻りましょう

268
00:11:55,768 --> 00:11:57,768
スクリプトに以下を入力します

269
00:11:57,768 --> 00:12:02,084
Private Rigidbody2D rb2d

270
00:12:02,084 --> 00:12:05,347
これは、参照を記憶する変数を作成します

271
00:12:06,346 --> 00:12:08,941
新しい Start 関数を宣言し

272
00:12:08,941 --> 00:12:10,646
そこに以下を入力します

273
00:12:10,646 --> 00:12:16,300
rb2d = GetComponent<Rigidbody2d> ();

274
00:12:17,562 --> 00:12:19,562
FixedUpdate 内で

275
00:12:19,562 --> 00:12:23,863
Vector2 の値を持つ Rigidbody2d.AddForce を

276
00:12:23,863 --> 00:12:25,863
ForceMode をデフォルト設定で

277
00:12:25,863 --> 00:12:28,363
使用します

278
00:12:28,904 --> 00:12:30,904
そして、スクリプトに 

279
00:12:30,904 --> 00:12:35,735
rb2d.AddForce といくつかの Vector2 の値が必要です

280
00:12:37,982 --> 00:12:41,651
さて、どうやって 2 つの float の値を

281
00:12:41,651 --> 00:12:43,651
Vector2 に入力したらよいでしょうか。

282
00:12:43,984 --> 00:12:45,984
まず、新しいVector2 変数を作り

283
00:12:45,984 --> 00:12:47,846
Movement と呼ぶことにします

284
00:12:48,248 --> 00:12:51,339
これは X と Y の値で構成される

285
00:12:51,339 --> 00:12:54,388
新しい Vector2 とイコールで結ばれています

286
00:12:55,109 --> 00:12:57,109
X と Y の値によって 

287
00:12:57,109 --> 00:12:59,109
UFO に加える

288
00:12:59,109 --> 00:13:01,643
力の方向が決まります

289
00:13:02,551 --> 00:13:04,162
ここで X 値は何を指すでしょうか

290
00:13:04,162 --> 00:13:06,162
moveHorizontal です

291
00:13:06,509 --> 00:13:08,509
これを使って、左と右のキーは 

292
00:13:08,509 --> 00:13:11,847
UFO を左か右に動かす力を加えます

293
00:13:12,859 --> 00:13:14,349
ここで Y 値は何を指すでしょうか

294
00:13:14,349 --> 00:13:16,349
moveVertical　です

295
00:13:16,890 --> 00:13:19,318
rb2d.AddForce の

296
00:13:19,318 --> 00:13:24,064
新しい Vector2 の値 movement を使って

297
00:13:24,064 --> 00:13:27,628
rb2d.AddForce(movement)　とします

298
00:13:28,446 --> 00:13:31,181
スクリプトを保存して Unity に戻ります

299
00:13:35,134 --> 00:13:37,134
フッターかコンソールでエラーを確認できます

300
00:13:37,134 --> 00:13:38,869
エラーはありません

301
00:13:39,411 --> 00:13:40,681
OK です

302
00:13:41,619 --> 00:13:43,619
さて、スクリプトをテストしてみましょう

303
00:13:44,229 --> 00:13:45,461
再生ボタンを押してください

304
00:13:45,461 --> 00:13:47,461
初めに気づくのはPlayer がすぐに

305
00:13:47,461 --> 00:13:50,398
プレイフィールドを外れて、下まで飛んでいってしまうことです

306
00:13:50,994 --> 00:13:54,196
これは、Rigidbody2D のデフォルトで 

307
00:13:54,196 --> 00:13:56,196
Y 軸にそって下向きに重力が

308
00:13:56,196 --> 00:13:58,196
適用されるためです

309
00:13:58,196 --> 00:13:59,945
このゲームはトップダウンビューで

310
00:13:59,945 --> 00:14:02,773
デザインされているので適切でありません

311
00:14:04,077 --> 00:14:05,773
Play モードを閉めます

312
00:14:05,773 --> 00:14:07,773
このビヘイビアを取り除くために

313
00:14:07,773 --> 00:14:10,216
Player にアタッチしている Rigidbody2D の 

314
00:14:10,216 --> 00:14:13,200
Gravity Scale プロパティーを

315
00:14:13,200 --> 00:14:14,418
0 に設定します

316
00:14:14,418 --> 00:14:16,418
つまり、重力の影響をを

317
00:14:16,418 --> 00:14:17,733
無しにします

318
00:14:17,733 --> 00:14:19,733
これが、トップダウン 2D ゲームを作るのが

319
00:14:19,733 --> 00:14:21,733
少し簡単である理由の 1 つです

320
00:14:21,733 --> 00:14:24,970
物理演算で重力を考えなくてよいからです

321
00:14:26,385 --> 00:14:28,385
では、もう 1 度プレイしてテストしましょう

322
00:14:28,995 --> 00:14:30,995
InputManager で設定したキーを使って

323
00:14:30,995 --> 00:14:32,995
UFO はシーン内で動きます

324
00:14:33,578 --> 00:14:35,578
重力はオフですが、プレイヤーの動きは

325
00:14:35,578 --> 00:14:37,326
まだ、かなり遅いです

326
00:14:37,326 --> 00:14:39,618
プレイするには多分遅すぎます

327
00:14:39,618 --> 00:14:42,756
ただし、基本コンセプトは完璧です

328
00:14:42,756 --> 00:14:44,756
テストを終わらせるには Play モードを終了します

329
00:14:46,171 --> 00:14:48,171
コードに戻り、

330
00:14:48,171 --> 00:14:50,171
UFO のスピードを制御する

331
00:14:50,171 --> 00:14:52,171
ツールを作りましょう

332
00:14:55,292 --> 00:14:57,292
ある値で movement を乗ずる

333
00:14:57,292 --> 00:14:59,292
必要があります

334
00:14:59,999 --> 00:15:01,999
その値は、単純にスクリプトに加えることもできますが

335
00:15:01,999 --> 00:15:04,952
ただし、調整や変更が

336
00:15:04,952 --> 00:15:06,952
必要になった場合は

337
00:15:06,952 --> 00:15:08,952
スクリプトエディターに戻り

338
00:15:08,952 --> 00:15:10,952
スクリプトの値を変更し

339
00:15:10,952 --> 00:15:12,370
リコンパイルしなくてはなりません

340
00:15:12,370 --> 00:15:14,020
これでは時間がかかります

341
00:15:14,020 --> 00:15:16,020
解決策として、スクリプトに

342
00:15:16,020 --> 00:15:18,020
パブリックの変数を作成します

343
00:15:18,533 --> 00:15:21,855
では、パブリックの float 型の Speed を作りましょう

344
00:15:23,505 --> 00:15:26,289
スクリプトにパブリックの変数を作ることで

345
00:15:26,289 --> 00:15:28,959
この変数は編集可能なプロパティーとして

346
00:15:28,959 --> 00:15:30,959
Inspector に表示されます

347
00:15:31,528 --> 00:15:33,528
パブリック変数を使うと 

348
00:15:33,528 --> 00:15:36,234
すべての変更をエディターで行えます

349
00:15:37,650 --> 00:15:41,219
それでは、movement を　speed で乗じてみましょう

350
00:15:41,926 --> 00:15:43,926
この方法を使うと

351
00:15:43,926 --> 00:15:45,926
エディターで

352
00:15:45,926 --> 00:15:47,926
movement の値を制御できます

353
00:15:47,926 --> 00:15:50,930
この変更を保存して Unity に戻ります

354
00:15:53,712 --> 00:15:55,712
エディターにもどると

355
00:15:55,712 --> 00:15:57,712
PlayerController Script　に

356
00:15:57,712 --> 00:15:59,712
Speed プロパティーがあることに気づきます

357
00:16:00,211 --> 00:16:02,211
このプロパティーを 1000 に設定しましょう

358
00:16:04,083 --> 00:16:06,083
シーンを再生しテストします

359
00:16:10,133 --> 00:16:12,133
動きますが、プレイヤーの動きが

360
00:16:12,133 --> 00:16:14,133
速すぎますね。

361
00:16:14,133 --> 00:16:16,133
でも、変更も素早くできますよ

362
00:16:16,133 --> 00:16:18,133
プレイモードを終了して

363
00:16:18,133 --> 00:16:20,133
値を 10 に変えましょう

364
00:16:32,422 --> 00:16:34,185
良くなりました

365
00:16:34,185 --> 00:16:36,185
よくできました。プレイヤーを

366
00:16:36,185 --> 00:16:37,550
動かせるようになりました

367
00:16:37,550 --> 00:16:39,550
ただし、壁を通り抜けて飛ぶだけです

368
00:16:39,550 --> 00:16:42,165
これは、私たちの望んでいるものとは違います

369
00:16:42,872 --> 00:16:46,431
次のレッスンでは、衝突の検出を加えます

1
00:00:03,426 --> 00:00:05,919
Player ゲームオブジェクトがアイテムと衝突するときに

2
00:00:05,919 --> 00:00:07,919
それらが取得できるように

3
00:00:07,919 --> 00:00:09,919
したいと思います

4
00:00:10,391 --> 00:00:12,391
そのためにはPlayer ゲームオブジェクトと

5
00:00:12,391 --> 00:00:14,391
Pickup ゲームオブジェクト間の

6
00:00:14,391 --> 00:00:18,108
衝突を検出する必要があります

7
00:00:19,498 --> 00:00:21,498
これらの衝突に

8
00:00:21,498 --> 00:00:23,498
新しいビヘイビアをトリガーさせ

9
00:00:23,498 --> 00:00:25,498
正しいオブジェクトを取得していることを

10
00:00:25,498 --> 00:00:27,498
確認するために

11
00:00:27,498 --> 00:00:29,498
衝突をテストする必要があります

12
00:00:31,065 --> 00:00:34,135
アイテム、プレイヤーである UFO

13
00:00:34,135 --> 00:00:36,859
壁、すべてがコライダーを持っており

14
00:00:36,859 --> 00:00:38,859
それによって衝突が報告されます

15
00:00:39,636 --> 00:00:41,636
どのオブジェクト同士が衝突しているのか

16
00:00:41,636 --> 00:00:44,637
見極めるテストをしないと

17
00:00:45,206 --> 00:00:48,415
うっかり、壁などの誤ったオブジェクトを

18
00:00:48,415 --> 00:00:50,415
集めてしまうでしょう

19
00:00:52,232 --> 00:00:55,493
まず、プレイヤーを再アクティベートする必要があります

20
00:00:55,493 --> 00:00:57,493
Player ゲームオブジェクトをハイライトし

21
00:00:57,493 --> 00:01:00,366
アクティブにするチェックボックスをクリックし

22
00:01:00,366 --> 00:01:03,176
シーンで再び見えるようにします

23
00:01:04,355 --> 00:01:07,555
PlayerController コンポーネントで

24
00:01:08,151 --> 00:01:10,151
PlayerController スクリプトを選び

25
00:01:10,151 --> 00:01:12,151
その名前をダブルクリックして

26
00:01:12,151 --> 00:01:14,151
開きます

27
00:01:15,580 --> 00:01:17,580
スクリプトは、そのオブジェクトが

28
00:01:17,580 --> 00:01:19,580
アクティブでもそうでなくても

29
00:01:19,580 --> 00:01:21,580
編集可能です

30
00:01:24,132 --> 00:01:26,132
スクリプトを開きました

31
00:01:26,132 --> 00:01:27,550
どんなコードを書くべきでしょうか

32
00:01:28,326 --> 00:01:30,326
コライダーを書き、それからホットキーを使って

33
00:01:30,326 --> 00:01:32,968
ドキュメンテーションを検索することもできます

34
00:01:33,713 --> 00:01:35,713
しかし、

35
00:01:35,713 --> 00:01:37,173
違うやり方でもあります

36
00:01:37,173 --> 00:01:39,173
Unity にもどって 

37
00:01:39,173 --> 00:01:41,996
Player ゲームオブジェクトの詳細を見てみましょう

38
00:01:44,293 --> 00:01:46,293
ここで、使えそうなのが

39
00:01:46,293 --> 00:01:48,293
Circle Collider 2D コンポーネントです

40
00:01:48,806 --> 00:01:50,806
各コンポーネントのヘッダーの左側にあるのは

41
00:01:50,806 --> 00:01:53,876
コンポーネントの折り畳み用の矢印

42
00:01:53,876 --> 00:01:55,415
アイコン、使用可能な場合は

43
00:01:55,415 --> 00:01:58,322
アクティブ化のためのチェックボックス

44
00:01:58,322 --> 00:02:00,322
そして、コンポーネントのタイプです

45
00:02:01,626 --> 00:02:05,297
右側はコンテキストによって変わる歯車型メニューと

46
00:02:05,297 --> 00:02:07,297
クエスチョンマークがついた

47
00:02:07,297 --> 00:02:09,297
小さな本のアイコンです

48
00:02:09,297 --> 00:02:11,297
この小さな本を使用します

49
00:02:11,297 --> 00:02:13,297
これは Unity マニュアルの

50
00:02:13,297 --> 00:02:15,648
コンポーネントレファレンスへのクイックリンクです

51
00:02:16,157 --> 00:02:18,157
このアイコンを選択すると

52
00:02:18,157 --> 00:02:20,157
スクリプトリファレンスでなく

53
00:02:20,157 --> 00:02:22,157
マニュアルのコンポーネントリファレンスに

54
00:02:22,157 --> 00:02:23,739
移動します

55
00:02:24,545 --> 00:02:26,545
このコンポーネントの使い方を

56
00:02:26,545 --> 00:02:28,545
エディターとの関連でもっと知るために

57
00:02:28,545 --> 00:02:31,117
このドキュメンテーションを読むこともできます

58
00:02:32,029 --> 00:02:34,029
しかし、知りたいのはこのコンポーネントクラスへの

59
00:02:34,029 --> 00:02:36,265
スクリプトの方法です

60
00:02:36,944 --> 00:02:39,526
そのために、スクリプティングへ切り替えて

61
00:02:39,526 --> 00:02:41,526
circle collider 2D の

62
00:02:41,526 --> 00:02:43,805
スクリプトリファレンスへ移動します

63
00:02:44,760 --> 00:02:46,760
私たちに必要なのは

64
00:02:46,760 --> 00:02:48,760
衝突の検出とテストです

65
00:02:48,760 --> 00:02:50,760
このプロジェクトには

66
00:02:50,760 --> 00:02:53,328
OnTriggerEnter2D を使用します

67
00:02:55,007 --> 00:02:57,007
この項目は、ドキュメンテーションの

68
00:02:57,007 --> 00:02:59,007
最後の方で

69
00:02:59,007 --> 00:03:01,007
Messages の下にあります

70
00:03:01,007 --> 00:03:03,007
例えば、自分が配管工で

71
00:03:03,007 --> 00:03:05,007
素晴らしいお宝のコインを

72
00:03:05,007 --> 00:03:07,007
集めるために飛びあがり

73
00:03:07,007 --> 00:03:09,007
最初のコインを収集したと思ったら

74
00:03:09,007 --> 00:03:11,007
跳ね返り地面に落ちるところを

75
00:03:11,007 --> 00:03:13,326
ちょっと想像してみてください

76
00:03:14,075 --> 00:03:16,075
あまり素敵ではないですね

77
00:03:16,075 --> 00:03:18,075
このコードを使うと

78
00:03:18,075 --> 00:03:20,075
実際の物理的な衝突なしに 

79
00:03:20,075 --> 00:03:23,006
Player ゲームオブジェクトと 

80
00:03:23,006 --> 00:03:25,006
Pickup ゲームオブジェクトの接触を

81
00:03:25,006 --> 00:03:26,641
検出することができます

82
00:03:27,394 --> 00:03:29,394
さらに情報を得るには

83
00:03:29,394 --> 00:03:31,394
OnTriggerEnter2D をクリックしてください

84
00:03:32,379 --> 00:03:34,379
このページのコード例は

85
00:03:34,379 --> 00:03:36,379
私たちが求めているものにピッタリではありません

86
00:03:36,379 --> 00:03:38,379
しかし、手を加えるので大丈夫です。

87
00:03:39,059 --> 00:03:41,059
まず、このコードの一部を

88
00:03:41,059 --> 00:03:42,644
コピーしましょう

89
00:03:43,323 --> 00:03:45,419
OnTriggerEnter2D 関数の

90
00:03:45,419 --> 00:03:47,866
public bool charcterInQuicksand から

91
00:03:48,781 --> 00:03:50,781
それを閉じる括弧まで

92
00:03:50,781 --> 00:03:52,781
コピーします

93
00:03:59,466 --> 00:04:01,466
これを FixedUpdate 関数の下に

94
00:04:01,466 --> 00:04:03,466
貼り付けます

95
00:04:06,379 --> 00:04:08,379
次に、コードを見てみましょう

96
00:04:08,781 --> 00:04:11,407
私たちは OnTriggerEnter2D 関数を使います

97
00:04:12,114 --> 00:04:15,193
Player ゲームオブジェクトが最初に 2D のトリガーコライダーに接触するとき

98
00:04:15,193 --> 00:04:17,193
OnTriggerEnter2D は 

99
00:04:17,193 --> 00:04:19,193
Unity　によって呼び出されます

100
00:04:20,455 --> 00:04:22,455
接触した

101
00:04:22,455 --> 00:04:24,455
2D トリガーコライダーへの参照を

102
00:04:24,455 --> 00:04:26,455
引数として渡します

103
00:04:26,455 --> 00:04:29,576
これがOther という 2D コライダーです

104
00:04:29,576 --> 00:04:31,576
この参照によって

105
00:04:31,576 --> 00:04:34,587
接触する2D コライダーを捕えることができます

106
00:04:35,629 --> 00:04:37,629
このコードで

107
00:04:37,629 --> 00:04:39,629
他の 2D トリガーコライダーに接触するとき

108
00:04:39,629 --> 00:04:41,629
ブーリアン変数 CharacterInQuicksand を

109
00:04:41,629 --> 00:04:44,317
True に設定します

110
00:04:45,224 --> 00:04:47,224
これによってこのゲームに変化はありませんが

111
00:04:47,224 --> 00:04:49,224
他のスクリプトで

112
00:04:49,224 --> 00:04:51,768
プレイヤーをゆっくり動かすためなどに使用できます

113
00:04:52,874 --> 00:04:54,874
このレッスンでは

114
00:04:54,874 --> 00:04:56,874
もっと違う用途で使います

115
00:04:57,165 --> 00:04:59,165
以前 Pickup オブジェクトを作成したときに

116
00:04:59,165 --> 00:05:01,165
エディターによって手動で 

117
00:05:01,165 --> 00:05:03,165
Player オブジェクトを

118
00:05:03,165 --> 00:05:04,789
ディアクティベートしました

119
00:05:04,789 --> 00:05:06,789
今度はPickup オブジェクトを

120
00:05:06,789 --> 00:05:09,551
スクリプトでディアクティベートします

121
00:05:10,412 --> 00:05:12,412
まず characterInQuicksand 変数を含む

122
00:05:12,412 --> 00:05:15,887
2 行を削除します

123
00:05:19,336 --> 00:05:21,336
次に、どうやって Pickup オブジェクトを

124
00:05:21,336 --> 00:05:23,336
ディアクティベートできるでしょうか

125
00:05:23,336 --> 00:05:25,336
さて、どんな手がかりがあるでしょう

126
00:05:25,738 --> 00:05:27,626
other コライダーのゲームオブジェクトは

127
00:05:27,626 --> 00:05:31,411
other.gameObject として表すことができます

128
00:05:32,636 --> 00:05:35,351
other ゲームオブジェクトをテストして

129
00:05:35,351 --> 00:05:37,351
それが Pickup オブジェクトならば

130
00:05:37,351 --> 00:05:40,205
そのゲームオブジェクトをディアクティベートすればいいのです

131
00:05:41,093 --> 00:05:43,287
それでは、何が見つかるか

132
00:05:43,287 --> 00:05:45,287
ホットキーを使って

133
00:05:45,287 --> 00:05:47,287
GameObjectを見てみましょう

134
00:05:50,213 --> 00:05:52,656
GameObject のドキュメンテーションのページで

135
00:05:52,656 --> 00:05:54,656
役立ちそうなアイテムが

136
00:05:54,656 --> 00:05:56,178
いくつかあります

137
00:05:56,178 --> 00:05:58,178
1 つめは Tag です

138
00:05:58,178 --> 00:06:00,178
Tag を使うと

139
00:06:00,178 --> 00:06:02,178
Tag の値と文字列を比較して

140
00:06:02,178 --> 00:06:04,178
ゲームオブジェクトを識別できます

141
00:06:04,178 --> 00:06:06,178
2 つめは Set Active です

142
00:06:06,719 --> 00:06:08,719
これは、コードを通じてゲームオブジェクトを

143
00:06:08,719 --> 00:06:11,773
アクティベート/ディアクティベートする方法です

144
00:06:12,633 --> 00:06:14,633
最後は

145
00:06:14,633 --> 00:06:16,218
CompareTag です

146
00:06:16,218 --> 00:06:18,218
CompareTag で効率よく

147
00:06:18,218 --> 00:06:21,267
ゲームオブジェクトの Tag を文字列の値と

148
00:06:21,267 --> 00:06:23,267
比較できます

149
00:06:23,572 --> 00:06:25,572
この 3 つをそれぞれ別のタブで

150
00:06:25,572 --> 00:06:27,572
開いてみましょう

151
00:06:33,799 --> 00:06:35,799
Tag を使うと、Tag の値で

152
00:06:35,799 --> 00:06:37,799
ゲームオブジェクトを認識できます

153
00:06:38,257 --> 00:06:40,257
使用する前にTags And Layers パネルで

154
00:06:40,257 --> 00:06:43,422
tag を宣言する必要があります

155
00:06:44,426 --> 00:06:46,094
tag を宣言したら

156
00:06:46,094 --> 00:06:49,325
コードに使用できます

157
00:06:49,325 --> 00:06:51,325
この例では、ゲームオブジェクトのtag　は

158
00:06:51,325 --> 00:06:54,994
Player に設定されます

159
00:06:58,600 --> 00:07:01,539
 Tag をテスト、検証、比較するには

160
00:07:01,539 --> 00:07:04,854
効果的なビルトインの方法があります　

161
00:07:04,854 --> 00:07:06,854
それはCompareTag です

162
00:07:06,854 --> 00:07:08,854
CompareTag で、効率よく

163
00:07:08,854 --> 00:07:10,854
ゲームオブジェクトの Tag を文字列の値と

164
00:07:10,854 --> 00:07:12,854
比較できます

165
00:07:13,409 --> 00:07:15,409
サンプルコードをコピーして

166
00:07:15,409 --> 00:07:17,409
スクリプトに貼り付けましょう

167
00:07:27,561 --> 00:07:30,295
今度はGameObject.SetActive です

168
00:07:31,669 --> 00:07:34,304
これは、ゲームオブジェクトを

169
00:07:34,304 --> 00:07:36,304
アクティベート/ディアクティベートする方法です

170
00:07:36,304 --> 00:07:38,304
このコードはInspector の Name フィールドの前にある

171
00:07:38,304 --> 00:07:40,304
アクティベート用のチェックボックスを

172
00:07:40,304 --> 00:07:42,304
クリックするのと同様です

173
00:07:42,817 --> 00:07:44,817
ここでは、コードスニペッツと同様に

174
00:07:44,817 --> 00:07:48,064
Pickup ゲームオブジェクトをディアクティベートするために

175
00:07:48,064 --> 00:07:51,115
GameObject.SetActive を呼び出します

176
00:07:52,380 --> 00:07:54,380
このコードをコピーして

177
00:07:54,380 --> 00:07:56,380
スクリプトエディターに戻り

178
00:07:56,380 --> 00:07:58,380
同じように貼り付けます

179
00:08:03,692 --> 00:08:05,692
コードを書くのに十分な材料がそろったと思います

180
00:08:05,692 --> 00:08:08,093
では GameObject を

181
00:08:08,093 --> 00:08:10,093
削除して

182
00:08:10,093 --> 00:08:13,711
以下のように修正します

183
00:08:14,049 --> 00:08:18,352
if (other.gameObject.CompareTag("Pickup") 

184
00:08:19,475 --> 00:08:21,475
Pickup タグは

185
00:08:21,475 --> 00:08:23,475
ダウンロードしたプロジェクトですでに

186
00:08:23,475 --> 00:08:25,475
決められています

187
00:08:25,475 --> 00:08:27,475
しかし、ここでは Tags And Layers パネルに

188
00:08:27,475 --> 00:08:29,475
独自の Tag を加える方法を

189
00:08:29,475 --> 00:08:31,475
見てみましょう

190
00:08:32,904 --> 00:08:34,555
Destroy (other.gameObject) の行も

191
00:08:34,555 --> 00:08:37,280
削除できます

192
00:08:38,580 --> 00:08:40,580
If ステートメントに

193
00:08:40,580 --> 00:08:42,580
中括弧を加えます

194
00:08:42,580 --> 00:08:44,580
このコードは中括弧なしでも動きますが

195
00:08:44,580 --> 00:08:46,580
ただし、中括弧がない場合は

196
00:08:46,580 --> 00:08:48,580
If ステートメントの次の 1 行だけが

197
00:08:48,580 --> 00:08:50,580
If ステートメントと連動します

198
00:08:50,927 --> 00:08:52,927
その他の行は

199
00:08:52,927 --> 00:08:54,927
Ifの条件を満たすかどうかにかかわらず

200
00:08:54,927 --> 00:08:56,927
実行されます

201
00:08:57,537 --> 00:08:59,537
If ステートメントと複数行を

202
00:08:59,537 --> 00:09:01,537
関連付けたい場合は

203
00:09:01,537 --> 00:09:03,537
複数行を中括弧で囲みます

204
00:09:03,842 --> 00:09:05,842
ここでは、明確にするために

205
00:09:05,842 --> 00:09:09,748
gameObject.SetActive (false) の行を

206
00:09:10,109 --> 00:09:12,109
1 組の中括弧にいれます

207
00:09:12,109 --> 00:09:15,061
コードを適切にインデントしてください

208
00:09:15,061 --> 00:09:17,061
コードをインデントしても

209
00:09:17,061 --> 00:09:19,061
コンパイラーにはなんの意味もありません

210
00:09:20,157 --> 00:09:22,157
今、コードの周りに中括弧をつけるのは

211
00:09:22,157 --> 00:09:24,157
If ステートメントとの関係を明白にするだけでなく

212
00:09:24,157 --> 00:09:26,157
後のレッスンで

213
00:09:26,157 --> 00:09:28,157
中括弧で囲んだ部分のアップデートを

214
00:09:28,157 --> 00:09:30,841
簡単にするためです

215
00:09:31,613 --> 00:09:33,613
スクリプトは現状のままだと

216
00:09:33,613 --> 00:09:35,613
Player のゲームオブジェクトを

217
00:09:35,613 --> 00:09:37,473
非アクティブに設定します

218
00:09:37,473 --> 00:09:39,473
代わりに、other ゲームオブジェクトを 

219
00:09:39,473 --> 00:09:42,045
ディアクティベートする必要があります

220
00:09:42,680 --> 00:09:45,360
そのため、2 行目を

221
00:09:45,360 --> 00:09:49,625
other.gameObject.SetActive (false) に変えます

222
00:09:50,388 --> 00:09:52,388
これで、2D トリガーコライダーが

223
00:09:52,388 --> 00:09:54,388
接触されるたびに

224
00:09:54,388 --> 00:09:56,388
このコードが呼び出されます

225
00:09:57,234 --> 00:10:00,246
Other で、接触するコライダーへの参照を

226
00:10:00,246 --> 00:10:01,372
取得します

227
00:10:01,372 --> 00:10:03,372
その tag をテストし

228
00:10:03,372 --> 00:10:05,372
tag が

229
00:10:05,372 --> 00:10:07,372
文字列の値 PickUp と等しければ

230
00:10:07,372 --> 00:10:09,372
そのother ゲームオブジェクトを取得し

231
00:10:09,372 --> 00:10:12,534
ゲームオブジェクトをディアクティベートする

232
00:10:12,936 --> 00:10:15,820
SetActive (false) を呼び出します

233
00:10:16,624 --> 00:10:19,346
エラーをチェックするために

234
00:10:19,346 --> 00:10:21,346
スクリプトを保存してUnity に戻りましょう

235
00:10:23,607 --> 00:10:25,607
最初にやることは

236
00:10:25,607 --> 00:10:27,607
Pickup プレハブの

237
00:10:27,607 --> 00:10:30,025
Tag の値を設定することです

238
00:10:31,979 --> 00:10:34,118
Prefabs フォルダーに移動し

239
00:10:34,534 --> 00:10:37,094
Project ウィンドウの

240
00:10:37,094 --> 00:10:38,634
Pickup プレハブをハイライトします

241
00:10:39,455 --> 00:10:41,455
Pickup をハイライトしたままで

242
00:10:41,455 --> 00:10:43,968
Inspector の最上部の Tag リストをクリックします

243
00:10:45,383 --> 00:10:47,383
プロジェクトの一部として

244
00:10:47,383 --> 00:10:49,383
Pickup のタグはすでに準備されていることが

245
00:10:49,383 --> 00:10:51,383
分かります

246
00:10:52,645 --> 00:10:54,645
 Tag を

247
00:10:54,645 --> 00:10:56,645
追加する場合は

248
00:10:57,394 --> 00:10:59,043
Add Tag を選択します

249
00:11:00,185 --> 00:11:03,053
このようにして Tags & Layers パネルが開きます

250
00:11:03,636 --> 00:11:06,433
+ ボタンを押すと

251
00:11:06,433 --> 00:11:08,433
新しい Tag がリストに

252
00:11:08,433 --> 00:11:09,976
加えられます

253
00:11:11,113 --> 00:11:14,054
 Tag を削除するには、ハイライトして

254
00:11:14,054 --> 00:11:16,054
－ ボタンを押します

255
00:11:18,454 --> 00:11:21,261
次に Pickup プレハブをハイライトして

256
00:11:21,841 --> 00:11:23,841
Tag メニューを使って

257
00:11:23,841 --> 00:11:25,841
Pickup タグを

258
00:11:25,841 --> 00:11:27,841
割り当てましょう

259
00:11:29,256 --> 00:11:31,256
Pickup を選びます

260
00:11:35,777 --> 00:11:37,777
さて、プレハブの利便性を使って

261
00:11:37,777 --> 00:11:39,777
Hierarchy で 

262
00:11:39,777 --> 00:11:41,777
Pickup をハイライトすると

263
00:11:41,777 --> 00:11:43,777
それも Pickup と

264
00:11:43,777 --> 00:11:45,777
タグ付けされていることが分かります

265
00:11:47,233 --> 00:11:49,233
では、ゲームをテストしてみましょう

266
00:11:49,483 --> 00:11:52,326
シーンを保存してプレイモードにします

267
00:11:54,853 --> 00:11:56,853
タグは Pickup に設定されているのに

268
00:11:56,853 --> 00:11:58,853
まだ、Pickup オブジェクトと

269
00:11:58,853 --> 00:12:00,853
衝突しています

270
00:12:01,130 --> 00:12:03,130
まるで、壁のようです

271
00:12:03,130 --> 00:12:04,624
プレイモードを終了しましょう

272
00:12:05,352 --> 00:12:07,352
なぜPickup オブジェクトを取得せずにむしろ

273
00:12:07,352 --> 00:12:09,352
跳ね返ってしまうのかを考える前に 

274
00:12:09,352 --> 00:12:11,352
Unity の物理システムについて

275
00:12:11,352 --> 00:12:13,866
簡単に説明します

276
00:12:14,449 --> 00:12:16,449
Pickup と Player を

277
00:12:16,449 --> 00:12:18,449
見てみましょう

278
00:12:18,449 --> 00:12:20,449
余談ですが、複数のゲームオブジェクトを

279
00:12:20,449 --> 00:12:22,449
同時に選択し

280
00:12:22,449 --> 00:12:24,449
まとめて Inspector で見られます

281
00:12:24,449 --> 00:12:26,449
これを行うには Mac で Commandキーを　

282
00:12:26,449 --> 00:12:30,364
Windows ではCtrl キーを押しながら

283
00:12:30,364 --> 00:12:32,364
ゲームオブジェクトを選択します

284
00:12:33,543 --> 00:12:35,543
複数のオブジェクトを選ぶとき

285
00:12:35,543 --> 00:12:37,543
Inspector がどのように変化して

286
00:12:37,543 --> 00:12:39,543
選んだオブジェクトの共通コンポーネントと

287
00:12:39,543 --> 00:12:42,352
プロパティー値を表示するかに注目してください

288
00:12:43,138 --> 00:12:45,138
Inspector では

289
00:12:45,138 --> 00:12:47,138
複数オブジェクト編集もできます

290
00:12:47,471 --> 00:12:49,471
複数オブジェクト編集を利用して

291
00:12:49,471 --> 00:12:51,471
プレイヤーの UFO と

292
00:12:51,471 --> 00:12:53,471
選択した Pickup のスプライトレンダラーを

293
00:12:53,471 --> 00:12:56,010
1 クリックで両方とも無効にします

294
00:12:57,036 --> 00:12:59,036
これによって2 つのオブジェクトの 

295
00:12:59,036 --> 00:13:01,385
2D コライダーエリアの

296
00:13:01,385 --> 00:13:03,385
緑色の枠が残ります

297
00:13:03,815 --> 00:13:06,381
それでは、Unityの 2D 物理エンジンで

298
00:13:06,381 --> 00:13:08,200
どのように衝突は作用するのでしょうか

299
00:13:08,755 --> 00:13:10,755
2D 物理エンジンでは

300
00:13:10,755 --> 00:13:12,755
2D コライダーのエリアが

301
00:13:12,755 --> 00:13:14,364
互いに重なることはできません

302
00:13:15,032 --> 00:13:17,032
前回、どうやって

303
00:13:17,032 --> 00:13:19,032
Background スプライトの真ん中から Player を消したか

304
00:13:19,032 --> 00:13:21,032
思い出してください

305
00:13:21,032 --> 00:13:23,032
2D 物理エンジンが

306
00:13:23,032 --> 00:13:25,032
フレームに複数の2D コライダーが

307
00:13:25,032 --> 00:13:28,045
重なっているのを検知すると

308
00:13:28,045 --> 00:13:30,045
2D 物理エンジンはオブジェクトを見て

309
00:13:30,045 --> 00:13:32,045
そのスピード

310
00:13:32,045 --> 00:13:34,679
回転、形を分析し

311
00:13:34,679 --> 00:13:36,679
衝突を計算します

312
00:13:37,525 --> 00:13:40,180
この計算の主要な因子の 1 つは

313
00:13:40,180 --> 00:13:42,180
その 2D コライダーは静的か動的か

314
00:13:42,180 --> 00:13:44,180
ということです

315
00:13:45,401 --> 00:13:47,401
静的なコライダーは通常

316
00:13:47,401 --> 00:13:49,401
シーンの動かない部分にあります

317
00:13:49,401 --> 00:13:51,401
たとえば、壁、床

318
00:13:51,401 --> 00:13:53,401
その他の風景部分などです

319
00:13:54,677 --> 00:13:57,395
動的コライダーは動くものに使われます

320
00:13:57,395 --> 00:13:59,046
たとえばプレイヤーの UFO や

321
00:13:59,046 --> 00:14:01,046
車などのように

322
00:14:01,046 --> 00:14:03,046
衝突の計算において

323
00:14:03,046 --> 00:14:05,046
静的な形状は

324
00:14:05,046 --> 00:14:07,046
衝突の影響を受けません

325
00:14:07,310 --> 00:14:10,034
しかし、動的なオブジェクトは影響されます

326
00:14:11,282 --> 00:14:13,946
私たちのケースでは、Player の UFO は

327
00:14:13,946 --> 00:14:17,044
動的、つまり動く形状で　

328
00:14:17,044 --> 00:14:19,044
Pickup の静的形状から

329
00:14:19,044 --> 00:14:21,044
跳ね返ります

330
00:14:21,044 --> 00:14:23,044
ちょうど、壁の静的な形状から跳ね返るのと

331
00:14:23,044 --> 00:14:24,753
同じように

332
00:14:24,753 --> 00:14:27,480
ただし、2D 物理エンジンでは

333
00:14:27,480 --> 00:14:29,480
2D コライダーエリアの侵入や

334
00:14:29,480 --> 00:14:32,304
重複が可能です

335
00:14:32,748 --> 00:14:34,748
これらが起こっても 2D 物理エンジンは 

336
00:14:34,748 --> 00:14:36,748
2D コライダーエリアを計算し

337
00:14:36,748 --> 00:14:39,733
コライダーの重複を

338
00:14:39,733 --> 00:14:41,733
追跡しつづけます

339
00:14:41,733 --> 00:14:43,733
ただし、重複しているオブジェクト上では

340
00:14:43,733 --> 00:14:45,315
物理的に動作しません

341
00:14:46,024 --> 00:14:48,024
それは衝突を引き起こしません

342
00:14:48,704 --> 00:14:50,704
ここでは、2D コライダーを

343
00:14:50,704 --> 00:14:53,259
トリガーか2D Trigger コライダーに

344
00:14:53,717 --> 00:14:56,094
することで実現します

345
00:14:56,787 --> 00:14:59,545
コライダーをトリガーにすると

346
00:14:59,545 --> 00:15:01,545
その 2D トリガーとの接触は

347
00:15:01,545 --> 00:15:04,289
2DOnTriggerイベントメッセージによって

348
00:15:04,289 --> 00:15:07,312
検出されます

349
00:15:08,186 --> 00:15:10,186
2D コライダーをトリガーにすると

350
00:15:10,186 --> 00:15:12,186
気の利いた使い方ができます

351
00:15:12,186 --> 00:15:14,630
例えば、アドベンチャーゲームで

352
00:15:14,630 --> 00:15:16,785
トリガーを入口の真ん中に置き

353
00:15:17,365 --> 00:15:19,365
プレイヤーが入るとミニマップが更新し

354
00:15:19,365 --> 00:15:22,101
「あなたは、この部屋を発見しました」

355
00:15:22,101 --> 00:15:23,823
というメッセージが出たり

356
00:15:24,350 --> 00:15:26,350
または、プレイヤーがあるエリアに侵入するたびに

357
00:15:26,350 --> 00:15:28,350
プレイヤーがトリガーを通過して

358
00:15:28,350 --> 00:15:30,350
音が鳴ったりするなどです

359
00:15:30,891 --> 00:15:34,002
2DOnCollision と2DOnTrigger メッセージ

360
00:15:34,002 --> 00:15:36,927
に関する詳しい情報は

361
00:15:36,927 --> 00:15:38,927
下のリンクを参照してください

362
00:15:38,927 --> 00:15:42,940
ここでは OnCollisionEnter2D でなく

363
00:15:42,940 --> 00:15:46,773
OnTriggerEnter2D を使用します

364
00:15:46,773 --> 00:15:48,773
そのため、コライダー 2D エリアを

365
00:15:48,773 --> 00:15:51,955
トリガーエリアに変更することが必要です

366
00:15:52,538 --> 00:15:54,987
Prefab アセットを選択し

367
00:15:54,987 --> 00:15:57,990
Circle Collider 2D コンポーネントを表示します

368
00:15:57,990 --> 00:16:01,404
ここで、2 つのスプライトレンダラーを再アクティベートし

369
00:16:01,404 --> 00:16:03,404
Pickup プレハブをハイライトします

370
00:16:04,333 --> 00:16:06,333
Circle Collider 2D コンポーネントに

371
00:16:06,333 --> 00:16:09,053
Is Trigger というプロパティーがあります

372
00:16:09,594 --> 00:16:11,594
これを True に設定しましょう

373
00:16:12,967 --> 00:16:15,553
さて、プレイモードにしてテストしてみましょう

374
00:16:25,911 --> 00:16:27,911
良いですね、プレイモードを終了します

375
00:16:29,048 --> 00:16:31,048
ここまで、全部うまくいっていますが

376
00:16:31,048 --> 00:16:32,699
1 つ問題があります

377
00:16:33,381 --> 00:16:35,117
私たちは 1 つ小さなミスをしてしまいました

378
00:16:35,117 --> 00:16:37,117
それは、Unity の 2D 物理計算の

379
00:16:37,117 --> 00:16:40,042
最適化に関連しています

380
00:16:40,042 --> 00:16:42,042
2D 物理計算を使用する場合

381
00:16:42,042 --> 00:16:44,042
すべての静的、または動かないコライダーは

382
00:16:44,042 --> 00:16:46,042
単体として

383
00:16:46,042 --> 00:16:47,733
計算されます

384
00:16:48,208 --> 00:16:50,208
こうすると、パフォーマンスが向上します

385
00:16:50,846 --> 00:16:52,846
エンジンが動くことを予想していない

386
00:16:52,846 --> 00:16:54,846
コライダーを動かすと

387
00:16:55,165 --> 00:16:58,187
その静的コライダーや動かないオブジェクトを

388
00:16:58,187 --> 00:17:01,381
再度計算する必要がでてきます

389
00:17:02,061 --> 00:17:04,061
これをすべてのフレームで行うと

390
00:17:04,061 --> 00:17:06,061
ゲームのパフォーマンスが悪くなる恐れがあります

391
00:17:06,838 --> 00:17:08,838
アイテムを回転させることで

392
00:17:08,838 --> 00:17:10,838
間違いをしてしまったのです

393
00:17:11,989 --> 00:17:13,989
それらを動かす前に

394
00:17:13,989 --> 00:17:17,099
どの 2D コライダーが動的であるかを 

395
00:17:17,099 --> 00:17:18,748
Unity に示す必要があります

396
00:17:19,404 --> 00:17:21,404
私たちは、それを

397
00:17:21,404 --> 00:17:23,404
Rigidbody2D コンポーネントで行います

398
00:17:24,333 --> 00:17:26,333
2D コライダーと Rigidbody2D をもつ

399
00:17:26,333 --> 00:17:28,333
ゲームオブジェクトはすべて

400
00:17:28,666 --> 00:17:30,499
動的とみなされます

401
00:17:30,915 --> 00:17:33,275
2D コライダーを持ち 

402
00:17:33,275 --> 00:17:35,566
Rigidbody2D をもたないゲームオブジェクトは

403
00:17:35,566 --> 00:17:37,566
すべて静的とみなされます

404
00:17:37,982 --> 00:17:39,982
現在 Pickup ゲームオブジェクトには

405
00:17:39,982 --> 00:17:41,982
Circle Collider が設定されていますが 

406
00:17:41,982 --> 00:17:43,661
Rigidbody2D はありません

407
00:17:44,190 --> 00:17:46,190
そのため Unity は各フレームで

408
00:17:46,190 --> 00:17:48,773
アイテムと壁のコライダーを

409
00:17:48,773 --> 00:17:50,129
再作成します

410
00:17:50,129 --> 00:17:53,613
解決するには Rigidbody2D を

411
00:17:53,613 --> 00:17:55,613
Pickup オブジェクトに設定します

412
00:18:04,476 --> 00:18:06,476
プレイモードにしてテストしてみましょう

413
00:18:08,459 --> 00:18:11,468
ご覧のように Pickup　が画面から落ちてしまいます

414
00:18:12,231 --> 00:18:14,231
重力によって下に引っ張られるのです

415
00:18:14,231 --> 00:18:16,231
しかも、トリガーであるため

416
00:18:16,231 --> 00:18:17,908
壁と衝突しません

417
00:18:18,508 --> 00:18:21,624
Rigidbody2D コンポーネントを見ると

418
00:18:21,624 --> 00:18:23,624
Gravity Scale を 0 に

419
00:18:23,624 --> 00:18:26,533
簡単に設定できたことに気づきます

420
00:18:26,533 --> 00:18:28,533
それで Pickup が落ちることを

421
00:18:28,533 --> 00:18:30,533
防げたはずです

422
00:18:31,573 --> 00:18:33,868
ただし、これは部分的な解決策にすぎません

423
00:18:34,627 --> 00:18:36,627
もし、そうしたとして Pickup が

424
00:18:36,627 --> 00:18:38,627
重力に影響を受けなくなったとしても

425
00:18:38,627 --> 00:18:40,627
まだ、物理的な力に

426
00:18:40,627 --> 00:18:42,627
影響されていたでしょう

427
00:18:42,627 --> 00:18:44,085
もっと良い解決法があります

428
00:18:45,182 --> 00:18:48,052
それはIs Kinematic を有効にすることです

429
00:18:48,662 --> 00:18:50,662
これを行うと

430
00:18:50,662 --> 00:18:52,662
Rigidbody2D コンポーネントを

431
00:18:52,662 --> 00:18:55,961
キネマティックの 2D Rigidbody にすることができます

432
00:18:55,961 --> 00:18:57,961
キネマティック 2D Rigidbody は

433
00:18:57,961 --> 00:19:01,124
物理的な力に反応しませんが

434
00:19:01,124 --> 00:19:03,124
Transform によって

435
00:19:03,124 --> 00:19:05,124
アニメーションと移動を行えます

436
00:19:05,124 --> 00:19:07,124
これは、すべてのオブジェクトに有効です

437
00:19:07,124 --> 00:19:09,124
エレベーターや移動するプラットフォームなどのような

438
00:19:09,124 --> 00:19:11,124
コライダーを持つオブジェクトから

439
00:19:11,124 --> 00:19:13,124
作成中のアイテムのようにトリガーが設定され

440
00:19:13,124 --> 00:19:15,124
Transform によって、アニメーションや

441
00:19:15,124 --> 00:19:17,124
移動をするものまで OK です

442
00:19:17,942 --> 00:19:21,155
Rigidbody2D と Is Kinematicに関する情報は

443
00:19:21,155 --> 00:19:23,155
下のリンクのレッスンを

444
00:19:23,155 --> 00:19:25,155
ご覧ください

445
00:19:25,973 --> 00:19:29,298
シーンを保存し、プレイモードにしてテストしてみましょう

446
00:19:30,803 --> 00:19:32,803
今度は、ビヘイビアは

447
00:19:32,803 --> 00:19:34,244
思った通りになりました

448
00:19:34,244 --> 00:19:37,267
静的な 2D コライダーは

449
00:19:37,267 --> 00:19:38,989
壁や床のように不動で

450
00:19:38,989 --> 00:19:40,989
動的 2D コライダーは動きますが

451
00:19:40,989 --> 00:19:43,924
ただし Rigidbody2D がアタッチされるべきだったのです

452
00:19:45,325 --> 00:19:47,325
この Player のような標準の2D rigidbody は

453
00:19:47,325 --> 00:19:50,269
2D の物理的な力を使用して動きます

454
00:19:50,824 --> 00:19:52,824
キネマティック 2D rigidbody は

455
00:19:52,824 --> 00:19:55,768
transform によって動きます

456
00:19:55,768 --> 00:19:57,768
次回は

457
00:19:57,768 --> 00:19:59,768
アイテムを数え

458
00:19:59,768 --> 00:20:01,768
スコアとメッセージを表示する

459
00:20:01,768 --> 00:20:03,768
簡単な UI を作成します

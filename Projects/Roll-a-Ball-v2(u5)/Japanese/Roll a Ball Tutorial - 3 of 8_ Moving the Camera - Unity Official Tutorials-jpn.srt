1
00:00:02,142 --> 00:00:04,725
The camera doesn't move and from it's current position

2
00:00:04,725 --> 00:00:06,461
cannot see very much.

3
00:00:06,461 --> 00:00:09,299
We need to tie the camera to the player game object.

4
00:00:09,799 --> 00:00:12,486
First let's set the position of the camera.

5
00:00:12,486 --> 00:00:15,052
Let's lift it up by 10 units and tilt it

6
00:00:15,052 --> 00:00:17,052
down by about 45 degrees.

7
00:00:17,552 --> 00:00:20,036
Next let's make the camera a child of the

8
00:00:20,036 --> 00:00:22,036
player game object.

9
00:00:22,036 --> 00:00:24,602
This is a typical third-person setup,

10
00:00:24,602 --> 00:00:26,894
with the camera as a child of the player.

11
00:00:26,894 --> 00:00:28,894
When we move the player's position

12
00:00:28,894 --> 00:00:30,894
the camera moves with it.

13
00:00:31,864 --> 00:00:35,514
When the player rotates the camera rotates as well.

14
00:00:37,229 --> 00:00:39,229
Let's look at this from a position where we

15
00:00:39,229 --> 00:00:42,617
can see both the player and the camera game object.

16
00:00:43,559 --> 00:00:45,559
Move the player,

17
00:00:47,703 --> 00:00:49,387
rotate the player,

18
00:00:49,387 --> 00:00:51,387
the child camera moves with it.

19
00:00:52,426 --> 00:00:54,924
Now let's reset the player and test.

20
00:00:56,211 --> 00:01:00,302
We enter play move, hold down the up arrow to move,

21
00:01:00,302 --> 00:01:02,067
Whoa what's happening here?

22
00:01:02,711 --> 00:01:06,907
Okay, well as the camera is a child of the player's sphere,

23
00:01:06,907 --> 00:01:09,237
even thought the camera is not moving at all

24
00:01:09,237 --> 00:01:11,452
relative to the player's game object,

25
00:01:11,452 --> 00:01:14,295
the player game object is rotating like crazy

26
00:01:14,295 --> 00:01:16,820
so the camera's point of view rotates with it.

27
00:01:16,820 --> 00:01:18,348
Let's exit play mode.

28
00:01:19,098 --> 00:01:21,098
Unlike a normal third-person game

29
00:01:21,098 --> 00:01:24,593
our player game object is rotating on all 3 axis

30
00:01:24,593 --> 00:01:26,593
not just 1.

31
00:01:26,593 --> 00:01:28,593
In a typical third-person setup

32
00:01:28,593 --> 00:01:31,824
the camera as a child of the player game object

33
00:01:31,824 --> 00:01:33,824
will always be in a position relative

34
00:01:33,824 --> 00:01:35,460
to it's immediate parent,

35
00:01:36,957 --> 00:01:38,957
and this position will be the parent's

36
00:01:38,957 --> 00:01:42,532
position in the game, modified or offset by

37
00:01:42,532 --> 00:01:44,946
any values in the child's transform.

38
00:01:44,946 --> 00:01:46,946
We can't have the camera as a child of

39
00:01:46,946 --> 00:01:48,946
the player, so let's detach it.

40
00:01:50,081 --> 00:01:52,081
Our offset value will be the difference

41
00:01:52,081 --> 00:01:54,679
between the player game object and the camera.

42
00:01:55,600 --> 00:01:57,600
Now we need to associate the camera with

43
00:01:57,600 --> 00:02:00,003
the player game object, not as a child

44
00:02:00,003 --> 00:02:01,639
but with a script.

45
00:02:02,503 --> 00:02:06,398
Using the Add Component button choose New Script.

46
00:02:07,796 --> 00:02:09,796
We are writing in C#

47
00:02:11,456 --> 00:02:14,507
and name the script CameraController

48
00:02:14,507 --> 00:02:16,728
and then click on Create and Add

49
00:02:16,728 --> 00:02:18,728
or simply hit the return or enter key

50
00:02:18,728 --> 00:02:20,618
to confirm our selection.

51
00:02:20,618 --> 00:02:23,370
We should note, this way of creating a script

52
00:02:23,370 --> 00:02:25,370
will create that script asset on

53
00:02:25,370 --> 00:02:28,194
the root or top level of our project view.

54
00:02:30,020 --> 00:02:32,642
File CameraController in the Scripts folder

55
00:02:33,470 --> 00:02:35,470
and open it for editing.

56
00:02:37,296 --> 00:02:39,296
We need 2 variables here.

57
00:02:40,238 --> 00:02:43,164
A public GameObject reference to the player

58
00:02:43,664 --> 00:02:49,431
and a private vector3 to hold our offset value.

59
00:02:49,431 --> 00:02:51,431
Offset is private because we can

60
00:02:51,431 --> 00:02:53,873
set that value here in the script.

61
00:02:55,061 --> 00:02:57,581
For our offset value we will take the

62
00:02:57,581 --> 00:03:00,541
current transform position.

63
00:03:00,541 --> 00:03:04,573
and subtract the transform position of the player

64
00:03:04,573 --> 00:03:07,197
to find the difference between the two.

65
00:03:08,677 --> 00:03:14,060
So in start we can make offset equal to our

66
00:03:14,060 --> 00:03:19,364
transform position minus the player's transform position.

67
00:03:20,451 --> 00:03:23,224
And then every frame we set our

68
00:03:23,224 --> 00:03:27,534
transform position to our player's transform position

69
00:03:27,534 --> 00:03:29,534
plus the offset.

70
00:03:30,498 --> 00:03:32,498
This means as we move our player

71
00:03:32,498 --> 00:03:34,771
with the controls on the keyboard

72
00:03:34,771 --> 00:03:38,531
that each frame before displaying what the camera can see

73
00:03:38,531 --> 00:03:41,121
the camera is moved in to a new position

74
00:03:41,121 --> 00:03:43,368
aligned with the Player object.

75
00:03:43,368 --> 00:03:45,368
Just as if it were a child of that object

76
00:03:45,368 --> 00:03:47,368
if it were not rolling around the game board.

77
00:03:49,093 --> 00:03:52,453
However, update is not the best place for this code.

78
00:03:53,364 --> 00:03:56,036
It is true that update runs every frame

79
00:03:56,036 --> 00:03:58,348
and in update each frame we can track

80
00:03:58,348 --> 00:04:00,464
the position of the player's game object

81
00:04:00,464 --> 00:04:02,464
and set the position of the camera.

82
00:04:03,406 --> 00:04:06,753
However, for follow cameras, procedural animation,

83
00:04:06,753 --> 00:04:09,070
and gathering last known states

84
00:04:09,070 --> 00:04:11,626
it's best to use LateUpdate.

85
00:04:12,377 --> 00:04:15,913
LateUpdate runs every frame, just like update.

86
00:04:16,534 --> 00:04:19,095
But it is guaranteed to run after all items

87
00:04:19,095 --> 00:04:21,441
have been processed in update.

88
00:04:21,441 --> 00:04:24,110
So when we set the position of the camera

89
00:04:24,110 --> 00:04:28,654
we know absolutely that the player has moved for that frame.

90
00:04:30,024 --> 00:04:32,684
So let's test this. Let's save our script

91
00:04:32,684 --> 00:04:34,331
and return to Unity.

92
00:04:35,085 --> 00:04:37,814
First we need to create a reference to the

93
00:04:37,814 --> 00:04:39,814
player game object by dragging the player

94
00:04:39,814 --> 00:04:43,079
game object in to the Player slot

95
00:04:43,079 --> 00:04:45,079
in the camera controller's component.

96
00:04:46,007 --> 00:04:48,007
Enter play mode

97
00:04:50,551 --> 00:04:52,551
and now we get the behaviour we want.

98
00:04:54,570 --> 00:04:56,570
The camera follows the rolling ball

99
00:04:56,570 --> 00:04:58,225
without rotating

100
00:05:01,881 --> 00:05:04,048
even as the ball goes over the edge.

101
00:05:05,800 --> 00:05:07,800
In the next assignment we will setup the basic

102
00:05:07,800 --> 00:05:09,800
play area and create and place our

103
00:05:09,800 --> 00:05:11,800
special pick-up objects.

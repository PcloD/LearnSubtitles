1
00:00:02,167 --> 00:00:04,608
We want to be able to pick up our collectable game

2
00:00:04,608 --> 00:00:07,147
objects when our player game object collides with them.

3
00:00:07,425 --> 00:00:09,425
To do this we need to detect our collisions

4
00:00:09,425 --> 00:00:11,425
between the player game object and

5
00:00:11,425 --> 00:00:13,425
the PickUp game objects.

6
00:00:13,781 --> 00:00:15,675
We will need to have these collisions

7
00:00:15,675 --> 00:00:17,593
trigger a new behaviour and we will need to

8
00:00:17,593 --> 00:00:19,510
test these collisions to make sure we are

9
00:00:19,510 --> 00:00:21,134
picking up the correct objects.

10
00:00:21,680 --> 00:00:23,995
The PickUp objects, the player's sphere,

11
00:00:23,995 --> 00:00:25,913
the ground plane and the walls all have

12
00:00:25,913 --> 00:00:28,690
colliders that inform us about collisions.

13
00:00:29,024 --> 00:00:30,941
If we didn't test our collisions to find out

14
00:00:30,941 --> 00:00:32,859
which objects we have collided with

15
00:00:32,859 --> 00:00:34,776
we could collect the wrong objects.

16
00:00:35,144 --> 00:00:37,634
We could collect the floor, or the walls.

17
00:00:37,634 --> 00:00:40,350
As a matter of face if we didn't test our collisions

18
00:00:40,350 --> 00:00:42,268
on the very first frame of the game we would

19
00:00:42,268 --> 00:00:44,185
come in contact with the ground plane

20
00:00:44,185 --> 00:00:45,729
and we would collect the ground plane

21
00:00:45,729 --> 00:00:48,359
and then we would fall in to the void of the scene space

22
00:00:48,760 --> 00:00:50,677
and the game would essentially be over.

23
00:00:51,917 --> 00:00:55,003
First, we don't need our player to remain inactive.

24
00:00:55,003 --> 00:00:56,920
so let's tick the Active checkbox and

25
00:00:56,920 --> 00:00:58,839
bring back our player.

26
00:01:00,005 --> 00:01:02,538
Next let's select the PlayerController script

27
00:01:02,538 --> 00:01:04,258
and open it for editing.

28
00:01:04,777 --> 00:01:06,694
Just a note, we could edit this

29
00:01:06,694 --> 00:01:08,033
script regardless of whether the game

30
00:01:08,033 --> 00:01:09,950
object is active or not.

31
00:01:11,827 --> 00:01:13,215
Now that we have the script open,

32
00:01:13,215 --> 00:01:14,934
what code are we going to write?

33
00:01:15,552 --> 00:01:17,292
We could write collider

34
00:01:17,569 --> 00:01:19,307
and then search the documentation using the

35
00:01:19,307 --> 00:01:20,799
hot key combination.

36
00:01:21,466 --> 00:01:24,511
But there is a different way that we could do this as well.

37
00:01:25,013 --> 00:01:27,027
Let's return to Unity and look at the details

38
00:01:27,027 --> 00:01:29,041
of our player game object.

39
00:01:30,196 --> 00:01:32,015
What we are interested in here is the

40
00:01:32,015 --> 00:01:34,027
sphere collider component.

41
00:01:34,808 --> 00:01:37,475
In the header of each component on the left

42
00:01:37,475 --> 00:01:39,488
is the component's turndown arrow,

43
00:01:39,488 --> 00:01:42,033
the icon, the Enable checkbox

44
00:01:42,033 --> 00:01:45,466
if it's available, and the type of the component.

45
00:01:46,819 --> 00:01:49,971
On the right is the context sensitive gear gizmo

46
00:01:49,971 --> 00:01:52,702
and an icon of a little book with a question mark.

47
00:01:53,432 --> 00:01:54,900
Now this is what we need.

48
00:01:54,900 --> 00:01:57,781
This is the quick link to the component reference.

49
00:01:58,211 --> 00:02:00,653
If we select this icon we are taken

50
00:02:00,653 --> 00:02:02,667
not to the scripting reference but to the

51
00:02:02,667 --> 00:02:04,680
component reference.

52
00:02:05,315 --> 00:02:07,316
We would read this document to find out more

53
00:02:07,316 --> 00:02:09,319
about how to use this component in the context

54
00:02:09,319 --> 00:02:10,823
of the editor.

55
00:02:10,823 --> 00:02:13,283
We, however, want to find out how to

56
00:02:13,283 --> 00:02:15,286
script to this component's class.

57
00:02:15,716 --> 00:02:18,258
To do this we simply switch to scripting

58
00:02:19,536 --> 00:02:21,231
and we are taken to the scripting reference

59
00:02:21,231 --> 00:02:22,466
for the sphere collider.

60
00:02:23,621 --> 00:02:26,700
We want to detect and test our collisions.

61
00:02:26,700 --> 00:02:28,713
For this project we are going to use

62
00:02:28,713 --> 00:02:30,726
OnTriggerEnter.

63
00:02:37,142 --> 00:02:40,413
Just imagine if we were, say, a daring plumber

64
00:02:40,413 --> 00:02:43,534
and we jumped up to collect a perfect arch of coins

65
00:02:43,534 --> 00:02:45,547
and bounced off the very first one as we

66
00:02:45,547 --> 00:02:47,560
collected it and fell back to the ground.

67
00:02:48,063 --> 00:02:49,555
Not very elegant.

68
00:02:50,442 --> 00:02:52,454
This code will give us the ability to detect

69
00:02:52,454 --> 00:02:54,469
the contact between our player game object

70
00:02:54,469 --> 00:02:56,721
and our PickUp game objects

71
00:02:56,721 --> 00:02:59,537
without actually creating a physical collision.

72
00:03:00,065 --> 00:03:02,066
The code example however is not exactly

73
00:03:02,066 --> 00:03:03,957
what we're looking for.

74
00:03:03,957 --> 00:03:06,646
But that's okay, we can change that.

75
00:03:06,646 --> 00:03:08,826
First, let's copy the code,

76
00:03:09,281 --> 00:03:11,813
and then let's return to our scripting application.

77
00:03:12,321 --> 00:03:15,258
Now that we're back in scripting let's paste the code.

78
00:03:16,016 --> 00:03:18,253
As we have copied this code from a webpage

79
00:03:18,253 --> 00:03:20,125
let's correct the indents.

80
00:03:20,125 --> 00:03:21,654
In this case I'm going to make sure the

81
00:03:21,654 --> 00:03:23,667
indents are tabs and that all of the tabs are

82
00:03:23,667 --> 00:03:25,195
correctly aligned.

83
00:03:25,851 --> 00:03:27,810
Next, let's look at this code.

84
00:03:27,810 --> 00:03:30,237
We are using the function OnTriggerEnter.

85
00:03:30,670 --> 00:03:32,650
OnTriggerEnter will be called by Unity

86
00:03:32,650 --> 00:03:34,632
when our player game object first touches

87
00:03:34,632 --> 00:03:36,294
a trigger collider.

88
00:03:36,856 --> 00:03:38,689
We are given as an argument

89
00:03:38,689 --> 00:03:41,679
a reference to the trigger collider that we have touched.

90
00:03:42,128 --> 00:03:44,447
This is the collider called Other.

91
00:03:44,919 --> 00:03:46,931
This reference gives us a way to get a 

92
00:03:46,931 --> 00:03:48,946
hold of the colliders that we touch.

93
00:03:49,445 --> 00:03:51,457
With this code, when we touch another trigger

94
00:03:51,457 --> 00:03:54,209
collider we will destroy the game object

95
00:03:54,209 --> 00:03:56,223
that the trigger collider is attached to

96
00:03:56,223 --> 00:03:59,013
through the reference other.gameObject.

97
00:03:59,742 --> 00:04:02,803
By destroying that game object, the game object,

98
00:04:02,803 --> 00:04:04,816
all of it's components and all of it's

99
00:04:04,816 --> 00:04:06,830
children and their components are removed

100
00:04:06,830 --> 00:04:08,269
from the scene.

101
00:04:08,726 --> 00:04:10,844
For the sake of example in this assignment

102
00:04:10,844 --> 00:04:12,850
we won't destroy the other game object

103
00:04:12,850 --> 00:04:14,551
we will deactivate it.

104
00:04:14,551 --> 00:04:16,560
Just like we deactivated the player object

105
00:04:16,560 --> 00:04:19,336
when we were creating our PickUp objects.

106
00:04:20,026 --> 00:04:23,139
First, let's remove the Destroy(other.gameobject)

107
00:04:23,139 --> 00:04:25,172
code from the function.

108
00:04:25,172 --> 00:04:27,205
But let's paste it down below our script

109
00:04:27,205 --> 00:04:29,736
as a palette to work with.

110
00:04:30,992 --> 00:04:33,726
How will we deactivate our PickUp objects?

111
00:04:34,113 --> 00:04:35,900
Well what clues do we have?

112
00:04:36,385 --> 00:04:38,423
We can address the other collider's game 

113
00:04:38,423 --> 00:04:41,183
object through other.gameObject.

114
00:04:41,183 --> 00:04:43,478
We can see this here in the sample code.

115
00:04:43,857 --> 00:04:45,844
And we want to test the other game object

116
00:04:45,844 --> 00:04:48,067
and if it's a PickUp object we want to deactivate

117
00:04:48,067 --> 00:04:49,646
that game object.

118
00:04:50,347 --> 00:04:52,336
So let's look up GameObject

119
00:04:52,336 --> 00:04:55,106
with our hot key combination and see what we can find.

120
00:04:56,508 --> 00:04:59,153
Now we have the page on GameObject.

121
00:04:59,153 --> 00:05:01,877
There are two important items here that we want.

122
00:05:02,228 --> 00:05:04,033
They are tag,

123
00:05:04,033 --> 00:05:06,327
tag allows us to identify the game object

124
00:05:06,327 --> 00:05:09,234
by comparing the tag value to a string.

125
00:05:09,963 --> 00:05:11,781
And SetActive.

126
00:05:11,781 --> 00:05:15,904
This is how we activate or deactivate a game object through code.

127
00:05:16,586 --> 00:05:18,586
The last item we need to know about is

128
00:05:18,586 --> 00:05:20,804
Compare Tag.

129
00:05:20,804 --> 00:05:22,855
Compare Tag allows us to efficiently

130
00:05:22,855 --> 00:05:27,158
compare the tag of any game object to a sting value.

131
00:05:28,599 --> 00:05:32,497
Let's open up these three items, each in their own tab.

132
00:05:35,604 --> 00:05:39,716
Tag allows us to identify a game object by a tag value.

133
00:05:40,580 --> 00:05:45,327
We must declare our tags in the Tags and Layers Panel before using them.

134
00:05:46,018 --> 00:05:49,988
It is possible to test a tag against a string value directly

135
00:05:49,988 --> 00:05:51,667
with code like

136
00:05:51,667 --> 00:05:57,030
if gameObject.tag is the same as some string value.

137
00:05:57,740 --> 00:06:01,068
But there is a more efficient built-in way to do this,

138
00:06:01,068 --> 00:06:03,068
and that is CompareTag

139
00:06:04,151 --> 00:06:06,424
With CompareTag we can efficiently

140
00:06:06,424 --> 00:06:10,659
compare the tag of any game object with a string value.

141
00:06:12,670 --> 00:06:14,670
Let's copy the sample code and

142
00:06:14,670 --> 00:06:16,670
paste it in to our working palette.

143
00:06:21,958 --> 00:06:26,950
Now GameObject.SetActive.

144
00:06:27,386 --> 00:06:30,387
This is how we activate or deactivate a game object.

145
00:06:31,389 --> 00:06:33,389
This is the code equivalent of clicking

146
00:06:33,389 --> 00:06:35,389
the Active check box next to the

147
00:06:35,389 --> 00:06:37,389
Name field in the Inspector.

148
00:06:40,444 --> 00:06:42,917
In our case, just like the code snippet,

149
00:06:42,917 --> 00:06:46,565
we will call GameObject.SetActive (false)

150
00:06:46,565 --> 00:06:48,990
to deactivate our PickUp game objects.

151
00:06:50,243 --> 00:06:55,703
Let's copy this code and returning to our script editor

152
00:06:55,703 --> 00:06:57,716
paste it in to our palette as well.

153
00:06:59,375 --> 00:07:01,893
I feel we have enough pieces to write our code

154
00:07:03,027 --> 00:07:10,088
so let's write if (other.gameObject.CompareTag

155
00:07:11,356 --> 00:07:13,957
with the string value of PickUp

156
00:07:14,514 --> 00:07:18,110
and we will have to define this tag in Unity later.

157
00:07:19,012 --> 00:07:24,352
other.gameObject.SetActive (false);

158
00:07:26,314 --> 00:07:28,039
Now this code will be called every time

159
00:07:28,039 --> 00:07:30,052
we touch a trigger collider.

160
00:07:30,568 --> 00:07:33,259
We are given a reference to the collider we touch,

161
00:07:33,259 --> 00:07:34,842
we test it's tag,

162
00:07:34,842 --> 00:07:37,359
and if the tag is the same as the string value

163
00:07:37,359 --> 00:07:40,300
PickUp we will take the other game object

164
00:07:40,300 --> 00:07:42,872
and we will call SetActive (false),

165
00:07:42,872 --> 00:07:45,137
which will deactivate that game object.

166
00:07:45,843 --> 00:07:48,446
Now we don't need this code we've been saving anymore

167
00:07:48,446 --> 00:07:51,071
and keeping it will only confuse the compiler

168
00:07:51,071 --> 00:07:52,360
so we can delete it.

169
00:07:54,343 --> 00:07:56,356
Let's save this script and return to Unity

170
00:07:56,356 --> 00:07:57,982
and check for errors.

171
00:07:59,082 --> 00:08:01,478
The first thing we need to do it set up the tag value

172
00:08:01,478 --> 00:08:03,490
for the PickUp objects.

173
00:08:03,490 --> 00:08:06,203
Select the prefab asset for the PickUp object.

174
00:08:06,505 --> 00:08:08,309
When we look at the tag list

175
00:08:08,309 --> 00:08:10,955
we don't see any tag called PickUp

176
00:08:10,955 --> 00:08:12,673
so we need to add one.

177
00:08:12,673 --> 00:08:14,685
Select Add Tag.

178
00:08:15,965 --> 00:08:19,117
This brings up the Tags and Layers Panel.

179
00:08:19,117 --> 00:08:21,901
Here we can customise tags and layers.

180
00:08:22,735 --> 00:08:25,397
Note that this list is empty.

181
00:08:26,065 --> 00:08:29,622
To create a new custom tag select the + button

182
00:08:29,622 --> 00:08:32,320
to add a new row to the tags list.

183
00:08:33,053 --> 00:08:37,294
In the new empty element, in our case tag 0,

184
00:08:37,294 --> 00:08:40,892
type PickUp, and this is case sensitive

185
00:08:40,892 --> 00:08:43,163
and needs to be exactly the same string

186
00:08:43,163 --> 00:08:45,176
that we have in our script.

187
00:08:45,479 --> 00:08:47,872
If in doubt we can copy and paste

188
00:08:47,872 --> 00:08:50,237
this string to get the exact value.

189
00:08:52,280 --> 00:08:54,294
When we look back at the prefab asset

190
00:08:54,294 --> 00:08:57,108
note that the asset is still untagged.

191
00:08:57,108 --> 00:09:00,012
By selecting Add Tag we changed our focus

192
00:09:00,012 --> 00:09:02,717
from the prefab asset to the Tag Manager

193
00:09:02,717 --> 00:09:05,273
and in the Tag Manager we created our tag.

194
00:09:05,614 --> 00:09:07,141
Now we need to apply that tag

195
00:09:07,141 --> 00:09:08,587
to the prefab asset.

196
00:09:09,090 --> 00:09:11,103
Select the Tag drop down again

197
00:09:11,103 --> 00:09:14,088
and see how we now have PickUp in the list.

198
00:09:14,088 --> 00:09:16,100
Select this tag from the list and the asset

199
00:09:16,100 --> 00:09:17,991
is now tagged PickUp.

200
00:09:17,991 --> 00:09:20,451
And with the power of prefabs

201
00:09:20,451 --> 00:09:23,387
all of the instances are now tagged PickUp as well.

202
00:09:25,949 --> 00:09:27,830
Now let's test our game.

203
00:09:27,830 --> 00:09:29,843
Save the scene and enter play mode.

204
00:09:33,319 --> 00:09:36,397
Hmm, okay, our tag is set to PickUp

205
00:09:36,397 --> 00:09:38,434
but we are still bouncing off the PickUp cubes

206
00:09:38,434 --> 00:09:41,098
just like we are bouncing off the walls.

207
00:09:41,098 --> 00:09:43,134
So let's exit play mode.

208
00:09:43,592 --> 00:09:45,576
Before we discuss why we are bouncing off

209
00:09:45,576 --> 00:09:47,562
the PickUp cubes rather than picking them up

210
00:09:47,562 --> 00:09:49,005
we need to have a brief discussion about

211
00:09:49,005 --> 00:09:50,623
Unity's physics system.

212
00:09:51,485 --> 00:09:54,118
I'm going to enter play mode for this discussion.

213
00:09:58,358 --> 00:10:01,031
Let's look at one of our cubes and our player.

214
00:10:01,639 --> 00:10:03,678
As an aside we can select two or

215
00:10:03,678 --> 00:10:05,882
more game objects at the same time

216
00:10:05,882 --> 00:10:07,729
and inspect them all.

217
00:10:07,729 --> 00:10:09,770
We do this by holding down the command key

218
00:10:09,770 --> 00:10:12,286
on the mac or the control key on the PC,

219
00:10:12,286 --> 00:10:13,968
and selecting the game objects.

220
00:10:14,529 --> 00:10:16,852
When we select multiple game objects

221
00:10:16,852 --> 00:10:18,803
note how the inspector changes to show

222
00:10:18,803 --> 00:10:20,654
the common components and property

223
00:10:20,654 --> 00:10:22,960
values of the selected game objects.

224
00:10:23,638 --> 00:10:26,633
The inspector also allows for multi-object editing.

225
00:10:26,633 --> 00:10:28,635
Using multi-object editing I'm going to

226
00:10:28,635 --> 00:10:30,635
disable the mesh renderer on both the 

227
00:10:30,635 --> 00:10:33,725
player's sphere and the selected cube with a single click.

228
00:10:34,462 --> 00:10:36,715
This leaves us with the two green outlines

229
00:10:36,715 --> 00:10:39,814
of the collider volumes for these two objects.

230
00:10:40,675 --> 00:10:43,500
How do collisions work in Unity's physics engine?

231
00:10:44,221 --> 00:10:46,208
The physics engine does not allow two collider

232
00:10:46,208 --> 00:10:47,961
volumes to overlap.

233
00:10:47,961 --> 00:10:49,947
When the physics engine detects that any two

234
00:10:49,947 --> 00:10:52,884
or more colliders will overlap that frame

235
00:10:52,884 --> 00:10:54,870
the physics engine will look at the objects and

236
00:10:54,870 --> 00:10:57,516
analyse their speed and rotation and shape

237
00:10:57,516 --> 00:10:59,234
and calculate a collision.

238
00:10:59,600 --> 00:11:01,490
One of the major factors in this calculation

239
00:11:01,490 --> 00:11:03,475
is whether the colliders are static

240
00:11:03,475 --> 00:11:05,068
or dynamic.

241
00:11:05,754 --> 00:11:08,018
Static colliders are usually non-moving

242
00:11:08,018 --> 00:11:10,770
parts of your scene, like the walls, the floor,

243
00:11:10,770 --> 00:11:12,596
or the fountain in the courtyard.

244
00:11:12,990 --> 00:11:15,575
Dynamic colliders are things that move

245
00:11:15,575 --> 00:11:17,954
like the player's sphere or a car.

246
00:11:18,407 --> 00:11:20,393
When calculating a collision the static geometry

247
00:11:20,393 --> 00:11:22,642
will not be affected by the collision.

248
00:11:23,097 --> 00:11:25,156
But the dynamic objects will be.

249
00:11:25,672 --> 00:11:27,731
In our case the player's sphere is dynamic,

250
00:11:27,731 --> 00:11:29,791
or moving geometry, and it is bouncing

251
00:11:29,791 --> 00:11:31,692
off the static geometry of the cubes.

252
00:11:32,250 --> 00:11:34,178
Just as it bounces off the static geometry

253
00:11:34,178 --> 00:11:36,238
of the walls.

254
00:11:36,680 --> 00:11:38,688
The physics engine can however allow the

255
00:11:38,688 --> 00:11:41,780
penetration or overlap of collider volumes.

256
00:11:41,780 --> 00:11:43,788
When it does this the physics engine

257
00:11:43,788 --> 00:11:45,797
still calculates the collider volumes and

258
00:11:45,797 --> 00:11:47,786
keeps track of the collider overlap.

259
00:11:48,371 --> 00:11:50,669
But it doesn't physically act on the overlapping

260
00:11:50,669 --> 00:11:53,531
objects, it doesn't cause a collision.

261
00:11:53,989 --> 00:11:56,153
We do this by making our colliders in to

262
00:11:56,153 --> 00:11:58,401
triggers, or trigger colliders.

263
00:11:58,964 --> 00:12:00,812
When we make our colliders in to a trigger,

264
00:12:00,812 --> 00:12:02,934
or trigger collider, we can detect

265
00:12:02,934 --> 00:12:05,060
the contact with that trigger through the

266
00:12:05,060 --> 00:12:07,188
OnTrigger event messages.

267
00:12:07,188 --> 00:12:09,247
When a collider is a trigger you can do

268
00:12:09,247 --> 00:12:11,307
clever things like place a trigger in the middle

269
00:12:11,307 --> 00:12:14,001
of a doorway in, say, an adventure game,

270
00:12:14,001 --> 00:12:15,950
and when the player enters the trigger

271
00:12:15,950 --> 00:12:17,902
the mini-map updates and a message plays

272
00:12:17,902 --> 00:12:19,851
'you have discovered this room'.

273
00:12:20,555 --> 00:12:22,542
Or every time your player walks around

274
00:12:22,542 --> 00:12:24,982
that corner spiders drop from the ceiling

275
00:12:24,982 --> 00:12:26,970
because the player has walked through a trigger.

276
00:12:27,701 --> 00:12:30,246
For more information on OnCollision and on

277
00:12:30,246 --> 00:12:32,986
trigger messages see the lessons linked below.

278
00:12:33,268 --> 00:12:35,292
We are using OnTriggerEnter in our code

279
00:12:35,292 --> 00:12:37,613
rather than OnCollisionEnter.

280
00:12:37,613 --> 00:12:39,641
So we need to change our collider volumes

281
00:12:39,641 --> 00:12:41,946
in to trigger volumes.

282
00:12:41,946 --> 00:12:44,598
To do this we must be out of play mode.

283
00:12:46,609 --> 00:12:48,614
Let's select the prefab asset and look at

284
00:12:48,614 --> 00:12:50,443
the box collider component.

285
00:12:50,863 --> 00:12:52,921
Here we select Is Trigger

286
00:12:52,921 --> 00:12:54,981
and again the power of prefabs

287
00:12:54,981 --> 00:12:58,331
all of our PickUp objects are now using trigger colliders.

288
00:12:58,736 --> 00:13:02,184
Let's save our scene, enter play mode and test.

289
00:13:02,748 --> 00:13:04,717
And as our player enters the trigger

290
00:13:04,717 --> 00:13:06,686
we pickup the objects.

291
00:13:06,686 --> 00:13:08,017
Excellent.

292
00:13:09,665 --> 00:13:11,724
Let's exit play mode.

293
00:13:12,913 --> 00:13:14,366
Everything looks great. 

294
00:13:14,766 --> 00:13:16,567
We only have one issue.

295
00:13:16,896 --> 00:13:19,224
We have made one small mistake,

296
00:13:19,224 --> 00:13:21,149
and this is related to how Unity

297
00:13:21,149 --> 00:13:22,663
optimises it's physics.

298
00:13:23,214 --> 00:13:25,273
As a performance optimisation Unity

299
00:13:25,273 --> 00:13:27,333
calculates all the volumes

300
00:13:27,333 --> 00:13:29,801
of all the static colliders in a scene

301
00:13:29,801 --> 00:13:32,124
and holds this information in a cache.

302
00:13:32,456 --> 00:13:34,395
This makes sense as static colliders

303
00:13:34,395 --> 00:13:37,082
shouldn't move, and this saves recalculating this

304
00:13:37,082 --> 00:13:39,019
information every frame.

305
00:13:39,674 --> 00:13:42,965
Where we have made our mistake is by rotating our cubes.

306
00:13:42,965 --> 00:13:46,242
Any time we move, rotate, or scale a static collider

307
00:13:46,242 --> 00:13:49,486
Unity will recalculate all the static colliders again

308
00:13:49,486 --> 00:13:51,837
and update the static collider cache.

309
00:13:51,837 --> 00:13:54,724
To recalculate the cache takes resources.

310
00:13:55,349 --> 00:13:57,697
We can move, rotate or scale dynamic

311
00:13:57,697 --> 00:14:00,094
colliders as often as we want and Unity won't

312
00:14:00,094 --> 00:14:02,032
recache any collider volumes.

313
00:14:02,373 --> 00:14:04,809
Unity expects us to move colliders.

314
00:14:04,809 --> 00:14:06,831
We simply need to indicate to Unity which

315
00:14:06,831 --> 00:14:09,639
colliders are dynamic before we move them.

316
00:14:09,639 --> 00:14:12,557
We do this by using the rigid body component.

317
00:14:12,944 --> 00:14:14,914
Any game object with a collider

318
00:14:14,914 --> 00:14:17,788
and a rigid body is considered dynamic.

319
00:14:18,296 --> 00:14:20,580
Any game object with a collider attached

320
00:14:20,580 --> 00:14:24,213
but no physics rigid body is expected to be static.

321
00:14:24,837 --> 00:14:26,667
Currently our PickUp game objects have a

322
00:14:26,667 --> 00:14:29,604
box collider but no rigid body.

323
00:14:29,604 --> 00:14:31,626
So Unity is recalculating our static

324
00:14:31,626 --> 00:14:33,647
collider cache every frame.

325
00:14:34,269 --> 00:14:36,614
The solution is to add a rigid body

326
00:14:36,614 --> 00:14:38,478
to the PickUp objects.

327
00:14:38,478 --> 00:14:41,444
This will move the cubes from being static colliders

328
00:14:41,444 --> 00:14:43,502
to being dynamic colliders.

329
00:14:43,502 --> 00:14:45,073
Let's save and play.

330
00:14:46,065 --> 00:14:48,614
And our cubes fall through the floor.

331
00:14:48,614 --> 00:14:51,515
Gravity pulls them down, and as they are triggers

332
00:14:51,515 --> 00:14:53,076
they don't collide with the floor.

333
00:14:53,652 --> 00:14:55,483
Let's exit play mode.

334
00:14:55,982 --> 00:14:58,664
If we look at the rigid body component

335
00:14:58,664 --> 00:15:01,324
we could simply disable Use Gravity,

336
00:15:01,324 --> 00:15:04,089
which would prevent the cubes from being pulled downwards.

337
00:15:04,089 --> 00:15:06,683
This is only a partial solution however.

338
00:15:07,095 --> 00:15:09,354
If we did this, even though our cubes

339
00:15:09,354 --> 00:15:11,412
would not respond to gravity they would still

340
00:15:11,412 --> 00:15:13,096
respond to physics forces

341
00:15:13,505 --> 00:15:15,529
There is a better solution.

342
00:15:15,529 --> 00:15:18,415
And that is to select Is Kinematic.

343
00:15:19,188 --> 00:15:22,322
When we do this we set this rigid body component to be

344
00:15:22,322 --> 00:15:24,332
a kinematic rigid body.

345
00:15:24,822 --> 00:15:26,881
A kinematic rigid body will not react

346
00:15:26,881 --> 00:15:29,806
to physics forces and it can be animated

347
00:15:29,806 --> 00:15:31,864
and moved by it's transform.

348
00:15:32,206 --> 00:15:35,323
This is great for everything from objects with colliders

349
00:15:35,323 --> 00:15:37,382
like elevators and moving platforms,

350
00:15:37,382 --> 00:15:39,850
to objects with triggers, like our collectables

351
00:15:39,850 --> 00:15:42,909
that need to be animated or moved by their transform.

352
00:15:42,909 --> 00:15:44,915
For more information on the rigid body

353
00:15:44,915 --> 00:15:48,560
and Is Kinematic see the lessons linked below.

354
00:15:49,148 --> 00:15:52,127
Let's save our scene and enter play mode to test.

355
00:15:52,702 --> 00:15:56,150
Now our behaviour is identical and performant.

356
00:15:56,947 --> 00:15:59,319
So, static colliders shouldn't move,

357
00:15:59,319 --> 00:16:01,029
like walls and floors.

358
00:16:01,029 --> 00:16:03,126
Dynamic colliders can move,

359
00:16:03,126 --> 00:16:05,248
and have a rigid body attached.

360
00:16:05,248 --> 00:16:08,547
Standard rigid bodies are moved using physics forces.

361
00:16:08,547 --> 00:16:10,551
Kinematic rigid bodies are moved using

362
00:16:10,551 --> 00:16:12,329
their transform.

363
00:16:13,960 --> 00:16:15,936
In the next assignment we will count our

364
00:16:15,936 --> 00:16:17,910
collectable object and make a simple UI

365
00:16:17,910 --> 00:16:20,277
to display our score and messages.

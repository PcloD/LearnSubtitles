1
00:00:01,202 --> 00:00:04,171
Now we are going to move the player game object.

2
00:00:04,171 --> 00:00:06,171
First let's think through how we want this player

3
00:00:06,171 --> 00:00:07,882
game object to behave.

4
00:00:07,882 --> 00:00:09,882
We want to have the sphere roll around on the

5
00:00:09,882 --> 00:00:12,352
game area, bump in to walls, stay on the ground

6
00:00:12,352 --> 00:00:14,352
and not fly off in to space.

7
00:00:14,546 --> 00:00:16,546
We want to be able to collide with our collectible

8
00:00:16,546 --> 00:00:19,072
game objects and pick them up when we do.

9
00:00:19,421 --> 00:00:20,936
This requires physics.

10
00:00:21,149 --> 00:00:23,149
To use physics the game object needs

11
00:00:23,149 --> 00:00:25,507
a rigidbody component attached.

12
00:00:25,606 --> 00:00:27,606
To attach a new component we must first

13
00:00:27,606 --> 00:00:29,606
select the game object we want to attach

14
00:00:29,606 --> 00:00:32,389
the component to, in this case we will select

15
00:00:32,389 --> 00:00:34,389
our player game object.

16
00:00:34,389 --> 00:00:37,014
Then we can either choose the Component menu

17
00:00:37,014 --> 00:00:39,264
and select Physics - Rigid Body

18
00:00:39,264 --> 00:00:41,429
which would attach this component to the game object

19
00:00:41,429 --> 00:00:43,125
we have selected.

20
00:00:43,625 --> 00:00:45,625
Or use the Add Component button in the Inspector

21
00:00:45,625 --> 00:00:48,558
choosing Physics - Rigid Body.

22
00:00:49,666 --> 00:00:51,666
Either way this attached the rigidbody

23
00:00:51,666 --> 00:00:53,666
component to the selected game object.

24
00:00:55,202 --> 00:00:57,202
If we choose to we can rearrange the

25
00:00:57,202 --> 00:00:59,202
order of the components on the game object

26
00:00:59,202 --> 00:01:01,781
using the context sensitive gear menu

27
00:01:01,781 --> 00:01:03,781
in the upper right of the component.

28
00:01:04,281 --> 00:01:07,123
Doing this has no effect on the performance of our game.

29
00:01:07,123 --> 00:01:09,619
However, having a consistent order to the components

30
00:01:09,619 --> 00:01:12,880
on our game object may help us speed up our development

31
00:01:12,880 --> 00:01:14,880
by keeping or maintaining an organised

32
00:01:14,880 --> 00:01:16,880
project and hierarchy.

33
00:01:16,880 --> 00:01:18,880
Don't forget, you can collapse or expand

34
00:01:18,880 --> 00:01:22,247
the Component view by clicking on the component's title bar.

35
00:01:22,247 --> 00:01:24,247
We should note that whenever we do this

36
00:01:24,247 --> 00:01:26,247
this will also toggle the relevant

37
00:01:26,247 --> 00:01:29,057
gizmos for that component in the Scene view.

38
00:01:33,535 --> 00:01:35,315
Now we need to get the player object moving

39
00:01:35,315 --> 00:01:36,952
under our control.

40
00:01:36,952 --> 00:01:38,952
To do this we need to get input from our player

41
00:01:38,952 --> 00:01:40,952
through the keyboard and we need to apply

42
00:01:40,952 --> 00:01:43,856
that input to the player game object as forces

43
00:01:43,856 --> 00:01:45,856
to move the sphere in the scene.

44
00:01:46,784 --> 00:01:48,784
We will do this by using a script that

45
00:01:48,784 --> 00:01:51,210
we attach to the player game object.

46
00:01:51,710 --> 00:01:54,185
First let's create a folder in our project view

47
00:01:54,185 --> 00:01:56,185
to hold our script assets.

48
00:01:56,185 --> 00:01:59,104
In the Project view click on the Create menu

49
00:01:59,104 --> 00:02:01,104
and choose Create Folder.

50
00:02:01,604 --> 00:02:03,604
Rename this folder Scripts.

51
00:02:05,140 --> 00:02:07,850
Next let's create a new C# script.

52
00:02:08,557 --> 00:02:11,204
To create a new script we have some choices.

53
00:02:11,204 --> 00:02:13,204
We can choose Assets - Create

54
00:02:13,204 --> 00:02:15,204
to create our new C# script.

55
00:02:16,519 --> 00:02:19,800
Or we can use the Create menu in the project view.

56
00:02:21,557 --> 00:02:23,962
But what might be more efficient in this case

57
00:02:23,962 --> 00:02:25,962
would be to select the player game object

58
00:02:25,962 --> 00:02:29,433
and use the Add Component button in the Inspector.

59
00:02:29,933 --> 00:02:32,502
The Add Component menu contains the selection

60
00:02:32,502 --> 00:02:33,950
New Script.

61
00:02:33,950 --> 00:02:36,425
This allows us to both create and attach

62
00:02:36,425 --> 00:02:38,159
a script in one step.

63
00:02:38,659 --> 00:02:42,393
First let's name this script PlayerController.

64
00:02:43,473 --> 00:02:46,574
We can choose the language of the script, which will be C#,

65
00:02:47,074 --> 00:02:49,984
and then click on Create and Add.

66
00:02:49,984 --> 00:02:51,984
Or simply hit the return or enter key to

67
00:02:51,984 --> 00:02:53,732
confirm our selection.

68
00:02:54,790 --> 00:02:57,909
Unity will create, compile and attach this script

69
00:02:57,909 --> 00:02:59,909
to our selected game object.

70
00:03:00,409 --> 00:03:03,134
We should note, this way of creating a script

71
00:03:03,134 --> 00:03:05,703
will create that script asset on the root

72
00:03:05,703 --> 00:03:07,703
or top level of our Project view.

73
00:03:08,755 --> 00:03:11,737
We will need to move the asset in to the Scripts directory

74
00:03:11,737 --> 00:03:14,286
in order to maintain an organised Project view.

75
00:03:15,338 --> 00:03:17,715
If we select the script in our Project view

76
00:03:17,715 --> 00:03:20,821
we see a preview of the script asset in the Inspector,

77
00:03:20,821 --> 00:03:22,821
but this text is not editable.

78
00:03:23,639 --> 00:03:25,639
Let's open the script.

79
00:03:25,639 --> 00:03:27,639
We can do this a number of ways.

80
00:03:28,774 --> 00:03:31,601
When we are inspecting a game object using the script

81
00:03:31,601 --> 00:03:34,343
we can use the context sensitive gear menu.

82
00:03:36,003 --> 00:03:39,466
We can double click on the script asset in the Project view

83
00:03:39,466 --> 00:03:41,466
or we can use the Open button in the Inspector

84
00:03:41,466 --> 00:03:44,286
when we have the script selected in our Project view.

85
00:03:44,786 --> 00:03:48,103
This will open our script in our preferred script editor.

86
00:03:48,103 --> 00:03:50,103
First let's remove the sample code provided

87
00:03:50,103 --> 00:03:51,786
in the base script.

88
00:03:51,786 --> 00:03:53,786
Next let's think,

89
00:03:53,786 --> 00:03:56,089
what do we want to do with this script?

90
00:03:56,089 --> 00:03:59,196
We want to check every frame for player input

91
00:03:59,196 --> 00:04:01,581
and then we want to apply that input to the

92
00:04:01,581 --> 00:04:04,791
player game object every frame as movement.

93
00:04:05,291 --> 00:04:08,187
Where will we check for and apply this input?

94
00:04:08,187 --> 00:04:09,979
We have two choices.

95
00:04:09,979 --> 00:04:11,979
Update and Fixed Update.

96
00:04:13,224 --> 00:04:15,529
Update is called before rendering a frame

97
00:04:15,529 --> 00:04:18,295
and this is where most of our game code will go.

98
00:04:19,430 --> 00:04:21,430
Fixed Update on the other hand is called just

99
00:04:21,430 --> 00:04:24,310
before performing any physics calculations

100
00:04:24,310 --> 00:04:26,894
and this is where our physics code will go.

101
00:04:27,501 --> 00:04:29,501
We will be moving our ball by applying forces

102
00:04:29,501 --> 00:04:32,141
to the rigidbody, this is physics.

103
00:04:32,141 --> 00:04:35,234
So we will put our code in Fixed Update.

104
00:04:36,659 --> 00:04:38,659
What code to we need to write?

105
00:04:39,822 --> 00:04:41,214
We know we need input,

106
00:04:41,214 --> 00:04:43,214
but how do we find out more?

107
00:04:43,714 --> 00:04:45,852
There is a shortcut in Monodevelop

108
00:04:45,852 --> 00:04:48,322
that searches the Unity API.

109
00:04:48,322 --> 00:04:51,100
On the mac it's command plus single quote,

110
00:04:51,100 --> 00:04:54,517
and on the pc it's control plus single quote.

111
00:04:54,517 --> 00:04:56,517
Select the item you want to research,

112
00:04:56,517 --> 00:04:58,517
in our case input,

113
00:04:58,517 --> 00:05:00,517
and hold down the command or control key and

114
00:05:00,517 --> 00:05:02,517
type the single quote button.

115
00:05:03,459 --> 00:05:05,459
This search brings up every reference

116
00:05:05,459 --> 00:05:08,360
in our documentation related to input.

117
00:05:08,935 --> 00:05:11,086
Select Input at the top,

118
00:05:11,086 --> 00:05:13,695
interface in to the input system.

119
00:05:15,801 --> 00:05:17,801
This brings up the page on Input.

120
00:05:18,798 --> 00:05:21,390
This is the page on the input class.

121
00:05:21,390 --> 00:05:24,132
We use this class to read the axis setup in the

122
00:05:24,132 --> 00:05:26,132
input manager and to access multitouch

123
00:05:26,132 --> 00:05:28,132
touch and accelerometer data

124
00:05:28,132 --> 00:05:29,671
on mobile devices.

125
00:05:29,671 --> 00:05:31,671
We read the text on the top of the page to

126
00:05:31,671 --> 00:05:33,671
understand how to use the class.

127
00:05:33,671 --> 00:05:35,671
In our case, to get input from the player

128
00:05:35,671 --> 00:05:39,121
on all platforms, including mobile devices.

129
00:05:39,994 --> 00:05:41,994
Under the description is a list of class

130
00:05:41,994 --> 00:05:44,620
variables and class functions.

131
00:05:44,620 --> 00:05:47,046
The class variables hold information

132
00:05:47,046 --> 00:05:49,570
like the number of touches in touchCount

133
00:05:49,570 --> 00:05:53,160
or a reference to the default gyroscope with gyro.

134
00:05:53,647 --> 00:05:56,215
The class functions do something for us.

135
00:05:56,825 --> 00:06:00,419
In our code we will be using Input.GetAxis.

136
00:06:00,919 --> 00:06:04,132
When we find the item we want we click on the link

137
00:06:04,132 --> 00:06:07,433
to bring up a page on the function or the variable.

138
00:06:07,933 --> 00:06:09,794
Let's look at Input.GetAxis.

139
00:06:09,794 --> 00:06:12,875
This page includes the signature of the function,

140
00:06:12,875 --> 00:06:14,875
a description of the function

141
00:06:15,375 --> 00:06:17,721
and code snippets showing how to use it

142
00:06:17,721 --> 00:06:20,333
in Unity's Javascript and C#.

143
00:06:20,333 --> 00:06:22,333
We will be using C#.

144
00:06:22,890 --> 00:06:25,474
For more information on the input manager

145
00:06:25,474 --> 00:06:29,115
and Input.GetAxis see the lessons linked below.

146
00:06:30,029 --> 00:06:32,029
We will be using Input.GetAxis in a 

147
00:06:32,029 --> 00:06:34,462
very similar way to the code snippet.

148
00:06:34,962 --> 00:06:38,711
Let's return to our script and write our code.

149
00:06:38,711 --> 00:06:44,821
float moveHorizontal = Input.GetAxis ("horizontal")

150
00:06:45,602 --> 00:06:50,894
float moveVertical = Input.GetAxis ("vertical")

151
00:06:52,425 --> 00:06:56,178
This grabs the input from our player through the keyboard.

152
00:06:56,178 --> 00:06:59,838
The float variables moveHorizontal and moveVertical

153
00:06:59,838 --> 00:07:01,838
record the input from the horizontal

154
00:07:01,838 --> 00:07:06,342
and vertical axis, which are controlled by the keys on a keyboard.

155
00:07:06,342 --> 00:07:09,676
Our player game object uses a rigidbody

156
00:07:09,676 --> 00:07:12,301
and interacts with a physics engine.

157
00:07:12,301 --> 00:07:15,608
We will use this input to add forces to the rigidbody

158
00:07:15,608 --> 00:07:18,592
and move the player game object in the scene.

159
00:07:19,216 --> 00:07:21,216
To know more about how to apply forces to

160
00:07:21,216 --> 00:07:24,342
the rigidbody let's check the documentation.

161
00:07:24,980 --> 00:07:27,986
Type Rigidbody in to our script.

162
00:07:27,986 --> 00:07:30,695
Now select rigidbody and hold down

163
00:07:30,695 --> 00:07:32,500
the command key on the mac

164
00:07:32,500 --> 00:07:34,500
or the control key on the pc

165
00:07:34,500 --> 00:07:36,500
and type single quote.

166
00:07:36,877 --> 00:07:40,176
Again, this brings a page with a search term "rigidbody".

167
00:07:40,965 --> 00:07:42,965
We want to click on Rigidbody.

168
00:07:43,602 --> 00:07:45,602
This brings up the rigidbody page.

169
00:07:46,166 --> 00:07:49,224
If we want to apply force to our player game object

170
00:07:49,224 --> 00:07:51,224
we need to do something.

171
00:07:51,724 --> 00:07:53,974
So let's look at the functions available

172
00:07:53,974 --> 00:07:55,974
to the rigidbody class.

173
00:07:55,974 --> 00:07:57,974
We read the descriptions until we find

174
00:07:57,974 --> 00:07:59,974
the one we want, in this case

175
00:07:59,974 --> 00:08:01,974
let's choose AddForce.

176
00:08:02,654 --> 00:08:05,149
This adds a force to the rigidbody

177
00:08:05,149 --> 00:08:08,145
as a result the rigidbody will start moving.

178
00:08:08,894 --> 00:08:12,238
Click the link and we go to the page on AddForce.

179
00:08:12,238 --> 00:08:14,238
We can see the signature of the function

180
00:08:14,238 --> 00:08:16,045
at the top of the page.

181
00:08:16,045 --> 00:08:18,547
This signature tells us we need a vector3

182
00:08:18,547 --> 00:08:20,547
and an optional ForceMode to add

183
00:08:20,547 --> 00:08:22,286
force to our rigidbody.

184
00:08:23,369 --> 00:08:25,156
What is a vector3?

185
00:08:25,156 --> 00:08:27,992
For more detailed information on vector3

186
00:08:27,992 --> 00:08:29,992
Please see the information linked below.

187
00:08:30,655 --> 00:08:33,462
But in simple terms the vector3

188
00:08:33,462 --> 00:08:37,023
holds 3 decimal values in one container.

189
00:08:37,023 --> 00:08:39,411
This makes it easy for us to move around

190
00:08:39,411 --> 00:08:43,813
and use values for things like a force in 3D space,

191
00:08:43,813 --> 00:08:46,189
which requires a value for force on

192
00:08:46,189 --> 00:08:49,777
each of the X, Y and Z axis.

193
00:08:49,777 --> 00:08:52,735
Or to describe a rotation which would also require

194
00:08:52,735 --> 00:08:56,277
a value for each of the X, Y and Z axis.

195
00:08:57,845 --> 00:09:00,803
All of our documentation pages are linked together.

196
00:09:01,708 --> 00:09:04,539
If we were to click on Vector3, we would be taken to the

197
00:09:04,539 --> 00:09:06,539
documentation page for vector3.

198
00:09:07,613 --> 00:09:12,421
The same is true for ForceMode, MonoBehaviour and RigidBody.

199
00:09:14,182 --> 00:09:16,073
Below the description are snippets

200
00:09:16,073 --> 00:09:18,610
that show us how this function could be used.

201
00:09:19,346 --> 00:09:22,479
Note the second signature for AddForce below the first.

202
00:09:23,142 --> 00:09:25,142
The descriptions are the same.

203
00:09:25,721 --> 00:09:30,058
But in this case we can use AddForce with either a vector3

204
00:09:31,276 --> 00:09:34,581
or 3 float values for X, Y and Z.

205
00:09:36,306 --> 00:09:38,691
The next concept that we need to cover is

206
00:09:38,691 --> 00:09:41,619
how to get a hold of, or how to reference

207
00:09:41,619 --> 00:09:44,213
different components on our game object.

208
00:09:45,118 --> 00:09:48,667
We are writing a script called PlayerController.

209
00:09:48,667 --> 00:09:50,667
Which is attached as a script component

210
00:09:50,667 --> 00:09:52,571
to our Player game object.

211
00:09:52,921 --> 00:09:55,867
From this script we need to AddForce

212
00:09:55,867 --> 00:09:58,291
using the rigidbody component.

213
00:09:58,291 --> 00:10:01,394
We want to access that component from this script.

214
00:10:02,250 --> 00:10:05,057
There are several ways that we can do this.

215
00:10:05,057 --> 00:10:08,370
But in our case we will cover only one of the main ways

216
00:10:08,370 --> 00:10:11,504
of accessing another component on the same game object.

217
00:10:12,107 --> 00:10:16,163
We will create a variable to hold this reference in our script

218
00:10:16,163 --> 00:10:19,127
and we will set this reference in the Start function.

219
00:10:20,008 --> 00:10:22,008
We see this here in the code snippet.

220
00:10:22,659 --> 00:10:26,963
public Rigidbody rb creates a public variable

221
00:10:26,963 --> 00:10:30,561
with the type of rigidbody called rb

222
00:10:30,561 --> 00:10:34,061
to hold the reference to the rigidbody we want to access.

223
00:10:34,905 --> 00:10:38,553
In Start the reference is set by using the code

224
00:10:38,553 --> 00:10:40,854
GetComponent<Rigidbody>

225
00:10:41,723 --> 00:10:45,145
This will find and return a reference to the attached rigidbody,

226
00:10:45,145 --> 00:10:47,230
if there is one.

227
00:10:47,230 --> 00:10:49,230
All of the code in the start function is

228
00:10:49,230 --> 00:10:52,828
called on the first frame that the script is active.

229
00:10:52,828 --> 00:10:55,973
This is often the very first frame of the game.

230
00:10:57,384 --> 00:11:01,640
Finally in FixedUpdate the attached rigidbody component

231
00:11:01,640 --> 00:11:04,592
is accessed through the variable named rb

232
00:11:04,592 --> 00:11:07,894
with rb.AddForce.

233
00:11:08,570 --> 00:11:11,802
So in our script we need to write

234
00:11:12,779 --> 00:11:19,071
private Rigidbody rb to create the variable to hold the reference.

235
00:11:21,218 --> 00:11:24,852
And in a new start function we need to write

236
00:11:24,852 --> 00:11:29,169
rb=GetComponent<Rigidbody>

237
00:11:31,099 --> 00:11:32,603
In FixedUpdate

238
00:11:33,026 --> 00:11:36,693
let's use the simplest version of Rigidbody.AddForce.

239
00:11:36,693 --> 00:11:39,217
One that simply uses a vector3

240
00:11:39,217 --> 00:11:41,678
and we will leave the ForceMode at default

241
00:11:41,678 --> 00:11:43,678
by omitting it from our code.

242
00:11:45,202 --> 00:11:47,685
So in our script we need to type

243
00:11:47,685 --> 00:11:53,366
rb.AddForce and then some vector3 value.

244
00:11:55,385 --> 00:11:58,059
No how do we get our two float values

245
00:11:58,725 --> 00:12:00,407
in to a vector3 value?

246
00:12:01,073 --> 00:12:05,061
Let's create a new vector3 variable called Movement.

247
00:12:05,892 --> 00:12:08,489
This will be equal to a new vector3

248
00:12:08,489 --> 00:12:12,333
that is made up of an X, a Y and a Z.

249
00:12:12,833 --> 00:12:17,061
The X, Y, Z values will determine the direction of the force

250
00:12:17,061 --> 00:12:19,061
we will add to our ball.

251
00:12:19,589 --> 00:12:21,382
What is our X value?

252
00:12:21,882 --> 00:12:24,048
That would be moveHorizontal.

253
00:12:24,048 --> 00:12:26,927
With this our left and right keys will add force

254
00:12:26,927 --> 00:12:29,714
moving the ball to the left or right.

255
00:12:29,714 --> 00:12:31,879
What is our Y? 0.

256
00:12:31,879 --> 00:12:33,879
We don't want to move up at all.

257
00:12:34,931 --> 00:12:37,984
What is our Z value? That would be moveVertical.

258
00:12:41,204 --> 00:12:44,430
Now we use Movement, a vector3 value,

259
00:12:44,430 --> 00:12:46,430
in rb.AddForce

260
00:12:46,430 --> 00:12:50,487
as rb.AddForce(movement).

261
00:12:51,824 --> 00:12:54,845
Let's save this script and return to Unity.

262
00:12:55,718 --> 00:12:58,524
We check for errors in our footer or the console

263
00:12:58,524 --> 00:13:00,524
and there are none. Good.

264
00:13:01,411 --> 00:13:03,411
Let's test what we've written.

265
00:13:04,313 --> 00:13:08,091
Hit Play, and by using the keys setup on the input manager

266
00:13:08,091 --> 00:13:10,259
the ball moves in the scene.

267
00:13:11,037 --> 00:13:12,897
But it's very slow.

268
00:13:12,897 --> 00:13:15,922
This is too slow to be playable, but the basic concept

269
00:13:15,922 --> 00:13:17,922
works 100%.

270
00:13:19,472 --> 00:13:22,323
To stop testing leave play mode.

271
00:13:23,914 --> 00:13:26,917
Let's return to our code and create a tool

272
00:13:26,917 --> 00:13:29,930
that will give us control over the speed of the ball.

273
00:13:31,245 --> 00:13:34,975
We need to multiply our movement by some value.

274
00:13:34,975 --> 00:13:38,162
We could simply enter that value here on our script

275
00:13:38,162 --> 00:13:41,252
but if we ever needed to make any tweaks or changes

276
00:13:41,252 --> 00:13:43,657
we would have to return to our scripting editor

277
00:13:43,657 --> 00:13:46,994
and change the value in the script and then recompile.

278
00:13:46,994 --> 00:13:48,522
This takes time.

279
00:13:48,522 --> 00:13:52,397
The solution is to create a public variable in our script.

280
00:13:53,436 --> 00:13:55,436
Let's create a public float

281
00:13:56,267 --> 00:13:57,836
called Speed.

282
00:13:58,311 --> 00:14:00,656
By creating a public variable in our script

283
00:14:00,656 --> 00:14:02,922
this variable will show up in the Inspector

284
00:14:02,922 --> 00:14:04,922
as an editable property.

285
00:14:04,922 --> 00:14:07,524
When we use a public variable we can make

286
00:14:07,524 --> 00:14:10,053
all of our changes in the editor.

287
00:14:10,590 --> 00:14:14,288
We then multiply Movement by Speed.

288
00:14:14,288 --> 00:14:16,885
We now have control over our movement value

289
00:14:16,885 --> 00:14:18,733
from inside the editor.

290
00:14:19,370 --> 00:14:22,151
Let's save these changes and return to Unity.

291
00:14:23,200 --> 00:14:25,582
When we return to the editor we can see our

292
00:14:25,582 --> 00:14:28,831
PlayerController script now has a speed property.

293
00:14:29,129 --> 00:14:32,470
Let's set this property to 1000.

294
00:14:33,483 --> 00:14:35,483
Now enter play mode.

295
00:14:36,400 --> 00:14:38,128
Whoa! Way too fast!

296
00:14:38,597 --> 00:14:42,038
But changes are fast too. Exit play mode

297
00:14:42,038 --> 00:14:44,866
and change the value to 500.

298
00:14:45,909 --> 00:14:47,909
Hit Play.

299
00:14:49,224 --> 00:14:50,865
That's a little better.

300
00:14:51,517 --> 00:14:54,346
Congratulations, we can now move our character.

301
00:14:54,846 --> 00:14:58,543
In the next assignment we'll talk about how to move the camera.

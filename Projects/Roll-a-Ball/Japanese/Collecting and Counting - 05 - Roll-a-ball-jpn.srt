1
00:00:01,160 --> 00:00:03,601
We want to be able to pick up our collectable game

2
00:00:03,601 --> 00:00:06,578
objects when our player game object collides with them.

3
00:00:06,578 --> 00:00:08,578
To do this we need to detect our collisions

4
00:00:08,578 --> 00:00:10,578
between the player game object and

5
00:00:10,578 --> 00:00:12,578
the PickUp game objects.

6
00:00:12,578 --> 00:00:14,578
We will need to have these collisions

7
00:00:14,578 --> 00:00:16,578
trigger a new behaviour and we will need to

8
00:00:16,578 --> 00:00:18,578
test these collisions to make sure we are

9
00:00:18,578 --> 00:00:20,272
picking up the correct objects.

10
00:00:20,841 --> 00:00:23,256
The PickUp objects, the player's sphere,

11
00:00:23,256 --> 00:00:25,256
the ground plane and the walls all have

12
00:00:25,256 --> 00:00:28,153
colliders that inform us about collisions.

13
00:00:28,153 --> 00:00:30,153
If we didn't test our collisions to find out

14
00:00:30,153 --> 00:00:32,153
which objects we have collided with

15
00:00:32,153 --> 00:00:34,153
we could collect the wrong objects.

16
00:00:34,153 --> 00:00:36,750
We could collect the floor, or the wall.

17
00:00:36,750 --> 00:00:39,583
As a matter of face if we didn't test out collisions

18
00:00:39,583 --> 00:00:41,583
on the very first frame of the game we would

19
00:00:41,583 --> 00:00:43,583
come in contact with the ground plane

20
00:00:43,583 --> 00:00:45,194
and we would collect the ground plane

21
00:00:45,194 --> 00:00:47,771
and then we would fall in to the void of the scene space

22
00:00:47,771 --> 00:00:49,771
and the game would essentially be over.

23
00:00:51,003 --> 00:00:54,222
First, we don't need our player to remain inactive.

24
00:00:54,222 --> 00:00:56,222
so let's tick the Active checkbox and

25
00:00:56,222 --> 00:00:58,222
bring back our player.

26
00:00:59,122 --> 00:01:01,764
Next let's select the PlayerController script

27
00:01:01,764 --> 00:01:03,764
and open it for editing.

28
00:01:03,764 --> 00:01:05,764
Just a note, we could edit this

29
00:01:05,764 --> 00:01:07,160
script regardless of whether the game

30
00:01:07,160 --> 00:01:09,160
object is active or not.

31
00:01:10,019 --> 00:01:11,467
Now that we have the script open,

32
00:01:11,467 --> 00:01:13,260
what code are we going to write?

33
00:01:13,760 --> 00:01:15,760
We could write collider

34
00:01:15,760 --> 00:01:17,677
and then search the documentation using the

35
00:01:17,677 --> 00:01:19,233
hot key combination.

36
00:01:19,733 --> 00:01:22,757
But there is a different way that we could do this as well.

37
00:01:23,257 --> 00:01:25,257
Let's return to Unity and look at the details

38
00:01:25,257 --> 00:01:27,257
of our player game object.

39
00:01:28,406 --> 00:01:30,212
What we are interested in here is the

40
00:01:30,212 --> 00:01:32,212
sphere collider component.

41
00:01:32,988 --> 00:01:35,637
In the header of each component on the left

42
00:01:35,637 --> 00:01:37,637
is the component's turndown arrow,

43
00:01:37,637 --> 00:01:40,166
the icon, the Enable checkbox

44
00:01:40,166 --> 00:01:43,577
if it's available, and the type of the component.

45
00:01:44,920 --> 00:01:48,053
On the right is the context sensitive gear gizmo

46
00:01:48,053 --> 00:01:51,226
and an icon of a little book with a question mark.

47
00:01:51,654 --> 00:01:53,114
Now this is what we need.

48
00:01:53,114 --> 00:01:55,976
This is the quick link to the component reference.

49
00:01:56,404 --> 00:01:58,830
If we select this icon we are taken

50
00:01:58,830 --> 00:02:00,830
not to the scripting reference but to that

51
00:02:00,830 --> 00:02:02,830
component reference.

52
00:02:03,523 --> 00:02:05,523
We would read this document to find out more

53
00:02:05,523 --> 00:02:07,523
about how to use this component in the context

54
00:02:07,523 --> 00:02:09,025
of the editor.

55
00:02:09,025 --> 00:02:11,482
We, however, want to find out how to

56
00:02:11,482 --> 00:02:13,482
script to this component's class.

57
00:02:13,982 --> 00:02:16,508
To do this we simply switch to scripting

58
00:02:17,008 --> 00:02:19,008
and we are taken to the scripting reference

59
00:02:19,008 --> 00:02:20,235
for the sphere collider.

60
00:02:21,025 --> 00:02:24,084
We want to detect and test our collisions.

61
00:02:24,084 --> 00:02:26,084
For this project we are going to use

62
00:02:26,084 --> 00:02:28,084
OnTriggerEnter.

63
00:02:28,777 --> 00:02:32,027
Just imagine if we were, say, a daring plumber

64
00:02:32,027 --> 00:02:35,128
and we jumped up to collect a perfect arch of coins

65
00:02:35,128 --> 00:02:37,128
and bounced off the very first one as we

66
00:02:37,128 --> 00:02:39,128
collected it and fell back to the ground.

67
00:02:39,628 --> 00:02:41,628
Not very elegant.

68
00:02:42,128 --> 00:02:44,128
This code will give us the ability to detect

69
00:02:44,128 --> 00:02:46,128
the contact between our player game object

70
00:02:46,128 --> 00:02:48,366
and our PickUp game objects

71
00:02:48,366 --> 00:02:51,164
without actually creating a physical collision.

72
00:02:51,664 --> 00:02:53,664
The code example however is not exactly

73
00:02:53,664 --> 00:02:55,553
what we're looking for.

74
00:02:55,553 --> 00:02:58,239
But that's okay, we can change that.

75
00:02:58,239 --> 00:03:00,417
First, let's copy the code

76
00:03:00,417 --> 00:03:03,136
and then let's return to our scripting application.

77
00:03:03,539 --> 00:03:06,458
Now that we're back in scripting let's paste the code.

78
00:03:07,234 --> 00:03:09,456
As we have copied this code from a webpage

79
00:03:09,456 --> 00:03:11,316
let's correct the indents.

80
00:03:11,316 --> 00:03:12,835
In this case I'm going to make sure the

81
00:03:12,835 --> 00:03:14,835
indents are tabs and that all of the tabs are

82
00:03:14,835 --> 00:03:16,835
correctly aligned.

83
00:03:16,835 --> 00:03:18,835
Next, let's look at this code.

84
00:03:18,835 --> 00:03:21,845
We are using the function OnTriggerEnter.

85
00:03:21,845 --> 00:03:23,845
OnTriggerEnter will be called by Unity

86
00:03:23,845 --> 00:03:25,845
when our player game object first touches

87
00:03:25,845 --> 00:03:27,523
a trigger collider.

88
00:03:28,023 --> 00:03:29,844
We are given as an argument

89
00:03:29,844 --> 00:03:32,814
a reference to the trigger collider that we have touched.

90
00:03:33,314 --> 00:03:35,618
This is the collider called Other.

91
00:03:36,118 --> 00:03:38,118
This reference gives us a way to get a 

92
00:03:38,118 --> 00:03:40,118
hold of the colliders that we touch.

93
00:03:40,618 --> 00:03:42,618
With this code, when we touch another trigger

94
00:03:42,618 --> 00:03:45,352
collider we will destroy the game object

95
00:03:45,352 --> 00:03:47,352
that the trigger collider is attached to

96
00:03:47,352 --> 00:03:50,273
through the reference other.gameObject.

97
00:03:50,897 --> 00:03:53,939
By destroying that game object the game object,

98
00:03:53,939 --> 00:03:55,939
all of it's components and all of it's

99
00:03:55,939 --> 00:03:57,939
children and their components are removed

100
00:03:57,939 --> 00:03:59,939
from the scene.

101
00:03:59,939 --> 00:04:01,939
For the sake of example in this assignment

102
00:04:01,939 --> 00:04:03,939
we won't destroy the other game object

103
00:04:03,939 --> 00:04:05,633
we will deactivate it.

104
00:04:05,633 --> 00:04:07,633
Just like we deactivate the player object

105
00:04:07,633 --> 00:04:10,399
when we were creating our PickUp objects.

106
00:04:11,148 --> 00:04:14,210
First, let's remove the Destroy(other.gameobject)

107
00:04:14,210 --> 00:04:16,210
code from the function.

108
00:04:16,210 --> 00:04:18,210
But let's paste it down below our script

109
00:04:18,210 --> 00:04:20,700
as a palette to work with.

110
00:04:22,119 --> 00:04:24,835
How will we deactivate our PickUp objects?

111
00:04:25,265 --> 00:04:27,041
Well what clues do we have?

112
00:04:27,613 --> 00:04:29,613
We can address the other collider's game 

113
00:04:29,613 --> 00:04:32,320
object through other.gameObject.

114
00:04:32,320 --> 00:04:34,570
We can see this here in the sample code.

115
00:04:35,070 --> 00:04:37,070
And we want to test the other game object

116
00:04:37,070 --> 00:04:39,306
and if it's a PickUp object we want to deactivate

117
00:04:39,306 --> 00:04:40,894
that game object.

118
00:04:41,599 --> 00:04:43,599
So let's look up GameObject

119
00:04:43,599 --> 00:04:46,385
with our hot key combination and see what we can find.

120
00:04:46,802 --> 00:04:49,506
Now we have the page on GameObject.

121
00:04:49,506 --> 00:04:52,294
There are two important items here that we want.

122
00:04:52,294 --> 00:04:54,142
They are tag,

123
00:04:54,142 --> 00:04:56,489
tag allows us to identify the game object

124
00:04:56,489 --> 00:04:58,489
by a tag value.

125
00:05:00,135 --> 00:05:01,942
And SetActive.

126
00:05:01,942 --> 00:05:05,261
This is how we activate or deactivate a game object.

127
00:05:07,918 --> 00:05:10,210
Tag allows us to identify the game object

128
00:05:10,210 --> 00:05:12,020
by a tag value

129
00:05:12,020 --> 00:05:14,020
and we must declare our tags in the tag

130
00:05:14,020 --> 00:05:15,741
manager before using them.

131
00:05:16,490 --> 00:05:18,490
Let's copy the sample code and

132
00:05:18,490 --> 00:05:21,500
yes it's okay to use Unity's Javascript in this case

133
00:05:21,500 --> 00:05:23,884
as it's the same as the C# code,

134
00:05:24,472 --> 00:05:26,472
and paste it in to our working pallet.

135
00:05:27,089 --> 00:05:29,660
Now GameObject.SetActive,

136
00:05:29,660 --> 00:05:32,642
this is how we activate or deactivate a game object.

137
00:05:33,142 --> 00:05:35,599
In our case, just like the code snippet,

138
00:05:35,599 --> 00:05:39,223
we will call GameObject.SetActive (false)

139
00:05:39,223 --> 00:05:41,631
to deactivate our PickUp game objects.

140
00:05:42,131 --> 00:05:45,531
Let's copy this code and returning to our script editor

141
00:05:45,531 --> 00:05:47,531
paste it in to our palette as well.

142
00:05:48,677 --> 00:05:51,178
I feel we have enough pieces to write our code

143
00:05:51,678 --> 00:05:56,662
so let's write if(other.gameObject.tag

144
00:05:56,662 --> 00:06:00,036
is the same as, and that's the same as two equals signs,

145
00:06:00,536 --> 00:06:02,772
the string value of PickUp

146
00:06:03,344 --> 00:06:06,915
and we will have to define this tag in Unity later.

147
00:06:08,838 --> 00:06:14,145
other.gameObject.SetActive(false)

148
00:06:14,645 --> 00:06:16,359
Now this code will be called every time

149
00:06:16,359 --> 00:06:18,359
we touch a trigger collider.

150
00:06:18,859 --> 00:06:21,532
We are given a reference to the collider we touch,

151
00:06:21,532 --> 00:06:23,104
we test it's tag,

152
00:06:23,104 --> 00:06:25,606
and if the tag is the same as the string value

153
00:06:25,606 --> 00:06:28,527
PickUp we will take the other game object

154
00:06:28,527 --> 00:06:31,083
and we will call SetActive false,

155
00:06:31,083 --> 00:06:33,333
which will deactivate that game object.

156
00:06:34,214 --> 00:06:36,801
Now we don't need this code we've been saving anymore

157
00:06:36,801 --> 00:06:39,409
and keeping it will only confuse the compiler

158
00:06:39,409 --> 00:06:40,689
so we can delete it.

159
00:06:40,689 --> 00:06:42,689
Let's save this script and return to Unity

160
00:06:42,689 --> 00:06:44,305
and check for errors.

161
00:06:44,305 --> 00:06:46,685
The first thing we need to do it set up the tag value

162
00:06:46,685 --> 00:06:48,685
for the PickUp objects.

163
00:06:48,685 --> 00:06:51,380
Select the prefab asset for the PickUp object.

164
00:06:51,761 --> 00:06:53,553
When we look at the tag list

165
00:06:53,553 --> 00:06:56,182
we don't see any tag called PickUp

166
00:06:56,182 --> 00:06:57,887
so we need to add one.

167
00:06:57,887 --> 00:06:59,887
Select Add Tag.

168
00:07:01,458 --> 00:07:03,458
This brings up the Tag Manager.

169
00:07:03,458 --> 00:07:06,225
Here we can customise tags and layers.

170
00:07:06,725 --> 00:07:08,725
We will turn down the Tags list

171
00:07:08,725 --> 00:07:10,725
and note that this list is empty.

172
00:07:10,725 --> 00:07:14,078
In the first empty element, in our case element 0,

173
00:07:14,078 --> 00:07:16,503
type PickUp, and this is case sensitive

174
00:07:16,503 --> 00:07:17,985
and needs to be exactly the same string

175
00:07:17,985 --> 00:07:19,985
that we have in our script.

176
00:07:19,985 --> 00:07:23,029
And then type return or enter to confirm this tag.

177
00:07:23,426 --> 00:07:25,426
When we look back at the prefab asset

178
00:07:25,426 --> 00:07:28,222
note that the asset is still untagged.

179
00:07:28,222 --> 00:07:31,108
By selecting Add Tag we changed our focus

180
00:07:31,108 --> 00:07:33,795
from the prefab asset to the Tag Manager

181
00:07:33,795 --> 00:07:36,335
and in the Tag Manager we created our tag.

182
00:07:36,674 --> 00:07:38,190
Now we need to apply that tag

183
00:07:38,190 --> 00:07:39,627
to the prefab asset.

184
00:07:40,127 --> 00:07:42,127
Select the Tag drop down again

185
00:07:42,127 --> 00:07:45,092
and see how we now have PickUp in the list.

186
00:07:45,092 --> 00:07:47,092
Select this tag from the list and the asset

187
00:07:47,092 --> 00:07:49,092
that is now tagged PickUp.

188
00:07:49,092 --> 00:07:51,535
And with the power of prefabs

189
00:07:51,535 --> 00:07:54,453
all of the instances are now tagged PickUp as well.

190
00:07:57,036 --> 00:07:58,904
Now let's test our game.

191
00:07:58,904 --> 00:08:00,904
Save the scene and enter play mode.

192
00:08:03,194 --> 00:08:06,220
Hmm, okay, our tag is set to PickUp

193
00:08:06,220 --> 00:08:08,220
but we are still bouncing off the PickUp cubes

194
00:08:08,220 --> 00:08:10,838
just like we are bouncing off the walls.

195
00:08:10,838 --> 00:08:12,838
So let's exit play mode.

196
00:08:13,470 --> 00:08:15,470
Before we discuss why we are bouncing off

197
00:08:15,470 --> 00:08:17,470
the PickUp cubes rather than picking them up

198
00:08:17,470 --> 00:08:18,924
we need to have a brief discussion about

199
00:08:18,924 --> 00:08:20,556
Unity's physics system.

200
00:08:21,292 --> 00:08:23,880
I'm going to enter play mode for this discussion

201
00:08:29,266 --> 00:08:31,922
Let's look at one of our cubes and our player.

202
00:08:32,422 --> 00:08:34,422
As an aside we can select two or

203
00:08:34,422 --> 00:08:36,583
more game objects at the same time

204
00:08:36,583 --> 00:08:38,394
and inspect them all.

205
00:08:38,394 --> 00:08:40,394
We do this by holding down the command key

206
00:08:40,394 --> 00:08:42,861
on the mac or the control key on the PC,

207
00:08:42,861 --> 00:08:44,743
and selecting the game objects.

208
00:08:45,243 --> 00:08:47,624
When we select multiple game objects

209
00:08:47,624 --> 00:08:49,624
note how the inspector changes to show

210
00:08:49,624 --> 00:08:51,521
the common components and property

211
00:08:51,521 --> 00:08:53,886
values of the selected game objects.

212
00:08:54,386 --> 00:08:57,381
The inspector also allows for multi-object editing.

213
00:08:57,381 --> 00:08:59,381
Using multi-object editing I'm going to

214
00:08:59,381 --> 00:09:01,381
disable the mesh renderer on both the 

215
00:09:01,381 --> 00:09:04,470
player's sphere and the selected cube with a single click.

216
00:09:05,205 --> 00:09:07,513
This leaves us with the two green outlines

217
00:09:07,513 --> 00:09:10,691
of the collider volumes for these two objects.

218
00:09:11,396 --> 00:09:14,292
How do collisions work in Unity's physics engine?

219
00:09:14,953 --> 00:09:16,953
The physics engine does not allow two collider

220
00:09:16,953 --> 00:09:18,718
volumes to overlap.

221
00:09:18,718 --> 00:09:20,718
When the physics engine detects that any two

222
00:09:20,718 --> 00:09:23,676
or more colliders will overlap that frame

223
00:09:23,676 --> 00:09:25,676
the physics engine will look at the objects and

224
00:09:25,676 --> 00:09:28,340
analyse their speed and rotation and shape

225
00:09:28,340 --> 00:09:30,340
and calculate a collision.

226
00:09:30,340 --> 00:09:32,340
One of the major factors in this calculation

227
00:09:32,340 --> 00:09:34,340
is whether the colliders are static

228
00:09:34,340 --> 00:09:35,944
or dynamic.

229
00:09:36,444 --> 00:09:38,724
Static colliders are usually non-moving

230
00:09:38,724 --> 00:09:41,496
parts of your scene, like the walls, the floor,

231
00:09:41,496 --> 00:09:43,333
or the fountain in the courtyard.

232
00:09:43,730 --> 00:09:46,333
Dynamic colliders are things that move

233
00:09:46,333 --> 00:09:48,729
like the player's sphere or a car.

234
00:09:49,185 --> 00:09:51,185
When calculating a collision the static geometry

235
00:09:51,185 --> 00:09:53,449
will not be affected by the collision.

236
00:09:53,949 --> 00:09:55,949
But the dynamic objects will be.

237
00:09:56,449 --> 00:09:58,449
In our case the player's sphere is dynamic,

238
00:09:58,449 --> 00:10:00,449
or moving geometry, and it is bouncing

239
00:10:00,449 --> 00:10:02,934
off the static geometry of the cubes.

240
00:10:02,934 --> 00:10:04,934
Just as it bounces off the static geometry

241
00:10:04,934 --> 00:10:06,934
of the walls.

242
00:10:07,434 --> 00:10:09,434
The physics engine can however allow the

243
00:10:09,434 --> 00:10:12,512
penetration or overlap of collider volumes.

244
00:10:12,512 --> 00:10:14,512
When it does this the physics engine

245
00:10:14,512 --> 00:10:16,512
still calculates the collider volumes and

246
00:10:16,512 --> 00:10:18,572
keeps track of the collider overlap,

247
00:10:19,147 --> 00:10:21,147
but it doesn't physically act on the overlapping

248
00:10:21,147 --> 00:10:24,047
objects, it doesn't cause a collision.

249
00:10:24,752 --> 00:10:26,752
We do this by making our colliders in to

250
00:10:26,752 --> 00:10:29,094
triggers, or trigger colliders.

251
00:10:29,751 --> 00:10:31,489
When we make our colliders in to a trigger,

252
00:10:31,489 --> 00:10:33,489
or trigger collider, we can detect

253
00:10:33,489 --> 00:10:35,489
the contact with that trigger through the

254
00:10:35,489 --> 00:10:37,489
OnTrigger event messages.

255
00:10:37,989 --> 00:10:39,989
When a collider is a trigger you can do

256
00:10:39,989 --> 00:10:41,989
clever things like place a trigger in the middle

257
00:10:41,989 --> 00:10:44,711
of a doorway in, say, an adventure game,

258
00:10:44,711 --> 00:10:46,711
and when the player enters the trigger

259
00:10:46,711 --> 00:10:48,711
the mini-map updates and a message plays

260
00:10:48,711 --> 00:10:50,711
'you have discovered this room'.

261
00:10:51,358 --> 00:10:53,358
Or every time your player walks around

262
00:10:53,358 --> 00:10:55,815
that corner spiders drop from the ceiling

263
00:10:55,815 --> 00:10:57,815
because the player has walked through a trigger.

264
00:10:58,315 --> 00:11:00,787
For more information on OnCollision and on

265
00:11:00,787 --> 00:11:03,448
trigger messages see the lessons linked below.

266
00:11:04,021 --> 00:11:06,021
We are using OnTriggerEnter in our code

267
00:11:06,021 --> 00:11:08,316
rather than OnCollisionEnter

268
00:11:08,316 --> 00:11:10,316
so we need to change our collider volumes

269
00:11:10,316 --> 00:11:12,594
in to trigger volumes.

270
00:11:12,594 --> 00:11:15,212
To do this we must be out of play mode.

271
00:11:17,385 --> 00:11:19,385
Let's select the prefab asset and look at

272
00:11:19,385 --> 00:11:21,210
the box collider component.

273
00:11:21,710 --> 00:11:23,710
Here we select Is Trigger

274
00:11:23,710 --> 00:11:25,710
and again the power of prefabs

275
00:11:25,710 --> 00:11:28,963
all of our PickUp objects are now using trigger colliders.

276
00:11:29,463 --> 00:11:32,811
Let's save our scene, enter play mode and test.

277
00:11:32,811 --> 00:11:34,811
And as our player enters the trigger

278
00:11:34,811 --> 00:11:36,811
we pickup the objects.

279
00:11:36,811 --> 00:11:38,162
Excellent.

280
00:11:39,810 --> 00:11:41,810
Let's exit play mode.

281
00:11:43,088 --> 00:11:44,499
Everything looks great. 

282
00:11:44,923 --> 00:11:46,672
We only have one issue.

283
00:11:47,113 --> 00:11:49,423
We have made one small mistake,

284
00:11:49,423 --> 00:11:51,334
and this is related to how Unity

285
00:11:51,334 --> 00:11:52,835
optimises it's physics.

286
00:11:53,392 --> 00:11:55,392
As a performance optimisation Unity

287
00:11:55,392 --> 00:11:57,392
calculates all the volumes

288
00:11:57,392 --> 00:11:59,791
of all the static colliders in a scene

289
00:11:59,791 --> 00:12:02,047
and holds this information in a cache.

290
00:12:02,547 --> 00:12:04,547
This makes sense as static colliders

291
00:12:04,547 --> 00:12:07,326
shouldn't move, and this saves recalculating this

292
00:12:07,326 --> 00:12:09,326
information every frame.

293
00:12:09,826 --> 00:12:13,118
Where we have made our mistake is by rotating our cubes.

294
00:12:13,118 --> 00:12:16,399
Any time we move, rotate our scale a static collider

295
00:12:16,399 --> 00:12:19,641
Unity will recalculate all the static colliders again

296
00:12:19,641 --> 00:12:21,996
and update the static collider cache.

297
00:12:21,996 --> 00:12:24,883
To recalculate the cache takes resources.

298
00:12:25,574 --> 00:12:27,854
We can move, rotate or scale dynamic

299
00:12:27,854 --> 00:12:30,180
colliders as often as we want and Unity won't

300
00:12:30,180 --> 00:12:32,062
recache any collider volumes.

301
00:12:32,562 --> 00:12:34,971
Unity expects us to move colliders.

302
00:12:34,971 --> 00:12:36,971
We simply need to indicate to Unity which

303
00:12:36,971 --> 00:12:39,803
colliders are dynamic before we move them.

304
00:12:39,803 --> 00:12:42,810
We do this by using the rigid body component.

305
00:12:43,163 --> 00:12:45,075
Any game object with a collider

306
00:12:45,075 --> 00:12:47,866
and a rigid body is considered dynamic.

307
00:12:48,527 --> 00:12:50,746
Any game object with a collider attached

308
00:12:50,746 --> 00:12:54,273
but no physics rigid body is expected to be static.

309
00:12:55,020 --> 00:12:56,830
Currently our PickUp game objects have a

310
00:12:56,830 --> 00:12:59,735
box collider but no rigid body.

311
00:12:59,735 --> 00:13:01,735
So Unity is recalculating our static

312
00:13:01,735 --> 00:13:03,735
collider cache every frame.

313
00:13:04,499 --> 00:13:06,776
The solution is to add a rigid body

314
00:13:06,776 --> 00:13:08,586
to the PickUp objects.

315
00:13:08,586 --> 00:13:11,465
This will move the cubes from being static colliders

316
00:13:11,465 --> 00:13:13,465
to being dynamic colliders.

317
00:13:13,465 --> 00:13:15,465
Let's save and play.

318
00:13:16,273 --> 00:13:18,748
And our cubes fall through the floor.

319
00:13:18,748 --> 00:13:21,653
Gravity pulls them down, and as they are triggers

320
00:13:21,653 --> 00:13:23,329
they don't collide with the floor.

321
00:13:23,814 --> 00:13:25,592
Let's exit play mode.

322
00:13:26,165 --> 00:13:28,769
If we look at the rigid body component

323
00:13:28,769 --> 00:13:31,352
we could simply disable Use Gravity,

324
00:13:31,352 --> 00:13:34,212
which would prevent the cubes from being pulled downwards.

325
00:13:34,212 --> 00:13:36,731
This is only a partial solution however.

326
00:13:37,231 --> 00:13:39,423
If we did this, even though our cubes

327
00:13:39,423 --> 00:13:41,423
would not respond to gravity they would still

328
00:13:41,423 --> 00:13:43,306
respond to physics forces

329
00:13:43,747 --> 00:13:45,747
There is a better solution.

330
00:13:45,747 --> 00:13:48,600
And that is to select Is Kinematic.

331
00:13:49,408 --> 00:13:52,525
When we do this we set this rigid body component to be

332
00:13:52,525 --> 00:13:54,525
a kinematic rigid body.

333
00:13:55,025 --> 00:13:57,025
A kinematic rigid body will not react

334
00:13:57,025 --> 00:13:59,865
to physics forces and it can be animated

335
00:13:59,865 --> 00:14:01,865
and moved by it's transform.

336
00:14:02,365 --> 00:14:05,393
This is great for everything from objects with colliders

337
00:14:05,393 --> 00:14:07,393
like elevators and moving platforms

338
00:14:07,393 --> 00:14:10,038
to objects with triggers, like our collectables

339
00:14:10,038 --> 00:14:13,088
that need to be animated or moved by their transform.

340
00:14:13,088 --> 00:14:15,088
For more information on the rigid body

341
00:14:15,088 --> 00:14:18,722
and Is Kinematic see the lessons linked below.

342
00:14:19,281 --> 00:14:22,172
Let's save our scene and enter play mode to test.

343
00:14:22,936 --> 00:14:26,284
Now our behaviour is identical and performant.

344
00:14:27,239 --> 00:14:29,503
So, static colliders shouldn't move,

345
00:14:29,503 --> 00:14:31,134
like walls and floors.

346
00:14:31,134 --> 00:14:33,134
Dynamic colliders can move,

347
00:14:33,134 --> 00:14:35,459
and have a rigid body attached.

348
00:14:35,459 --> 00:14:38,752
Standard rigid bodies are moved using physics forces.

349
00:14:38,752 --> 00:14:40,752
Kinematic rigid bodies are moved using

350
00:14:40,752 --> 00:14:42,529
their transform.

351
00:14:44,173 --> 00:14:46,173
In the next assignment we will count our

352
00:14:46,173 --> 00:14:48,173
collectable object and make a simple UI

353
00:14:48,173 --> 00:14:50,569
to display our score and messages.

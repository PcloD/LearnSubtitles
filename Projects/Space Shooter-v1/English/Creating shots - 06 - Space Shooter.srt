1
00:00:01,354 --> 00:00:03,205
Our player can now move their ship

2
00:00:03,205 --> 00:00:05,205
around the game area and it can't

3
00:00:05,205 --> 00:00:07,494
leave the bounds of the game.

4
00:00:07,494 --> 00:00:09,302
So now let's create shots

5
00:00:09,302 --> 00:00:11,027
for our player to shoot.

6
00:00:11,719 --> 00:00:13,719
First let's begin by deactivating

7
00:00:13,719 --> 00:00:15,397
our player game object.

8
00:00:15,397 --> 00:00:17,814
This assignment won't involve the players ship

9
00:00:17,814 --> 00:00:19,814
and again it will simply be in the way.

10
00:00:20,880 --> 00:00:23,949
Next create a new empty game object

11
00:00:24,436 --> 00:00:26,909
Use shift+command+N on the Mac

12
00:00:26,909 --> 00:00:29,623
and shift+control+N on Windows.

13
00:00:31,131 --> 00:00:33,927
Rename the new empty game object Bolt.

14
00:00:35,311 --> 00:00:37,854
This will be a parent game object for our shot.

15
00:00:38,699 --> 00:00:40,560
We are going to separate the game logic

16
00:00:40,560 --> 00:00:42,560
from our visual effect of the shot.

17
00:00:43,350 --> 00:00:45,350
This will allow us to easily make new

18
00:00:45,350 --> 00:00:47,640
weapons with different visual effects

19
00:00:47,640 --> 00:00:49,792
by reusing the parent game object with the

20
00:00:49,792 --> 00:00:52,935
logic and replacing the visual effect layer

21
00:00:54,623 --> 00:00:56,497
Reset the game object's transform to make

22
00:00:56,497 --> 00:00:58,497
sure it is at origin.

23
00:00:59,522 --> 00:01:01,522
Now create a quad to hold our

24
00:01:01,522 --> 00:01:03,522
visual effect image, just like we did

25
00:01:03,522 --> 00:01:05,008
for our background.

26
00:01:05,646 --> 00:01:07,646
Rename the quad VFX

27
00:01:08,422 --> 00:01:10,767
and reset the quad's transform.

28
00:01:12,207 --> 00:01:14,523
Now add the VFX game object

29
00:01:14,523 --> 00:01:16,523
as a child of Bolt.

30
00:01:19,813 --> 00:01:23,065
If we switch to the Scene view we can see the quad

31
00:01:23,065 --> 00:01:25,386
just like the one we used for the background

32
00:01:25,386 --> 00:01:27,386
is oriented in a way we can't see

33
00:01:27,386 --> 00:01:29,386
with our game view camera.

34
00:01:29,886 --> 00:01:34,273
Change the transform rotation X to 90.

35
00:01:34,273 --> 00:01:36,273
This will rotate the quad to face upwards

36
00:01:36,273 --> 00:01:38,273
towards the game view camera.

37
00:01:39,162 --> 00:01:41,162
See, it's perfectly face-on to

38
00:01:41,162 --> 00:01:43,162
camera in the game view.

39
00:01:45,289 --> 00:01:48,220
Let's make this shot look like a laser bolt.

40
00:01:48,220 --> 00:01:50,003
So next we need to find artwork

41
00:01:50,003 --> 00:01:51,586
for our laser bolt.

42
00:01:52,086 --> 00:01:54,014
Open the Textures folder.

43
00:01:54,014 --> 00:01:58,243
In the Textures folder find  fx_laser_orange.

44
00:01:59,247 --> 00:02:01,466
When we created the background

45
00:02:01,466 --> 00:02:03,466
we simply dragged the nebula texture

46
00:02:03,466 --> 00:02:05,466
on to the background quad and allowed

47
00:02:05,466 --> 00:02:08,346
Unity to make the material for us.

48
00:02:08,702 --> 00:02:10,702
This time let's not drag the texture

49
00:02:10,702 --> 00:02:12,702
on to the quad, but let's create

50
00:02:12,702 --> 00:02:15,225
and assign the material ourselves.

51
00:02:16,625 --> 00:02:18,374
We want to create a new material

52
00:02:18,374 --> 00:02:20,080
in the Materials folder.

53
00:02:20,584 --> 00:02:22,430
When we create a new asset

54
00:02:22,430 --> 00:02:24,346
Unity will create that asset in the

55
00:02:24,346 --> 00:02:26,346
folder we have focused or in the

56
00:02:26,346 --> 00:02:30,007
same folder as the asset we are currently inspecting.

57
00:02:30,507 --> 00:02:32,507
Select the Materials folder in the

58
00:02:32,507 --> 00:02:34,507
root level of Assets.

59
00:02:35,504 --> 00:02:37,504
With the Materials folder selected click on

60
00:02:37,504 --> 00:02:39,935
the Create menu in the Project view

61
00:02:39,935 --> 00:02:42,101
and select Material.

62
00:02:42,101 --> 00:02:44,019
This creates a new material

63
00:02:44,019 --> 00:02:45,758
in the Materials folder.

64
00:02:46,201 --> 00:02:49,034
The new material is ready for a new name.

65
00:02:49,034 --> 00:02:53,624
So let's rename the material fx_bolt_orange.

66
00:02:54,400 --> 00:02:56,373
We want to add our texture

67
00:02:56,373 --> 00:03:00,142
fx_laser_orange to our material, but how?

68
00:03:01,056 --> 00:03:03,964
If we can't inspect the details of a material

69
00:03:03,964 --> 00:03:05,964
it's inspector may be collapsed.

70
00:03:06,630 --> 00:03:08,630
Click on the Materials header to expand the

71
00:03:08,630 --> 00:03:11,015
Materials Inspector panel if it's closed.

72
00:03:11,641 --> 00:03:13,503
We can now see all of the fields

73
00:03:13,503 --> 00:03:15,503
for this material.

74
00:03:16,293 --> 00:03:18,293
There are 2 ways we can associate

75
00:03:18,293 --> 00:03:20,044
a texture with this material.

76
00:03:20,544 --> 00:03:22,724
The first is, in the Materials

77
00:03:22,724 --> 00:03:26,388
main texture field we can click on Select

78
00:03:26,388 --> 00:03:28,722
and this will bring up an Asset Picker.

79
00:03:29,233 --> 00:03:31,386
At the top of the asset picker is a search

80
00:03:31,386 --> 00:03:34,163
field to refine the contents of the picker.

81
00:03:34,163 --> 00:03:36,163
Otherwise we will get every possible object

82
00:03:36,163 --> 00:03:38,936
in the project that can go in to this field.

83
00:03:40,113 --> 00:03:42,113
To associate a texture we simply

84
00:03:42,113 --> 00:03:44,389
click on the texture we want.

85
00:03:44,389 --> 00:03:47,681
In this case fx_laser_orange.

86
00:03:48,803 --> 00:03:50,803
If there is already an existing texture

87
00:03:50,803 --> 00:03:53,446
associated with this field, and we want to remove it

88
00:03:53,446 --> 00:03:55,446
we can select None.

89
00:03:56,402 --> 00:03:58,402
The other way is to simply drag and drop

90
00:03:58,402 --> 00:04:00,402
a texture in to this field.

91
00:04:00,792 --> 00:04:03,998
Select Textures in the root of Assets

92
00:04:03,998 --> 00:04:07,221
and drag fx_laser_orange on to our

93
00:04:07,221 --> 00:04:09,748
fx_bolt_orange material.

94
00:04:09,748 --> 00:04:12,816
and drop it in to the main texture field.

95
00:04:13,426 --> 00:04:16,549
Both ways associate a texture to a material.

96
00:04:17,146 --> 00:04:19,840
If we look below the material in the Inspector

97
00:04:19,840 --> 00:04:22,367
we see a preview window where we can get

98
00:04:22,367 --> 00:04:24,083
a sense of how this material will

99
00:04:24,083 --> 00:04:26,083
behave in our scene.

100
00:04:26,776 --> 00:04:28,887
Now to associate the material

101
00:04:28,887 --> 00:04:30,887
with the VFX quad

102
00:04:30,887 --> 00:04:34,045
we can simply drag the material on to the quad.

103
00:04:36,009 --> 00:04:38,857
Now if we look at the VFX game object

104
00:04:38,857 --> 00:04:41,368
and inspect the mesh renderer

105
00:04:41,368 --> 00:04:44,257
we can see the fx_bolt_orange material

106
00:04:44,257 --> 00:04:47,693
has been added to the top slot of the materials array.

107
00:04:48,442 --> 00:04:50,442
Another way of associating the material

108
00:04:50,442 --> 00:04:52,442
with this game object is to populate

109
00:04:52,442 --> 00:04:55,952
these slots in the materials array by hand.

110
00:04:55,952 --> 00:04:57,952
We can simply drag and drop a material

111
00:04:57,952 --> 00:04:59,952
in to the slots we need.

112
00:05:01,433 --> 00:05:03,433
If we swap to the game view however our

113
00:05:03,433 --> 00:05:05,790
laser bolt looks like a dull streak

114
00:05:05,790 --> 00:05:07,790
in the middle of a big black square.

115
00:05:08,483 --> 00:05:10,007
Not very flashy.

116
00:05:10,555 --> 00:05:12,555
What we need to do in this case is change

117
00:05:12,555 --> 00:05:14,555
the shader we are using.

118
00:05:15,055 --> 00:05:17,580
Just like when we created our background

119
00:05:17,580 --> 00:05:19,580
diffuse is not the best shader

120
00:05:19,580 --> 00:05:21,358
choice for our weapon.

121
00:05:21,358 --> 00:05:24,024
For our weapon we want the bright parts to

122
00:05:24,024 --> 00:05:26,024
add on top of the scene and the black parts

123
00:05:26,024 --> 00:05:27,647
to vanish.

124
00:05:27,647 --> 00:05:29,925
When looking at the VFX game object

125
00:05:29,925 --> 00:05:31,925
we can change the shader on the material.

126
00:05:32,674 --> 00:05:35,430
Choose Particles - Additive.

127
00:05:36,013 --> 00:05:38,013
With this shader black has a value

128
00:05:38,013 --> 00:05:41,447
of 0 and will add nothing to the scene.

129
00:05:41,447 --> 00:05:44,328
And white has a value of 255

130
00:05:44,328 --> 00:05:46,328
on all channels and will add

131
00:05:46,328 --> 00:05:48,090
full white to the scene.

132
00:05:48,662 --> 00:05:50,326
All of the other colours will be added

133
00:05:50,326 --> 00:05:52,326
on top of the existing background.

134
00:05:53,240 --> 00:05:56,539
This will give us a strong, hot laser bolt.

135
00:05:57,688 --> 00:06:00,992
We can also try mobile particles additive.

136
00:06:02,984 --> 00:06:04,984
For our game I don't see any noticeable issues

137
00:06:04,984 --> 00:06:07,151
with using the mobile shader.

138
00:06:07,151 --> 00:06:09,809
It looks just fine when we look in the game view.

139
00:06:10,226 --> 00:06:12,743
In many cases mobile shaders can be used

140
00:06:12,743 --> 00:06:15,632
effectively in non-mobile games.

141
00:06:16,436 --> 00:06:18,730
In general the mobile shaders will

142
00:06:18,730 --> 00:06:21,931
be more efficient with our game's resource budget,

143
00:06:21,931 --> 00:06:23,931
but in some cases may sacrifice either

144
00:06:23,931 --> 00:06:25,766
quality or control.

145
00:06:26,334 --> 00:06:28,334
The main control that we will lose

146
00:06:28,334 --> 00:06:30,334
by using this mobile shader

147
00:06:30,334 --> 00:06:32,709
is the ability to change the tint colour,

148
00:06:32,709 --> 00:06:34,983
which we don't need on our laser bolt.

149
00:06:38,855 --> 00:06:40,855
With our visual effects setup let's move

150
00:06:40,855 --> 00:06:42,855
on to setting up our logic.

151
00:06:43,880 --> 00:06:46,529
If we look at our Bolt parent game object

152
00:06:46,529 --> 00:06:48,336
we can see that it has no components,

153
00:06:48,336 --> 00:06:50,809
beyond the default transform component.

154
00:06:52,756 --> 00:06:55,488
We will be moving these shots with physics

155
00:06:55,488 --> 00:06:57,778
and, almost more importantly

156
00:06:57,778 --> 00:07:00,423
we will be moving a collider in our game.

157
00:07:00,423 --> 00:07:03,416
Both require the rigidbody component

158
00:07:03,416 --> 00:07:05,857
so let's click on Add Component.

159
00:07:05,857 --> 00:07:09,905
and select Physics - Rigidbody

160
00:07:09,905 --> 00:07:13,369
to add a rigidbody component to the Bolt game object.

161
00:07:14,366 --> 00:07:17,421
Deselect Use Gravity as we don't want our shots

162
00:07:17,421 --> 00:07:19,866
falling down off of the game plane.

163
00:07:20,711 --> 00:07:22,711
Next we need a collider to participate

164
00:07:22,711 --> 00:07:24,490
in collisions.

165
00:07:24,490 --> 00:07:26,490
Before we add one however we want

166
00:07:26,490 --> 00:07:28,253
to remove one.

167
00:07:28,253 --> 00:07:31,035
Click on VFX to show our quad.

168
00:07:31,632 --> 00:07:33,323
The stock quad is created with a

169
00:07:33,323 --> 00:07:34,978
mesh collider on it.

170
00:07:35,726 --> 00:07:37,726
We can disable the mesh renderer to see

171
00:07:37,726 --> 00:07:39,726
the green lines of this mesh collider.

172
00:07:40,419 --> 00:07:42,419
We don't need 2 colliders in this game

173
00:07:42,419 --> 00:07:45,154
object family, but more importantly

174
00:07:45,154 --> 00:07:47,154
we don't want a collider that sticks out

175
00:07:47,154 --> 00:07:49,154
so far to the sides

176
00:07:49,154 --> 00:07:51,154
beyond the image of our laser bolt.

177
00:07:52,041 --> 00:07:54,568
This would mean what looks like a near miss

178
00:07:54,568 --> 00:07:56,568
could cause a collision.

179
00:07:57,469 --> 00:07:59,469
One the mesh collider component

180
00:07:59,469 --> 00:08:02,136
use the context sensitive gear menu

181
00:08:02,136 --> 00:08:04,136
and click on Remove Component.

182
00:08:04,898 --> 00:08:07,275
This will remove the mesh collider component

183
00:08:07,275 --> 00:08:09,275
from the VFX game object.

184
00:08:10,355 --> 00:08:11,940
Now let's add the collider component

185
00:08:11,940 --> 00:08:13,940
we want for our game.

186
00:08:13,940 --> 00:08:17,100
Click on the parent Bolt game object

187
00:08:17,100 --> 00:08:19,100
and click on Add Component.

188
00:08:19,697 --> 00:08:23,447
Select Physics - Capsule Collider.

189
00:08:25,038 --> 00:08:27,038
Now this looks like a sphere but it is

190
00:08:27,038 --> 00:08:29,424
not, it is a capsule.

191
00:08:29,424 --> 00:08:31,424
A capsule is defined by 2 spheres

192
00:08:31,424 --> 00:08:34,211
or hemispheres, one at each end.

193
00:08:34,211 --> 00:08:35,945
and the space in between.

194
00:08:36,528 --> 00:08:38,528
We are looking at a capsule that is

195
00:08:38,528 --> 00:08:40,528
as compact as possible, and there's no

196
00:08:40,528 --> 00:08:42,928
space between the 2 end caps.

197
00:08:43,608 --> 00:08:46,420
So let's adjust the size of the capsule.

198
00:08:46,920 --> 00:08:49,441
We can reduce the radius dramatically

199
00:08:49,441 --> 00:08:51,663
as our bolt is long and thin.

200
00:08:52,564 --> 00:08:54,564
When we do we can see that the

201
00:08:54,564 --> 00:08:57,771
capsule is oriented differently from our bolt.

202
00:08:58,713 --> 00:09:01,831
The default orientation, or direction of a capsule

203
00:09:01,831 --> 00:09:04,009
is along the Y axis

204
00:09:04,009 --> 00:09:06,523
to accommodate humanoid characters.

205
00:09:07,144 --> 00:09:10,745
Let's change the direction to the Z axis.

206
00:09:11,867 --> 00:09:14,709
Now it's oriented with our Bolt VFX.

207
00:09:15,402 --> 00:09:18,057
Let's move in to a top-down position.

208
00:09:18,557 --> 00:09:20,557
This view will help us size the collider

209
00:09:20,557 --> 00:09:22,944
correctly to our visual effect.

210
00:09:24,148 --> 00:09:27,189
Let's pick a radius that best matches our image.

211
00:09:28,670 --> 00:09:30,670
0.03 looks good.

212
00:09:31,584 --> 00:09:33,584
Now let's reduce the height to fit

213
00:09:33,584 --> 00:09:35,584
our image as well.

214
00:09:37,424 --> 00:09:39,229
0.5 looks good.

215
00:09:39,689 --> 00:09:41,689
We don't need the outer glow to have any

216
00:09:41,689 --> 00:09:43,689
physical effect in our game

217
00:09:43,689 --> 00:09:46,214
just the hot core of our laser bolt.

218
00:09:47,294 --> 00:09:49,294
Before we leave this collider component

219
00:09:49,294 --> 00:09:51,294
we need to set one other property.

220
00:09:51,932 --> 00:09:54,387
We need to select Is Trigger

221
00:09:54,387 --> 00:09:57,197
to make this collider a trigger collider.

222
00:09:57,697 --> 00:10:00,522
For more information on triggers and colliders

223
00:10:00,522 --> 00:10:02,522
please see the lesson linked below.

224
00:10:04,638 --> 00:10:06,638
With the basic component setup

225
00:10:06,638 --> 00:10:09,097
we now need to write our custom logic.

226
00:10:09,690 --> 00:10:11,815
With the Bolt game object selected

227
00:10:11,815 --> 00:10:13,815
click on Add Component

228
00:10:13,815 --> 00:10:17,010
and choose New Script.

229
00:10:17,745 --> 00:10:20,219
Name this script Mover.

230
00:10:21,824 --> 00:10:24,651
Confirm this choice to add it to Bolt.

231
00:10:26,698 --> 00:10:29,763
Let's file Mover in to the Scripts folder

232
00:10:31,244 --> 00:10:33,244
and open it for editing.

233
00:10:34,379 --> 00:10:36,379
Again, let's remove the sample code.

234
00:10:37,804 --> 00:10:39,735
So what do we need to write?

235
00:10:39,735 --> 00:10:41,735
That depends upon what we want our laser

236
00:10:41,735 --> 00:10:43,735
bolt to do.

237
00:10:43,735 --> 00:10:45,735
We want it to move automatically when

238
00:10:45,735 --> 00:10:47,735
it's added to the scene.

239
00:10:47,735 --> 00:10:50,299
We want the laser bolt to have it's own velocity,

240
00:10:50,299 --> 00:10:52,702
which we can set through the rigidbody.

241
00:10:53,202 --> 00:10:55,982
So let's write void Start.

242
00:10:56,675 --> 00:10:59,594
With Start the code we will write

243
00:10:59,594 --> 00:11:01,594
will be executed on the very first frame

244
00:11:01,594 --> 00:11:03,594
the object is instantiated.

245
00:11:04,508 --> 00:11:09,163
Let's continue with rigidbody.velocity =

246
00:11:09,663 --> 00:11:11,183
Well what?

247
00:11:11,942 --> 00:11:13,942
We want the laser bolt to travel along

248
00:11:13,942 --> 00:11:15,942
the Z axis towards the

249
00:11:15,942 --> 00:11:17,942
oncoming hazards the game will

250
00:11:17,942 --> 00:11:19,942
throw at our player.

251
00:11:19,942 --> 00:11:21,942
The local Z axis of an object is

252
00:11:21,942 --> 00:11:25,284
also known as it's transform forward.

253
00:11:25,784 --> 00:11:29,694
So let's finish with transform.forward.

254
00:11:30,387 --> 00:11:32,387
We will want some control over how

255
00:11:32,387 --> 00:11:35,120
fast our laser bolt moves in our game

256
00:11:35,120 --> 00:11:39,720
so let's add public float speed.

257
00:11:40,220 --> 00:11:44,544
and let's multiply transform.forward by speed.

258
00:11:45,141 --> 00:11:47,714
That's it. It's a very simple script.

259
00:11:48,670 --> 00:11:51,580
Save this script and return to Unity.

260
00:11:53,491 --> 00:11:56,875
We can see Bolt now has Speed as part of

261
00:11:56,875 --> 00:11:59,300
the Mover component we have just written

262
00:12:00,491 --> 00:12:02,491
Our player is going to shoot many copies

263
00:12:02,491 --> 00:12:05,495
or clones of this shot, so let's save this

264
00:12:05,495 --> 00:12:07,495
game object as a prefab.

265
00:12:08,216 --> 00:12:10,216
The easiest way to do this is to drag

266
00:12:10,216 --> 00:12:13,174
the Bolt game object from the Hierarchy view

267
00:12:13,174 --> 00:12:16,070
in to the Prefabs folder in Assets.

268
00:12:17,357 --> 00:12:20,841
Click on Prefabs so we can see our Bolt prefab.

269
00:12:21,963 --> 00:12:23,798
Currently we have full access to the

270
00:12:23,798 --> 00:12:26,347
components on this prefab, but note that the

271
00:12:26,347 --> 00:12:27,958
preview window is open.

272
00:12:28,543 --> 00:12:30,238
Even though we can scroll to see all of the

273
00:12:30,238 --> 00:12:31,851
components on a game object.

274
00:12:31,851 --> 00:12:34,537
If this preview window gets in the way

275
00:12:34,537 --> 00:12:36,537
it can simply be dragged down and closed

276
00:12:36,537 --> 00:12:38,054
against the bottom.

277
00:12:38,692 --> 00:12:41,137
Let's set the speed value for our bolt.

278
00:12:41,731 --> 00:12:43,593
How fast was our ship travelling?

279
00:12:43,593 --> 00:12:44,571
10?

280
00:12:45,071 --> 00:12:47,683
Our shots need to go faster than our ship

281
00:12:47,683 --> 00:12:50,484
so let's try a speed value of 20.

282
00:12:51,053 --> 00:12:53,053
Lastly we only want an instance of

283
00:12:53,053 --> 00:12:55,443
the Bolt game object in our scene

284
00:12:55,443 --> 00:12:57,676
when our player fires it's weapon.

285
00:12:58,081 --> 00:12:59,910
So let's delete our working instance

286
00:12:59,910 --> 00:13:01,663
of Bolt from the scene.

287
00:13:02,355 --> 00:13:04,026
So save the scene.

288
00:13:04,648 --> 00:13:06,648
Turn off Maximise On Play

289
00:13:06,648 --> 00:13:09,163
if it's on and enter Play mode.

290
00:13:10,156 --> 00:13:13,288
To test the bolt, as we don't have any shooting code

291
00:13:13,288 --> 00:13:15,288
we can simply drag copies of the prefab

292
00:13:15,288 --> 00:13:16,903
in to the hierarchy window

293
00:13:16,903 --> 00:13:18,541
while the game is running.

294
00:13:19,154 --> 00:13:21,154
And they work as we expected.

295
00:13:21,154 --> 00:13:23,624
Of they go towards the top of the screen.

296
00:13:24,206 --> 00:13:26,206
These are our shots with their VFX

297
00:13:26,206 --> 00:13:28,012
and their logic.

298
00:13:28,012 --> 00:13:30,012
In the next assignment we will write the code

299
00:13:30,012 --> 00:13:32,772
for our player to fire these in the game.

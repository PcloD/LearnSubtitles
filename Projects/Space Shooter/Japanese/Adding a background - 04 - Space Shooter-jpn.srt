1
00:00:01,795 --> 00:00:06,795
We're making a space game and space is, well, black.

2
00:00:06,795 --> 00:00:09,198
But flat black is boring.

3
00:00:09,698 --> 00:00:12,651
So let's add a background to our game.

4
00:00:12,651 --> 00:00:14,845
First, let's begin by deactivating our player

5
00:00:14,845 --> 00:00:18,736
game object, it will simply be in the way for now.

6
00:00:19,719 --> 00:00:21,719
Next create a quad to hold our

7
00:00:21,719 --> 00:00:26,652
background image by selecting Create - Quad

8
00:00:26,652 --> 00:00:28,652
from the Hierarchy's Create menu.

9
00:00:29,553 --> 00:00:31,553
Rename this Background.

10
00:00:32,661 --> 00:00:34,258
Where is it?

11
00:00:34,258 --> 00:00:38,225
We've created a quad, but we can't see it in our game.

12
00:00:38,225 --> 00:00:41,302
Let's switch to the Scene view to see what's going on.

13
00:00:41,302 --> 00:00:43,885
There it is, it's oriented in a way

14
00:00:43,885 --> 00:00:46,304
that's not facing the main camera.

15
00:00:46,304 --> 00:00:48,304
The main camera can't see it.

16
00:00:48,804 --> 00:00:51,108
To adjust this let's first reset

17
00:00:51,108 --> 00:00:53,108
the game object's transform to make sure

18
00:00:53,108 --> 00:00:55,108
it is at origin

19
00:00:55,108 --> 00:00:57,108
and then let's change the background's

20
00:00:57,108 --> 00:01:00,277
transform rotation along the X axis.

21
00:01:00,860 --> 00:01:03,480
Let's set this value to 90 degrees.

22
00:01:03,980 --> 00:01:05,897
Now the background quad is facing

23
00:01:05,897 --> 00:01:07,799
towards our main camera.

24
00:01:07,799 --> 00:01:10,361
and we can see it now in the game view.

25
00:01:11,473 --> 00:01:13,857
I'm going to switch back to the Scene view.

26
00:01:14,484 --> 00:01:16,456
The stock quad comes with a 

27
00:01:16,456 --> 00:01:18,154
component we don't need.

28
00:01:18,154 --> 00:01:20,154
We can safely remove the mesh collider

29
00:01:20,154 --> 00:01:22,744
component as we won't be using it.

30
00:01:24,049 --> 00:01:27,134
Next, let's add a texture to this background.

31
00:01:28,283 --> 00:01:32,061
In Assets there is a directory called Textures.

32
00:01:32,061 --> 00:01:34,660
Inside Textures we will find an image

33
00:01:34,660 --> 00:01:36,660
tile_nebula_green.

34
00:01:37,160 --> 00:01:39,022
Let's select this image.

35
00:01:39,022 --> 00:01:41,188
When we select an image and inspect it 

36
00:01:41,188 --> 00:01:43,855
we are looking at that image's importer

37
00:01:44,700 --> 00:01:47,405
We will leave the importer settings as they are.

38
00:01:47,905 --> 00:01:49,836
But if the preview window is open

39
00:01:49,836 --> 00:01:52,840
we can some additional information about this image.

40
00:01:53,340 --> 00:01:55,340
If the preview window is collapsed

41
00:01:55,340 --> 00:01:58,281
we can drag the bar titled Preview upwards

42
00:01:58,281 --> 00:02:00,281
until we see the image clearly.

43
00:02:01,306 --> 00:02:03,848
The information at the bottom of the Preview window

44
00:02:03,848 --> 00:02:05,751
tells us the current resolution of the

45
00:02:05,751 --> 00:02:08,302
image in our project, the current compression method,

46
00:02:08,302 --> 00:02:11,805
if any, and the total size of the imported image.

47
00:02:12,305 --> 00:02:14,305
What is important for us to note here is that

48
00:02:14,305 --> 00:02:16,305
this is a very large image.

49
00:02:16,805 --> 00:02:18,805
1024 by 2048.

50
00:02:19,526 --> 00:02:21,526
So this image is more than large enough to stretch

51
00:02:21,526 --> 00:02:24,167
behind our 600 by 900 game view.

52
00:02:24,750 --> 00:02:27,379
This is also telling us that the image is not square

53
00:02:27,379 --> 00:02:29,379
but rectangular.

54
00:02:30,280 --> 00:02:32,183
There are a number of ways that we can get

55
00:02:32,183 --> 00:02:34,183
a texture on to a mesh.

56
00:02:34,183 --> 00:02:36,183
Let's try one of the most simply ways.

57
00:02:36,683 --> 00:02:39,262
Grab the image, drag it,

58
00:02:39,762 --> 00:02:42,390
and drop it on the background quad in the scene.

59
00:02:42,765 --> 00:02:43,903
Done!

60
00:02:44,458 --> 00:02:46,775
Let's get a better view of our background.

61
00:02:46,775 --> 00:02:48,775
Use Frame Selected to focus the

62
00:02:48,775 --> 00:02:50,555
Scene view camera

63
00:02:51,055 --> 00:02:53,551
The image has been applied to the background quad.

64
00:02:53,551 --> 00:02:56,424
It's dark and squashed but it's there.

65
00:02:57,946 --> 00:02:59,946
What just happened?

66
00:03:01,206 --> 00:03:03,206
We can see that the texture has been attached

67
00:03:03,206 --> 00:03:05,719
to a material and the material has been

68
00:03:05,719 --> 00:03:08,301
associated with the quad by a reference

69
00:03:08,301 --> 00:03:10,301
in the mesh renderer.

70
00:03:12,196 --> 00:03:14,528
Our mesh filter holds the mesh data,

71
00:03:14,528 --> 00:03:16,528
in this case the quad.

72
00:03:18,492 --> 00:03:20,492
The mesh renderer renders that mesh using

73
00:03:20,492 --> 00:03:24,404
the materials in the mesh renderer's Materials Array.

74
00:03:25,829 --> 00:03:28,668
The renderer is only able to use a texture

75
00:03:28,668 --> 00:03:30,501
if it's part of a material.

76
00:03:31,140 --> 00:03:33,140
We did not create a material, we simply

77
00:03:33,140 --> 00:03:35,140
dragged the texture on to the quad.

78
00:03:36,123 --> 00:03:39,513
It was Unity that created the material for us.

79
00:03:39,513 --> 00:03:41,831
When we drag a texture on to a mesh,

80
00:03:41,831 --> 00:03:44,426
if Unity cannot find an associated material

81
00:03:44,426 --> 00:03:46,426
with that texture Unity will create

82
00:03:46,426 --> 00:03:48,426
a new material for us.

83
00:03:49,188 --> 00:03:51,643
Then Unity will automatically add that material

84
00:03:51,643 --> 00:03:54,125
to that mesh renderer's Materials Array.

85
00:03:54,668 --> 00:03:57,520
This automatic material will always

86
00:03:57,520 --> 00:03:59,520
with the default diffuse shader.

87
00:04:02,230 --> 00:04:03,969
Let's look at our background. 

88
00:04:03,969 --> 00:04:06,666
Is it ready to go? No.

89
00:04:06,666 --> 00:04:09,442
It's small, square, squashed,

90
00:04:09,442 --> 00:04:11,966
a bit dark and a little hard to see.

91
00:04:12,646 --> 00:04:14,646
The first thing we need to do is scale up

92
00:04:14,646 --> 00:04:16,646
our quad to fit our background.

93
00:04:17,768 --> 00:04:19,205
We can do this by changing the

94
00:04:19,205 --> 00:04:21,205
transform's Scale properties.

95
00:04:21,705 --> 00:04:24,894
The quad is a very simple 2 dimensional plane.

96
00:04:24,894 --> 00:04:27,807
We can scale the quad along the X and Y axis,

97
00:04:27,807 --> 00:04:29,987
but not along the Z axis.

98
00:04:29,987 --> 00:04:32,869
Trying to scale the Z axis does nothing.

99
00:04:33,963 --> 00:04:36,885
Let's reset the scale now that we've played with it.

100
00:04:37,924 --> 00:04:39,924
What scale should we use?

101
00:04:40,424 --> 00:04:42,424
Let's first look at the texture itself.

102
00:04:42,924 --> 00:04:45,919
It's 1024 by 2048.

103
00:04:45,919 --> 00:04:49,193
To keep the image undistorted when we scale it up

104
00:04:49,193 --> 00:04:52,798
we should keep an aspect ratio of 1:2.

105
00:04:53,146 --> 00:04:55,739
This means our X scale should always be

106
00:04:55,739 --> 00:04:57,739
half of our Y scale.

107
00:04:57,739 --> 00:04:59,739
Or conversely our Y scale must always

108
00:04:59,739 --> 00:05:01,433
be twice our X.

109
00:05:02,043 --> 00:05:04,140
To see this properly in the game let's

110
00:05:04,140 --> 00:05:06,140
switch back to the Game view.

111
00:05:06,902 --> 00:05:09,234
In the Game view select the background quad

112
00:05:09,234 --> 00:05:11,498
and scale it along the X axis

113
00:05:11,498 --> 00:05:13,288
until it fills the screen.

114
00:05:13,860 --> 00:05:15,860
It's more than filling the screen when we use

115
00:05:15,860 --> 00:05:18,321
a scale value of 12 or more.

116
00:05:19,175 --> 00:05:21,175
We have enough resolution that we can afford

117
00:05:21,175 --> 00:05:23,939
to lose some of the image off the sides.

118
00:05:23,939 --> 00:05:26,063
So let's pick a good round number,

119
00:05:26,063 --> 00:05:28,762
like 15. It's more than big enough.

120
00:05:29,262 --> 00:05:32,502
So that we can maintain our 1:2 aspect ratio

121
00:05:32,502 --> 00:05:34,955
what is 15 times 2? 30.

122
00:05:35,800 --> 00:05:39,345
If we have 15 in our X we need 30 in our Y.

123
00:05:39,845 --> 00:05:41,845
Now the background fills the game view

124
00:05:41,845 --> 00:05:43,526
with no distortion.

125
00:05:43,526 --> 00:05:45,526
Let's look at it in the Scene view.

126
00:05:46,233 --> 00:05:48,233
Use Frame Selected to focus the 

127
00:05:48,233 --> 00:05:51,324
Scene view camera to the background's new size.

128
00:05:51,324 --> 00:05:54,694
and we can see that we now have a nice big background.

129
00:05:55,360 --> 00:05:57,360
The background is still a bit too dark

130
00:05:58,150 --> 00:06:01,592
The material is using a simple diffuse shader.

131
00:06:02,368 --> 00:06:04,368
This means that the texture is being treated like

132
00:06:04,368 --> 00:06:07,387
a simple painted surface using matt,

133
00:06:07,387 --> 00:06:09,318
not glossy paint.

134
00:06:09,318 --> 00:06:11,622
The surface of our background is being lit

135
00:06:11,622 --> 00:06:13,427
by the lights in our scene.

136
00:06:13,901 --> 00:06:17,137
These lights have been setup to light our player ship.

137
00:06:17,817 --> 00:06:20,398
1 light, the rim light, is shining up

138
00:06:20,398 --> 00:06:22,398
from below and won't light the surface

139
00:06:22,398 --> 00:06:24,092
of the background at all.

140
00:06:24,592 --> 00:06:26,746
The other 2 have very shallow angles

141
00:06:26,746 --> 00:06:29,593
that only rake the surface of the quad.

142
00:06:29,593 --> 00:06:31,593
So our background isn't receiving very

143
00:06:31,593 --> 00:06:33,593
much light from our lighting rig.

144
00:06:34,093 --> 00:06:36,093
This is great for our player ship

145
00:06:36,093 --> 00:06:38,974
but not so great for our background.

146
00:06:40,195 --> 00:06:42,195
We could add a light shining straight

147
00:06:42,195 --> 00:06:44,305
down to light the background.

148
00:06:44,305 --> 00:06:46,305
But this would add another light to the ship

149
00:06:46,305 --> 00:06:48,597
lighting it in a way that we wouldn't want.

150
00:06:49,178 --> 00:06:51,178
We could put the background and it's new light

151
00:06:51,178 --> 00:06:53,178
on a separate layer so that the background

152
00:06:53,178 --> 00:06:55,178
light did not mix with out existing lights

153
00:06:55,178 --> 00:06:57,054
on the player ship.

154
00:06:57,054 --> 00:06:59,054
But there is a better way.

155
00:07:00,382 --> 00:07:03,096
For more information on layers and how to use them

156
00:07:03,096 --> 00:07:05,096
see the information linked below.

157
00:07:06,950 --> 00:07:09,102
If we think about our background image

158
00:07:09,102 --> 00:07:11,005
we simply want to have it display

159
00:07:11,005 --> 00:07:12,587
behind our game.

160
00:07:12,587 --> 00:07:15,310
It's a flat plane, we do not need specialised

161
00:07:15,310 --> 00:07:17,310
lighting like we need for our ship

162
00:07:17,810 --> 00:07:20,348
and it's a waste to shine a directional light

163
00:07:20,348 --> 00:07:24,449
on a simply quad just to flat light it's contents.

164
00:07:25,156 --> 00:07:26,785
When dealing with a material,

165
00:07:26,785 --> 00:07:29,145
how that material treats the texture

166
00:07:29,145 --> 00:07:32,098
depends upon what shader we choose.

167
00:07:32,098 --> 00:07:36,094
Diffuse treats the texture like matte paint.

168
00:07:36,746 --> 00:07:39,606
The specular shader will treat that texture

169
00:07:39,606 --> 00:07:42,817
like glossy paint, or shiny plastic.

170
00:07:43,538 --> 00:07:45,135
There are many other built-in shaders

171
00:07:45,135 --> 00:07:46,678
that come with Unity.

172
00:07:46,678 --> 00:07:48,678
More can be found on the Asset Store

173
00:07:48,678 --> 00:07:51,095
and we can write our own custom shaders.

174
00:07:51,758 --> 00:07:53,758
For more information on shaders

175
00:07:53,758 --> 00:07:55,994
see the information linked below.

176
00:07:56,893 --> 00:07:58,893
For our purposes we don't need any

177
00:07:58,893 --> 00:08:01,252
specialised lighting on our background.

178
00:08:01,252 --> 00:08:04,552
As a matter of fact we don't need any lighting at all.

179
00:08:05,798 --> 00:08:08,778
For our background, let's change the shader.

180
00:08:08,778 --> 00:08:11,793
Let's choose Unlit - Texture

181
00:08:11,793 --> 00:08:14,239
for the shader on the nebula material.

182
00:08:14,919 --> 00:08:16,919
Now our background is independent

183
00:08:16,919 --> 00:08:19,762
of our lighting system, and it displays

184
00:08:19,762 --> 00:08:22,051
the texture exactly as it looks

185
00:08:22,051 --> 00:08:23,606
in the original image

186
00:08:23,606 --> 00:08:25,606
and it uses no lights at all.

187
00:08:26,493 --> 00:08:28,899
In the game it's nice and bright.

188
00:08:28,899 --> 00:08:31,576
If we change the shader back to diffuse

189
00:08:31,576 --> 00:08:34,239
we can see how much darker it is in the game.

190
00:08:37,557 --> 00:08:39,557
Let's bring back our player and check that

191
00:08:39,557 --> 00:08:41,557
everything looks good in context

192
00:08:41,557 --> 00:08:43,877
now that we have a background in place.

193
00:08:44,817 --> 00:08:47,265
Okay, something's wrong with our ship.

194
00:08:47,765 --> 00:08:49,474
Let's look at it in the Scene view

195
00:08:49,474 --> 00:08:51,474
to see what's going on.

196
00:08:52,029 --> 00:08:54,029
Ah, the player ship is buried

197
00:08:54,029 --> 00:08:55,864
in the middle of the background,

198
00:08:55,864 --> 00:08:57,990
they are both at origin.

199
00:08:57,990 --> 00:09:00,790
The background should be behind the game.

200
00:09:00,790 --> 00:09:02,998
So let's grab the background and adjust it.

201
00:09:02,998 --> 00:09:05,301
along the Y axis.

202
00:09:05,301 --> 00:09:08,176
We can slide it in to a good position by hand

203
00:09:08,176 --> 00:09:10,510
or we can simply set the transform position

204
00:09:10,510 --> 00:09:13,463
on the Y axis to -10.

205
00:09:13,463 --> 00:09:16,542
Now the background is down and out of the way.

206
00:09:18,630 --> 00:09:20,630
When we look back at the game we can't

207
00:09:20,630 --> 00:09:22,630
see any change to the background,

208
00:09:22,630 --> 00:09:24,172
except for the fact that it is no longer

209
00:09:24,172 --> 00:09:26,382
in the middle of our space ship.

210
00:09:26,382 --> 00:09:28,382
This is due to the fact that our camera

211
00:09:28,382 --> 00:09:31,569
is orthographic and has no perspective.

212
00:09:31,569 --> 00:09:33,569
The background can be any distance from the

213
00:09:33,569 --> 00:09:36,359
camera as long as it's within it's clipping plane

214
00:09:36,359 --> 00:09:38,359
and still look exactly the same.

215
00:09:40,130 --> 00:09:43,054
We have now setup our background and our lighting.

216
00:09:43,054 --> 00:09:46,541
Next let's begin to create game play elements

217
00:09:46,541 --> 00:09:48,541
by moving the player ship.

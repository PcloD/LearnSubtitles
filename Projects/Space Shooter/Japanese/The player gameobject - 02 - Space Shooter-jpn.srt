1
00:00:01,250 --> 00:00:03,480
Now that our project is setup and ready

2
00:00:03,480 --> 00:00:05,480
to go let's setup the player game object.

3
00:00:06,956 --> 00:00:09,380
First I'm going to make sure that I'm in the Scene view

4
00:00:09,380 --> 00:00:12,086
for the best view of the scene we are working with.

5
00:00:12,086 --> 00:00:15,432
Next I'm going to add the player's ship model.

6
00:00:15,432 --> 00:00:17,765
We can find the player ship in the Assets

7
00:00:17,765 --> 00:00:20,566
folder in the Models directory.

8
00:00:21,845 --> 00:00:24,450
Drag the vehicle_playerShip

9
00:00:24,450 --> 00:00:27,185
from the Models directory in to the Hierarchy view.

10
00:00:28,902 --> 00:00:30,902
We can also drag this model directly in to the

11
00:00:30,902 --> 00:00:32,718
Scene view if we choose to.

12
00:00:32,718 --> 00:00:34,718
Either way is correct.

13
00:00:35,458 --> 00:00:38,290
Let's get a better view of the model in our scene.

14
00:00:38,290 --> 00:00:40,612
To do this we want to focus, or frame the

15
00:00:40,612 --> 00:00:43,805
selected game object with the Scene view camera.

16
00:00:43,805 --> 00:00:48,118
We can do this by either choosing Edit - Frame Selected

17
00:00:48,643 --> 00:00:50,560
or by using the hot-key F

18
00:00:50,560 --> 00:00:52,560
while the pointer is in the Scene view.

19
00:00:53,099 --> 00:00:55,782
Double clicking on the game object in the Hierarchy view

20
00:00:55,782 --> 00:00:58,217
will also focus the Scene view camera.

21
00:00:59,862 --> 00:01:01,917
There's our player ship.

22
00:01:01,917 --> 00:01:03,917
Now that she's in the scene, let's rename her

23
00:01:03,917 --> 00:01:07,559
in the Hierarchy. Click on the game object in the hierarchy and

24
00:01:07,559 --> 00:01:10,981
type either the Return or Enter key to enable editing.

25
00:01:11,706 --> 00:01:13,605
We can also click on the game object

26
00:01:13,605 --> 00:01:16,465
twice, slowly, to enable editing as well.

27
00:01:17,541 --> 00:01:19,541
Name the game object Player

28
00:01:20,605 --> 00:01:23,836
and then hit Enter or Return to confirm that change.

29
00:01:24,947 --> 00:01:27,296
We want our player ship to be at origin.

30
00:01:27,772 --> 00:01:31,133
Origin is the centre of our 3 dimensional scene

31
00:01:31,133 --> 00:01:35,060
where the X, Y and Z coordinates are (0, 0, 0).

32
00:01:35,748 --> 00:01:38,245
Let's use the context sensitive gear menu

33
00:01:38,245 --> 00:01:40,777
in the upper right of the Transform component

34
00:01:40,777 --> 00:01:42,416
and select Reset.

35
00:01:42,901 --> 00:01:44,901
This will reset the transform's position,

36
00:01:44,901 --> 00:01:46,901
rotation and scale.

37
00:01:47,632 --> 00:01:49,430
Now we have guaranteed that the model is

38
00:01:49,430 --> 00:01:51,430
placed perfectly at origin.

39
00:01:52,713 --> 00:01:55,314
We want this ship to fly around, fight enemies

40
00:01:55,314 --> 00:01:57,656
yet be vulnerable enough that we can be destroyed

41
00:01:57,656 --> 00:01:59,656
if we're not careful as we pilot our ship.

42
00:02:00,252 --> 00:02:02,547
We currently have nothing more than a mesh model

43
00:02:02,547 --> 00:02:04,777
that represents the player in our scene.

44
00:02:05,931 --> 00:02:07,931
The game object that holds our ship

45
00:02:07,931 --> 00:02:09,931
has a number of components that define

46
00:02:09,931 --> 00:02:12,803
what our ship is and where it is in the game.

47
00:02:13,543 --> 00:02:15,846
The game object uses a mesh filter

48
00:02:15,846 --> 00:02:17,551
to hold our mesh model

49
00:02:17,551 --> 00:02:19,293
and a mesh renderer to render the ship

50
00:02:19,293 --> 00:02:20,620
in our scene.

51
00:02:21,399 --> 00:02:23,731
The renderer references 2 materials,

52
00:02:23,731 --> 00:02:26,378
shown here at the bottom for our convenience.

53
00:02:27,507 --> 00:02:29,507
The game object uses the information in

54
00:02:29,507 --> 00:02:31,387
the transform component to know where the

55
00:02:31,387 --> 00:02:34,546
model is in the game, what direction it is facing

56
00:02:34,546 --> 00:02:36,967
and what scale it currently is.

57
00:02:38,430 --> 00:02:40,430
To set up our player game object we will

58
00:02:40,430 --> 00:02:42,430
be adding more components that perform

59
00:02:42,430 --> 00:02:44,957
specialised functions, and we will be creating

60
00:02:44,957 --> 00:02:47,509
our own components using simple scripting.

61
00:02:48,790 --> 00:02:51,295
We will be moving our ship using physics,

62
00:02:51,295 --> 00:02:53,295
though with an arcade style

63
00:02:53,295 --> 00:02:55,295
and we need physics to detect our collisions

64
00:02:55,295 --> 00:02:57,187
between the player and other game objects

65
00:02:57,187 --> 00:02:58,714
in the scene.

66
00:02:58,714 --> 00:03:02,926
To use physics we need to add a rigid body component.

67
00:03:04,222 --> 00:03:06,222
I'm going to quickly reduce the view of these

68
00:03:06,222 --> 00:03:08,222
referenced materials by clicking on

69
00:03:08,222 --> 00:03:10,222
the header bars so that it's easier to

70
00:03:10,222 --> 00:03:12,222
see and access the Add Component

71
00:03:12,222 --> 00:03:14,094
button without scrolling.

72
00:03:14,758 --> 00:03:17,459
Now let's click on Add Component

73
00:03:17,459 --> 00:03:21,921
and select Physics - Rigid Body.

74
00:03:23,837 --> 00:03:25,837
This attaches a rigid body component

75
00:03:25,837 --> 00:03:28,020
to our game object.

76
00:03:28,020 --> 00:03:30,020
By default the rigid body assumes

77
00:03:30,020 --> 00:03:33,475
we want to use gravity, and well, we're in space

78
00:03:33,475 --> 00:03:35,475
and we don't want to fall out of the game

79
00:03:35,475 --> 00:03:38,511
so let's deselect Use Gravity.

80
00:03:39,375 --> 00:03:41,375
With the rigid body attached our game object

81
00:03:41,375 --> 00:03:43,897
now uses the built in physics engine.

82
00:03:43,897 --> 00:03:46,361
To detect collisions the physics engine

83
00:03:46,361 --> 00:03:48,232
through the rigid body, needs to know the

84
00:03:48,232 --> 00:03:50,232
volume of our objects.

85
00:03:50,232 --> 00:03:52,232
We need to know how much space these objects

86
00:03:52,232 --> 00:03:55,523
take up in our game to calculate the collisions.

87
00:03:55,523 --> 00:03:57,523
We give this information to the rigid body by

88
00:03:57,523 --> 00:04:01,096
using a cage that we wrap around our game objects.

89
00:04:01,096 --> 00:04:04,236
This cage defines the volume of that object.

90
00:04:04,236 --> 00:04:06,774
The cage is called a Collider.

91
00:04:06,774 --> 00:04:09,548
Let's use the Add Component button again.

92
00:04:09,548 --> 00:04:14,691
This time select Physics - Capsule Collider.

93
00:04:15,907 --> 00:04:19,552
This puts a simple cage around our player game object.

94
00:04:19,552 --> 00:04:21,944
This looks like a sphere but that's because

95
00:04:21,944 --> 00:04:24,623
a capsule collider is defined by 2 spheres

96
00:04:24,623 --> 00:04:26,623
and the space in between them,

97
00:04:26,623 --> 00:04:30,117
and we are seeing both spheres in the same place.

98
00:04:30,117 --> 00:04:33,376
Let's change the capsule collider's size.

99
00:04:33,376 --> 00:04:36,362
The default orientation for a capsule collider

100
00:04:36,362 --> 00:04:39,317
is up and down or along the Y axis.

101
00:04:39,317 --> 00:04:41,844
This is to fit a humanoid object.

102
00:04:41,844 --> 00:04:44,594
Our ship is longest along the Z axis

103
00:04:44,594 --> 00:04:47,881
so let's change the direction to Z

104
00:04:47,881 --> 00:04:50,984
and reduce the radius and increase the height.

105
00:04:52,952 --> 00:04:55,987
For a better view let's change our orientation.

106
00:04:55,987 --> 00:04:58,328
For a top-down view let's click on the

107
00:04:58,328 --> 00:05:02,317
Scene view gizmo and click on the Y arm.

108
00:05:03,163 --> 00:05:06,448
In this view it's easier to fine tune the shape.

109
00:05:06,448 --> 00:05:08,517
We simply need to choose the values

110
00:05:08,517 --> 00:05:11,046
for radius and height that comfortably fit

111
00:05:11,046 --> 00:05:13,046
the collider to our model.

112
00:05:14,497 --> 00:05:16,820
Now for the purposes of this game,

113
00:05:16,820 --> 00:05:20,946
which is fairly simple, the capsule collider is sufficient.

114
00:05:20,946 --> 00:05:23,808
There are other alternatives however.

115
00:05:23,808 --> 00:05:26,339
Let's click on the Add Component button again

116
00:05:26,339 --> 00:05:28,339
and select Physics.

117
00:05:28,887 --> 00:05:32,524
There is the Box Collider and Sphere Collider as well.

118
00:05:32,524 --> 00:05:34,524
The box collider and sphere colliders are

119
00:05:34,524 --> 00:05:36,524
2 other primitive colliders like the

120
00:05:36,524 --> 00:05:39,338
capsule collider, but there is a more complex

121
00:05:39,338 --> 00:05:41,838
collider called a Mesh Collider

122
00:05:41,838 --> 00:05:45,001
where we can supply the collision mesh ourselves.

123
00:05:45,641 --> 00:05:48,303
For more information see the documentation

124
00:05:48,303 --> 00:05:50,046
on colliders and the lesson on

125
00:05:50,046 --> 00:05:52,285
colliders linked below.

126
00:05:52,285 --> 00:05:54,887
At this point I think it's important to note

127
00:05:54,887 --> 00:05:56,887
that the primitive colliders, the box,

128
00:05:56,887 --> 00:05:59,665
sphere and capsule are far more performant

129
00:05:59,665 --> 00:06:01,316
and should be used whenever possible

130
00:06:01,316 --> 00:06:03,150
over the mesh collider.

131
00:06:03,150 --> 00:06:05,150
For more information please see the

132
00:06:05,150 --> 00:06:06,929
Compound Colliders section of the

133
00:06:06,929 --> 00:06:09,739
Rigid Body documentation linked below.

134
00:06:10,315 --> 00:06:12,315
If however we have a more complex shape that

135
00:06:12,315 --> 00:06:15,276
can't be accommodated by any of the primitive colliders

136
00:06:15,276 --> 00:06:17,276
and for some reason doesn't work by using

137
00:06:17,276 --> 00:06:21,310
a compound collider we can select Mesh Collider.

138
00:06:21,310 --> 00:06:23,719
Let's look at the mesh collider in action.

139
00:06:23,719 --> 00:06:26,472
Select Mesh Collider and yes,

140
00:06:26,472 --> 00:06:28,472
replace the existing component.

141
00:06:29,416 --> 00:06:31,416
This will remove the capsule collider and

142
00:06:31,416 --> 00:06:33,416
use the mesh collider instead.

143
00:06:33,972 --> 00:06:35,972
To have a better look at the mesh collider

144
00:06:35,972 --> 00:06:38,136
let's turn off the mesh renderer.

145
00:06:38,136 --> 00:06:40,821
This reveals the green lines of the mesh collider

146
00:06:40,821 --> 00:06:43,730
that were hidden underneath the rendered mesh.

147
00:06:44,442 --> 00:06:47,109
We can see how complex this cage is.

148
00:06:47,109 --> 00:06:49,109
Unity must check the position of each

149
00:06:49,109 --> 00:06:51,109
triangle in the cage relative to

150
00:06:51,109 --> 00:06:53,109
the other colliders in the scene

151
00:06:53,109 --> 00:06:55,109
to properly detect a collision.

152
00:06:55,510 --> 00:06:57,510
If for whatever reason we use a mesh collider

153
00:06:57,510 --> 00:06:59,510
rather than a primitive collider

154
00:06:59,510 --> 00:07:02,053
it is best that we use a simplified mesh.

155
00:07:02,716 --> 00:07:04,716
The mesh collider holds a reference to the

156
00:07:04,716 --> 00:07:06,716
mesh it's using in the Mesh slot

157
00:07:06,716 --> 00:07:08,716
on the component.

158
00:07:09,939 --> 00:07:11,939
By default Unity will use the mesh

159
00:07:11,939 --> 00:07:14,750
in the mesh filter if one is present.

160
00:07:16,405 --> 00:07:18,405
We can simply swap this out with a new

161
00:07:18,405 --> 00:07:20,405
simplified mesh of our choice.

162
00:07:21,249 --> 00:07:24,933
We have supplied a simplified mesh in the Models directory.

163
00:07:24,933 --> 00:07:28,455
Open the Model file and select the Mesh asset.

164
00:07:28,455 --> 00:07:30,820
Drag the Mesh asset in to the Mesh slot

165
00:07:30,820 --> 00:07:32,958
on the mesh collider.

166
00:07:32,958 --> 00:07:34,958
Now we can see the substantially simplified

167
00:07:34,958 --> 00:07:36,958
mesh being used as the collider.

168
00:07:37,663 --> 00:07:40,111
Let's turn the mesh renderer back on.

169
00:07:40,732 --> 00:07:42,732
For the purposes of this game we could use a

170
00:07:42,732 --> 00:07:44,732
capsule collider, but this game will be

171
00:07:44,732 --> 00:07:47,149
simple enough to absorb the larger cost

172
00:07:47,149 --> 00:07:50,218
of the mesh collider, so let's leave it as it is.

173
00:07:50,972 --> 00:07:52,972
Now that we have a working collider,

174
00:07:52,972 --> 00:07:54,972
we need to adjust the collider's settings.

175
00:07:55,556 --> 00:07:57,556
For this game we don't need to

176
00:07:57,556 --> 00:08:00,333
or want to detect full physics collisions.

177
00:08:00,333 --> 00:08:03,485
We simply need our collisions to trigger an action.

178
00:08:03,485 --> 00:08:05,485
So select Is Trigger,

179
00:08:05,485 --> 00:08:07,961
making this a Trigger Collider.

180
00:08:09,465 --> 00:08:12,375
Lastly, let's add a little sizzle to our ship.

181
00:08:12,375 --> 00:08:17,348
In Prefabs - VFX - Engines

182
00:08:17,348 --> 00:08:19,941
there is an engines_player prefab.

183
00:08:19,941 --> 00:08:21,941
Let's add this to the player ship.

184
00:08:21,941 --> 00:08:23,941
Drag the prefab on to the player ship

185
00:08:23,941 --> 00:08:25,941
in the Hierarchy to add it as a 

186
00:08:25,941 --> 00:08:27,811
child game object.

187
00:08:27,811 --> 00:08:31,508
The Engines prefab consists of 2 particle systems.

188
00:08:31,508 --> 00:08:33,508
Now they look funny in the Scene view,

189
00:08:33,508 --> 00:08:35,508
as the particles are billboarding

190
00:08:35,508 --> 00:08:38,307
or facing to the camera at all times.

191
00:08:38,307 --> 00:08:40,307
If however we are in top-down mode

192
00:08:40,307 --> 00:08:43,312
like our game will be they look just fine.

193
00:08:43,774 --> 00:08:45,774
If the gizmos in the scene are too large

194
00:08:45,774 --> 00:08:47,774
we can reduce them by selecting the gizmos

195
00:08:47,774 --> 00:08:50,251
button in the Scene view toolbar

196
00:08:50,251 --> 00:08:52,251
and adjusting the slider.

197
00:08:52,842 --> 00:08:54,842
Now our player ship is setup.

198
00:08:55,467 --> 00:08:57,171
In the next assignment we will setup the

199
00:08:57,171 --> 00:08:59,171
camera and the lights.

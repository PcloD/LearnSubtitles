1
00:00:00,000 --> 00:00:01,680
In this assignment we are going to make

2
00:00:01,680 --> 00:00:04,475
a script to manage the enemy's player detection.

3
00:00:04,475 --> 00:00:06,475
Select the robot guard in the hierarchy

4
00:00:06,475 --> 00:00:08,084
and click Add Component.

5
00:00:08,084 --> 00:00:10,824
Choose New Script and name the script

6
00:00:10,824 --> 00:00:12,440
EnemySight.

7
00:00:12,440 --> 00:00:14,960
Double click the icon to launch it for editing

8
00:00:14,960 --> 00:00:16,960
and prepare the script as usual.

9
00:00:16,960 --> 00:00:19,508
We will need three public variables.

10
00:00:19,508 --> 00:00:23,243
The first is a float we will call fieldOfViewAngle

11
00:00:23,243 --> 00:00:25,243
This is the number of degrees, centred on

12
00:00:25,243 --> 00:00:28,493
the forward direction that the enemy can see through.

13
00:00:28,493 --> 00:00:30,897
If the player is outside of this field of view

14
00:00:30,897 --> 00:00:32,897
the enemy will not react.

15
00:00:32,897 --> 00:00:35,216
We want this to be public so we can tweak it

16
00:00:35,216 --> 00:00:37,620
in the Inspector, but we will give it a default

17
00:00:37,620 --> 00:00:39,620
of 110 degrees.

18
00:00:40,788 --> 00:00:44,191
The next is a Boolean we will call playerInSight.

19
00:00:44,191 --> 00:00:46,191
This will be true when the enemy can see the

20
00:00:46,191 --> 00:00:48,358
player and false otherwise.

21
00:00:48,358 --> 00:00:50,358
We need this to be public so that it can be

22
00:00:50,358 --> 00:00:54,114
accessed by the decision making script Enemy AI

23
00:00:55,632 --> 00:00:57,632
The last public variable we will need is

24
00:00:57,632 --> 00:01:01,719
a vector3 that we will call personalLastSighting.

25
00:01:01,719 --> 00:01:03,719
This is the last sighting of the player

26
00:01:03,719 --> 00:01:05,719
unique to an individual enemy.

27
00:01:05,719 --> 00:01:07,719
When the player is spotted by an alarm system

28
00:01:07,719 --> 00:01:09,719
or another enemy this variable

29
00:01:09,719 --> 00:01:12,151
will be set to the global sighting position

30
00:01:12,151 --> 00:01:14,438
that all the enemies converge upon.

31
00:01:14,438 --> 00:01:16,438
However, when the enemy hears the player without

32
00:01:16,438 --> 00:01:19,147
seeing him this will store the player's location

33
00:01:19,147 --> 00:01:20,980
without setting the global value to alert

34
00:01:20,980 --> 00:01:22,980
the other enemies.

35
00:01:25,167 --> 00:01:27,167
Next we need to setup a series of private

36
00:01:27,167 --> 00:01:29,167
references to other components.

37
00:01:29,667 --> 00:01:31,667
The first one we will need is a reference to

38
00:01:31,667 --> 00:01:33,313
the nav mesh agent.

39
00:01:33,313 --> 00:01:35,313
This is because we are going to use the length

40
00:01:35,313 --> 00:01:37,313
of the path to the player as a measure of

41
00:01:37,313 --> 00:01:39,949
how far away the enemy can hear.

42
00:01:40,197 --> 00:01:42,197
We will be comparing it to the radius of the

43
00:01:42,197 --> 00:01:44,197
sphere collider, so we will need a reference

44
00:01:44,197 --> 00:01:46,197
to that too.

45
00:01:47,298 --> 00:01:49,298
The animator controller has a playerInSight

46
00:01:49,298 --> 00:01:51,298
Boolean parameter which we will

47
00:01:51,298 --> 00:01:53,298
need in order to set this script's 

48
00:01:53,298 --> 00:01:55,298
playerInSight Boolean.

49
00:01:55,298 --> 00:01:58,132
Therefore we will need a reference to the animator.

50
00:01:58,766 --> 00:02:01,054
The global last known location of the player

51
00:02:01,054 --> 00:02:03,643
is in our LastPlayerSighting script

52
00:02:03,643 --> 00:02:06,361
as such we will need a reference to that.

53
00:02:07,779 --> 00:02:09,982
We will be using some of the onTriggerEnter

54
00:02:09,982 --> 00:02:11,982
functions in this script to detect the player

55
00:02:11,982 --> 00:02:13,982
entering the sphere collider

56
00:02:13,982 --> 00:02:17,252
and as such we will need a reference to the player.

57
00:02:17,252 --> 00:02:19,252
Since the enemy can hear the player when he's

58
00:02:19,252 --> 00:02:21,252
running or shouting we will need a reference

59
00:02:21,252 --> 00:02:23,774
to the player's animator, in order to tell

60
00:02:23,774 --> 00:02:25,907
which state he is currently in.

61
00:02:25,907 --> 00:02:27,907
When the player is dead we want our enemy

62
00:02:27,907 --> 00:02:29,907
to ignore him, so we will need a reference

63
00:02:29,907 --> 00:02:31,907
to the PlayerHealth script.

64
00:02:33,476 --> 00:02:35,476
Since we will be comparing animator controller

65
00:02:35,476 --> 00:02:37,476
states in this script, we will need a reference

66
00:02:37,476 --> 00:02:40,056
to the HashIDs script we wrote earlier

67
00:02:40,056 --> 00:02:41,519
that stores them.

68
00:02:42,370 --> 00:02:44,370
The last private variable that we will need

69
00:02:44,370 --> 00:02:46,370
is not a reference but a variable

70
00:02:46,370 --> 00:02:48,740
for storing the personalLastSighting

71
00:02:48,740 --> 00:02:50,975
from the previous frame.

72
00:02:50,975 --> 00:02:52,975
This way we can know if the position of the

73
00:02:52,975 --> 00:02:54,677
player has changed.

74
00:02:54,677 --> 00:02:56,677
Now that we have all of the variables ready to

75
00:02:56,677 --> 00:02:58,677
store our references we need to actually

76
00:02:58,677 --> 00:03:02,386
assign them. We will do this inside the Awake function.

77
00:03:36,597 --> 00:03:38,597
Also in the awake function we need to

78
00:03:38,597 --> 00:03:40,860
make sure that the personalLastSighting

79
00:03:40,860 --> 00:03:42,860
and the previousSighting both have the

80
00:03:42,860 --> 00:03:45,840
default reset value from lastPlayerSighting

81
00:03:45,840 --> 00:03:47,840
so that when the game begins the enemies are

82
00:03:47,840 --> 00:03:49,840
not chasing the player.

83
00:03:51,372 --> 00:03:52,953
There are a couple of things that we need to do 

84
00:03:52,953 --> 00:03:54,613
in the Update function.

85
00:03:54,613 --> 00:03:56,613
Firstly we need to check if the globalSighting

86
00:03:56,613 --> 00:03:58,942
of the player has changed, and if it has

87
00:03:58,942 --> 00:04:01,769
update the personalSighting of the player.

88
00:04:04,752 --> 00:04:06,752
After this check we need to change the previous

89
00:04:06,752 --> 00:04:09,742
position to be this frame's position.

90
00:04:10,709 --> 00:04:12,709
The other thing that we need to do in the update

91
00:04:12,709 --> 00:04:14,709
function is to set the playerInSight

92
00:04:14,709 --> 00:04:17,965
animator parameter, however we only want to update

93
00:04:17,965 --> 00:04:21,161
this whilst the player is alive.

94
00:04:25,868 --> 00:04:27,868
If the player is not alive we want the

95
00:04:27,868 --> 00:04:30,779
playerInSight parameter to be false.

96
00:04:35,450 --> 00:04:37,450
The majority of the code for this script is

97
00:04:37,450 --> 00:04:40,277
going to be in an OnTriggerStay function

98
00:04:40,277 --> 00:04:43,088
For playerInSight to be true the player

99
00:04:43,088 --> 00:04:45,873
being in view must satisfy three conditions.

100
00:04:45,922 --> 00:04:48,754
One, that he is within the trigger zone.

101
00:04:48,754 --> 00:04:51,028
Two, that he is in front of the enemy

102
00:04:51,028 --> 00:04:53,772
to the extent of the enemy's field of view

103
00:04:53,772 --> 00:04:55,772
and three, that nothing is blocking

104
00:04:55,772 --> 00:04:57,772
the enemy's view of the player.

105
00:04:57,772 --> 00:04:59,772
The first condition is satisfied

106
00:04:59,772 --> 00:05:03,109
if the colliding game object is the player.

107
00:05:03,109 --> 00:05:05,109
At this point we also need to set the

108
00:05:05,109 --> 00:05:07,411
playerInSight variable to be false.

109
00:05:07,411 --> 00:05:09,807
That way if the player is in the trigger zone

110
00:05:09,807 --> 00:05:12,231
but the other conditions are not satisfied

111
00:05:12,231 --> 00:05:15,803
then playerInSight will default to false.

112
00:05:15,803 --> 00:05:17,803
To determine whether the player is within

113
00:05:17,803 --> 00:05:19,803
the field of view we are going to use a

114
00:05:19,803 --> 00:05:22,830
function of the vector3 class called Angle.

115
00:05:22,830 --> 00:05:24,830
This takes in two vector3s and

116
00:05:24,830 --> 00:05:26,756
returns the angle between them.

117
00:05:26,756 --> 00:05:28,584
We will parse in a vector from the enemy

118
00:05:28,584 --> 00:05:32,727
to the player and then enemy's forward vector.

119
00:05:32,727 --> 00:05:34,727
If this angle is less than half the field

120
00:05:34,727 --> 00:05:36,727
of view angle then the player

121
00:05:36,727 --> 00:05:38,727
is within the field of view.

122
00:05:51,923 --> 00:05:53,602
Now we can have the condition to check

123
00:05:53,602 --> 00:05:55,602
whether our angle is less than half

124
00:05:55,602 --> 00:05:58,841
of the field of view angle variable.

125
00:06:02,582 --> 00:06:04,882
Given that the player is within the field of view

126
00:06:04,882 --> 00:06:06,882
we now need to know that there is no obstruction

127
00:06:06,882 --> 00:06:08,882
between the enemy and the player

128
00:06:08,882 --> 00:06:10,882
To find this out we will use a ray cast

129
00:06:10,882 --> 00:06:12,882
from the enemy to the player.

130
00:06:12,882 --> 00:06:14,882
And if something is hit we will determine

131
00:06:14,882 --> 00:06:16,882
whether it is the player or not.

132
00:06:16,882 --> 00:06:19,199
For this we will need to create a ray cast hit

133
00:06:19,199 --> 00:06:22,572
variable which we will call hit.

134
00:06:22,572 --> 00:06:24,947
Now remember that the root of the enemy FPX

135
00:06:24,947 --> 00:06:27,563
is at it's feet. This means that if we 

136
00:06:27,563 --> 00:06:29,563
ray cast from it's position, it's feet,

137
00:06:29,563 --> 00:06:31,415
we might hit the floor.

138
00:06:31,415 --> 00:06:34,043
Instead we can use transform.position

139
00:06:34,043 --> 00:06:36,939
plus transform.up as our starting position

140
00:06:36,939 --> 00:06:38,645
for the ray cast.

141
00:06:38,645 --> 00:06:41,409
As the model is approximately 2 units tall

142
00:06:41,409 --> 00:06:44,898
and transform.up is 1 up in the Y axis

143
00:06:44,898 --> 00:06:47,150
this is around the centre of the model.

144
00:06:47,150 --> 00:06:49,590
The direction of the ray cast is the direction

145
00:06:49,590 --> 00:06:52,937
vector we created earlier for measuring the angle.

146
00:06:52,937 --> 00:06:54,937
The direction vector of a ray cast is

147
00:06:54,937 --> 00:06:56,937
always normalised, we we'll always

148
00:06:56,937 --> 00:06:58,688
have a magnitude of 1.

149
00:06:59,437 --> 00:07:01,437
The next parameter is the rayCastHit

150
00:07:01,437 --> 00:07:03,437
variable we have created.

151
00:07:04,477 --> 00:07:06,676
And finally the distance.

152
00:07:06,676 --> 00:07:08,676
For this there is no point in the ray cast being

153
00:07:08,676 --> 00:07:11,320
any longer than the radius of the collider,

154
00:07:11,320 --> 00:07:14,368
for that is where we want to check for the player.

155
00:07:14,368 --> 00:07:16,368
Next we need to check that if we hit

156
00:07:16,368 --> 00:07:18,712
something it is the player.

157
00:07:19,899 --> 00:07:22,518
At this point we know that the player is in sight,

158
00:07:22,518 --> 00:07:25,282
so we can get the playerInSight variable to true

159
00:07:25,282 --> 00:07:26,743
and update the global sighting of the player

160
00:07:26,743 --> 00:07:28,743
to alert the other enemies.

161
00:07:31,330 --> 00:07:33,649
At this point we need to deal with the player being heard

162
00:07:33,649 --> 00:07:36,347
rather than seen. The conditions for this are that

163
00:07:36,347 --> 00:07:38,347
the player is running or shouting.

164
00:07:38,347 --> 00:07:40,347
Both of these are animator states that the

165
00:07:40,347 --> 00:07:43,133
player can be in, so we need to check for them.

166
00:07:43,133 --> 00:07:45,133
We will start by storing the name hash

167
00:07:45,133 --> 00:07:48,907
of the player's states on both layers.

168
00:07:56,699 --> 00:08:00,883
Now we can compare these variables to the hashIDs.

169
00:08:05,656 --> 00:08:07,656
When the enemy hears the player it may not be

170
00:08:07,656 --> 00:08:09,656
a straight line to the target.

171
00:08:09,656 --> 00:08:11,656
If the player was just around the corner then

172
00:08:11,656 --> 00:08:14,099
the enemy should be able to hear him.

173
00:08:14,099 --> 00:08:16,099
But if they are in a completely different room

174
00:08:16,099 --> 00:08:17,797
then the enemy shouldn't be able to hear

175
00:08:17,797 --> 00:08:19,502
through the walls.

176
00:08:19,502 --> 00:08:21,502
What we need is a way of telling how far the sound

177
00:08:21,502 --> 00:08:23,502
would have to travel, and we can do this

178
00:08:23,502 --> 00:08:26,478
by calculating routes using the nav mesh.

179
00:08:26,478 --> 00:08:29,085
We will keep these calculations in a separate function.

180
00:08:29,085 --> 00:08:31,085
We will make the function return the length

181
00:08:31,085 --> 00:08:33,085
of the path we are calculating it will

182
00:08:33,085 --> 00:08:35,085
need to take in a vector3 as the

183
00:08:35,085 --> 00:08:37,632
target position. The first step in this function

184
00:08:37,632 --> 00:08:41,188
is to create a new empty nav mesh path.

185
00:08:43,235 --> 00:08:45,235
Now we are going to use a function of the nav mesh

186
00:08:45,235 --> 00:08:47,927
agent called calculatePath.

187
00:08:47,927 --> 00:08:50,320
This takes in a target destination

188
00:08:50,320 --> 00:08:53,199
and the path variable that we've just created.

189
00:08:53,199 --> 00:08:55,449
The NavMeshPath type is a class,

190
00:08:55,449 --> 00:08:57,351
which means it's a reference type,

191
00:08:57,351 --> 00:09:00,621
one that can be assigned to within a function.

192
00:09:03,208 --> 00:09:05,208
This means that our path variable will be

193
00:09:05,208 --> 00:09:07,549
effected by the CalculatePath function,

194
00:09:07,549 --> 00:09:10,527
since we are parsing in a reference to the variable

195
00:09:10,527 --> 00:09:12,527
We will first ensure that the nav mesh agent

196
00:09:12,527 --> 00:09:15,446
is enabled and then calculate the path.

197
00:09:18,377 --> 00:09:20,624
Part of the NavMeshPath class

198
00:09:20,624 --> 00:09:24,188
is an array of vector3s called Corners.

199
00:09:24,188 --> 00:09:27,407
These are all of the corners on the route of the path.

200
00:09:27,407 --> 00:09:29,407
If we added the position of the enemy

201
00:09:29,407 --> 00:09:31,407
and the player to this array then we will

202
00:09:31,407 --> 00:09:35,365
have an array of all of the way points on the path.

203
00:09:35,365 --> 00:09:37,365
We can then add together all of the distances

204
00:09:37,365 --> 00:09:40,275
between the way points to get the path length

205
00:09:40,275 --> 00:09:42,275
and therefore the distance that the sound would

206
00:09:42,275 --> 00:09:45,442
have to travel to be heard by the enemy.

207
00:09:45,442 --> 00:09:47,941
Let's call our array allWayPoints

208
00:09:47,941 --> 00:09:49,941
and declare it's length as the length

209
00:09:49,941 --> 00:09:51,941
of the corners array plus 2 more.

210
00:09:51,941 --> 00:09:55,209
to allow for the enemy and player positions.

211
00:09:58,532 --> 00:10:00,532
Now the first point of this array should

212
00:10:00,532 --> 00:10:02,532
be the enemy's position.

213
00:10:05,021 --> 00:10:07,021
And the last point of the array is the target

214
00:10:07,021 --> 00:10:10,090
position, that of the player.

215
00:10:12,149 --> 00:10:14,149
All the points in between will be those

216
00:10:14,149 --> 00:10:16,974
from the corners array. We can assign these using

217
00:10:16,974 --> 00:10:18,974
a For loop which performs an assignment

218
00:10:18,974 --> 00:10:20,974
for each of the corners.

219
00:10:22,505 --> 00:10:24,505
Since we don't want to assign the first item

220
00:10:24,505 --> 00:10:27,283
in the allWayPoints array the index that we will

221
00:10:27,283 --> 00:10:30,326
assign to will be i+1.

222
00:10:31,513 --> 00:10:33,513
Now we need to create a float to store

223
00:10:33,513 --> 00:10:35,216
our path length.

224
00:10:35,216 --> 00:10:37,216
We need to initialise it to be 0

225
00:10:37,216 --> 00:10:39,216
since it won't be able to increment

226
00:10:39,216 --> 00:10:41,216
if it has not been initialised.

227
00:10:42,354 --> 00:10:43,907
We will need another loop. 

228
00:10:43,907 --> 00:10:45,907
This will iterate over each of the lengths

229
00:10:45,907 --> 00:10:47,782
between the waypoints.

230
00:10:47,782 --> 00:10:49,782
Therefore it will need to loop the number 

231
00:10:49,782 --> 00:10:51,782
of times that is one less than the number

232
00:10:51,782 --> 00:10:53,958
of waypoints in the array.

233
00:10:53,958 --> 00:10:55,958
An array of 3 waypoints will have

234
00:10:55,958 --> 00:10:57,635
2 lengths that join them.

235
00:10:57,635 --> 00:10:59,635
An array of 4 waypoints will have 3 lengths

236
00:10:59,635 --> 00:11:02,585
and so on. Then, in each loop we need to

237
00:11:02,585 --> 00:11:04,585
add the distance between one waypoint and

238
00:11:04,585 --> 00:11:08,028
the next to the pathLength variable.

239
00:11:22,327 --> 00:11:25,899
Finally we just need to return the path length.

240
00:11:26,649 --> 00:11:28,649
With the function finished we can put a

241
00:11:28,649 --> 00:11:31,354
call to it in our OnTriggerEnter function.

242
00:11:31,354 --> 00:11:33,354
Since the furthest distance the enemies can

243
00:11:33,354 --> 00:11:36,520
hear is the sphere collider's radius

244
00:11:36,520 --> 00:11:38,520
we need to make sure that the length of the path

245
00:11:38,520 --> 00:11:40,520
returned from our function is less

246
00:11:40,520 --> 00:11:43,569
than or equal to this radius.

247
00:11:47,949 --> 00:11:49,949
And if this is the case we set the

248
00:11:49,949 --> 00:11:53,644
personalLastSighting to the player's position.

249
00:11:53,644 --> 00:11:55,644
The final part of this script is to make sure

250
00:11:55,644 --> 00:11:58,135
that playerInSight is set to false

251
00:11:58,135 --> 00:12:00,135
when the player leaves the trigger zone.

252
00:12:00,135 --> 00:12:01,662
This is done very simply with an

253
00:12:01,662 --> 00:12:05,364
OnTriggerExit function.

254
00:12:09,932 --> 00:12:13,694
Now we can save our script and return to the Editor.

255
00:12:15,913 --> 00:12:17,913
We need to create a new subfolder in our

256
00:12:17,913 --> 00:12:19,913
Scripts folder to hold this script

257
00:12:19,913 --> 00:12:21,913
and others for the enemy.

258
00:12:21,913 --> 00:12:23,913
Select the Scripts folder

259
00:12:23,913 --> 00:12:26,378
and go to Create - Folder

260
00:12:26,378 --> 00:12:28,743
and call this folder Enemy.

261
00:12:29,320 --> 00:12:31,320
Then reselect Assets

262
00:12:31,320 --> 00:12:33,320
and expand Scripts and drag and drop

263
00:12:33,320 --> 00:12:36,893
EnemySight in to the Enemy folder.

264
00:12:38,154 --> 00:12:41,543
Now we can save our scene and project

265
00:12:43,172 --> 00:12:45,172
and in the next assignment we will be making

266
00:12:45,172 --> 00:12:47,172
a script to handle parsing the parameters

267
00:12:47,172 --> 00:12:49,172
for the movement from the nav mesh system

268
00:12:49,172 --> 00:12:51,024
to the animator controller.

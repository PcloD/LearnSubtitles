1
00:00:00,160 --> 00:00:02,510
The script that moves the enemy will be a script

2
00:00:02,510 --> 00:00:05,280
called Enemy Animation and we'll create that

3
00:00:05,280 --> 00:00:07,490
script in the next assignment.

4
00:00:07,490 --> 00:00:09,900
But to make sure that script is not too cluttered

5
00:00:09,900 --> 00:00:11,900
we're going to make a helper script that we will

6
00:00:11,900 --> 00:00:13,900
call AnimatorSetup.

7
00:00:14,400 --> 00:00:16,400
Our enemies in the game will take their speed

8
00:00:16,400 --> 00:00:18,780
and direction from the nav mesh.

9
00:00:18,780 --> 00:00:20,450
Often when the player is trying to evade

10
00:00:20,450 --> 00:00:22,450
the enemies the direction that the enemy

11
00:00:22,450 --> 00:00:24,690
must face will change suddenly,

12
00:00:24,690 --> 00:00:27,910
which can result in drastic and unrealistic movement.

13
00:00:27,910 --> 00:00:30,350
To smooth these changes in direction and speed

14
00:00:30,350 --> 00:00:32,890
we use damping, a reduction in the amount

15
00:00:32,890 --> 00:00:34,780
of change over time.

16
00:00:34,780 --> 00:00:36,780
This script will be making decisions on what

17
00:00:36,780 --> 00:00:38,780
damping to apply when we set the

18
00:00:38,780 --> 00:00:40,780
various float parameters of the

19
00:00:40,780 --> 00:00:42,780
enemy's animator controller,

20
00:00:42,780 --> 00:00:45,220
such as speed and angular speed.

21
00:00:45,220 --> 00:00:47,830
We will create it in the unapplied subfolder

22
00:00:47,830 --> 00:00:50,450
of the Scripts folder. Open the Scripts folder

23
00:00:50,450 --> 00:00:52,780
and select Unapplied and then choose

24
00:00:52,780 --> 00:00:55,430
Create - C# Script.

25
00:00:56,040 --> 00:00:58,040
Name the script AnimatorSetup,

26
00:00:58,750 --> 00:01:01,060
and double click it to launch it for editing,

27
00:01:01,510 --> 00:01:03,030
and prepare the script.

28
00:01:03,750 --> 00:01:05,750
Instead of applying this script to the enemy

29
00:01:05,750 --> 00:01:08,390
directly we will be creating an instance

30
00:01:08,390 --> 00:01:11,010
of this class within the EnemyAnimation script.

31
00:01:11,010 --> 00:01:13,010
We will also not be using any of the 

32
00:01:13,010 --> 00:01:16,420
MonoBehaviour functions, such as Update or Awake.

33
00:01:16,420 --> 00:01:18,420
This means that we won't need the MonoBehaviour

34
00:01:18,420 --> 00:01:22,110
keyword or the colon, so we can remove these now.

35
00:01:22,110 --> 00:01:24,360
This class is going to need 5 class variables.

36
00:01:24,360 --> 00:01:27,200
in total, 3 public float variables

37
00:01:27,200 --> 00:01:29,200
and then private references to the animator

38
00:01:29,200 --> 00:01:31,730
component and the HashIDs script.

39
00:01:31,730 --> 00:01:33,580
We will start out with the floats.

40
00:01:33,580 --> 00:01:35,580
The first two of these are going to represent

41
00:01:35,580 --> 00:01:37,700
damping times for our speed and

42
00:01:37,700 --> 00:01:39,120
angular speed parameters.

43
00:01:39,120 --> 00:01:41,120
The last will be a response time that will

44
00:01:41,120 --> 00:01:43,120
be used to convert an angle

45
00:01:43,120 --> 00:01:44,650
to an angular speed.

46
00:01:44,650 --> 00:01:47,830
The first float we will call speedDampTime.

47
00:01:48,470 --> 00:01:51,920
The next will be called angularSpeedDampTime.

48
00:01:51,920 --> 00:01:55,020
and lastly angleResponseTime.

49
00:01:55,020 --> 00:01:57,540
This script will not be applied to a game object

50
00:01:57,540 --> 00:01:59,540
and as such these variables will not be

51
00:01:59,540 --> 00:02:01,280
visible in the inspector.

52
00:02:01,280 --> 00:02:03,280
These variables are public as a matter of

53
00:02:03,280 --> 00:02:05,840
flexibility of code. At some point later

54
00:02:05,840 --> 00:02:07,840
when designing this game we might

55
00:02:07,840 --> 00:02:09,570
decide that we'd like to be able to affect

56
00:02:09,570 --> 00:02:11,570
these variables whilst the game is running

57
00:02:11,570 --> 00:02:13,570
from another script, perhaps we would want

58
00:02:13,570 --> 00:02:15,210
to tweak their reaction speeds

59
00:02:15,210 --> 00:02:16,670
under certain conditions.

60
00:02:16,670 --> 00:02:18,670
If this were the case we would be able to

61
00:02:18,670 --> 00:02:20,310
because they are public.

62
00:02:20,310 --> 00:02:23,000
By default however we won't need to adjust then

63
00:02:23,000 --> 00:02:26,070
so let's simply give them default values here.

64
00:02:26,070 --> 00:02:30,970
Set these values to 0.1, 0.7 and 0.6 respectively.

65
00:02:30,970 --> 00:02:32,970
Next we have the animator reference

66
00:02:32,970 --> 00:02:34,590
which we will call anim

67
00:02:34,590 --> 00:02:36,590
and the reference to the HashIDs script

68
00:02:36,590 --> 00:02:38,240
which we will call hash.

69
00:02:38,880 --> 00:02:40,880
We need to allocate a reference to each of these

70
00:02:40,880 --> 00:02:42,760
variables but since we are not using 

71
00:02:42,760 --> 00:02:44,760
MonoBehaviour we can't use the Awake

72
00:02:44,760 --> 00:02:46,520
function as we normally would.

73
00:02:46,520 --> 00:02:48,520
Instead we will make sure the references are

74
00:02:48,520 --> 00:02:51,290
allocated in the constructor of the class.

75
00:02:51,290 --> 00:02:53,290
Firstly the constructor will need to be called

76
00:02:53,290 --> 00:02:55,290
from another script, so it needs to

77
00:02:55,290 --> 00:02:56,900
be a public constructor.

78
00:02:56,900 --> 00:02:59,190
The constructor will be called when an instance

79
00:02:59,190 --> 00:03:00,800
of this class is created.

80
00:03:00,800 --> 00:03:02,800
As such we can parse in the references to

81
00:03:02,800 --> 00:03:05,100
the animator and HashIDs script

82
00:03:05,100 --> 00:03:07,100
from the EnemyAnimation script,

83
00:03:07,100 --> 00:03:09,950
which is where we are calling the constructor.

84
00:03:09,950 --> 00:03:11,950
Therefore our constructor will need an animator

85
00:03:11,950 --> 00:03:15,040
parameter and a HashIDs parameter.

86
00:03:16,130 --> 00:03:18,130
And we can allocate to the class variables

87
00:03:18,130 --> 00:03:20,130
using these parameters.

88
00:03:22,080 --> 00:03:24,430
The use of this class is to apply damping

89
00:03:24,430 --> 00:03:26,430
and to set the Angular Speed and Speed

90
00:03:26,430 --> 00:03:28,430
animator controller parameters.

91
00:03:28,430 --> 00:03:30,430
We will need a function that we can call

92
00:03:30,430 --> 00:03:31,970
in order to do this.

93
00:03:31,970 --> 00:03:33,970
It needs to be called from another script

94
00:03:33,970 --> 00:03:35,760
so it must be public.

95
00:03:35,760 --> 00:03:37,650
It won't need to return anything

96
00:03:37,650 --> 00:03:39,650
and will need to take in speed and

97
00:03:39,650 --> 00:03:42,140
and angle as float parameters.

98
00:03:42,140 --> 00:03:44,140
This function will setup the animator

99
00:03:44,140 --> 00:03:46,140
controller parameters, so we will just

100
00:03:46,140 --> 00:03:48,140
call it Setup.

101
00:03:50,050 --> 00:03:52,050
The first thing we need to do is create

102
00:03:52,050 --> 00:03:54,050
an Angular Speed float that we can

103
00:03:54,050 --> 00:03:56,050
parse to the animator controller.

104
00:03:56,050 --> 00:03:58,780
This is the angle by which the enemy should turn

105
00:03:58,780 --> 00:04:01,130
divided by the response time.

106
00:04:02,150 --> 00:04:04,150
Now that we have both the Speed and Angular

107
00:04:04,150 --> 00:04:06,630
Speed all that's left to do is to parse them to

108
00:04:06,630 --> 00:04:09,790
the animator controller with damping applied.

109
00:04:09,790 --> 00:04:11,790
The SetFloat function can either have

110
00:04:11,790 --> 00:04:14,400
2 parameters if you are not applying damping

111
00:04:14,400 --> 00:04:16,680
or 4 parameters if you are.

112
00:04:17,180 --> 00:04:19,180
The first argument is the animator parameter

113
00:04:19,180 --> 00:04:20,940
that we want to set.

114
00:04:20,940 --> 00:04:23,630
The second is the value we want to set it to.

115
00:04:23,630 --> 00:04:26,370
The third is any damping we want to apply.

116
00:04:26,370 --> 00:04:28,570
And the last is simply deltaTime

117
00:04:28,570 --> 00:04:30,570
in order to apply damping over the

118
00:04:30,570 --> 00:04:32,570
time between rendered frames.

119
00:04:41,640 --> 00:04:43,480
And that's it for this script.

120
00:04:43,480 --> 00:04:46,980
Remember to save it, and return to the Editor.

121
00:04:47,600 --> 00:04:49,370
In the next assignment we will be making

122
00:04:49,370 --> 00:04:51,370
the EnemyAnimation script, which will

123
00:04:51,370 --> 00:04:53,370
have an instance of this AnimatorSetup

124
00:04:53,370 --> 00:04:54,470
class inside it.

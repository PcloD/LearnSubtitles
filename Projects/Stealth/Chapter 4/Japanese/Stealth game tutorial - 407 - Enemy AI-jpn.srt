1
00:00:00,193 --> 00:00:02,277
The last component that we need for the enemy

2
00:00:02,277 --> 00:00:04,277
is the EnemyAI script.

3
00:00:04,277 --> 00:00:06,277
This class will act as the enemy's brain

4
00:00:06,277 --> 00:00:08,277
and will make decisions based on the information

5
00:00:08,277 --> 00:00:10,110
given to it by other scripts.

6
00:00:10,110 --> 00:00:12,110
Add a new script component to the enemy

7
00:00:12,110 --> 00:00:14,027
called EnemyAI.

8
00:00:14,027 --> 00:00:17,141
Open it for editing as usual and prepare it.

9
00:00:21,495 --> 00:00:23,302
Let's start as usual with the public

10
00:00:23,302 --> 00:00:25,123
variables of the class.

11
00:00:25,123 --> 00:00:27,686
Our enemies are going to have 3 states,

12
00:00:27,686 --> 00:00:30,180
patrolling, chasing and shooting.

13
00:00:30,180 --> 00:00:32,180
They will be stationary whilst shooting

14
00:00:32,180 --> 00:00:34,180
but we will need to allocate a speed

15
00:00:34,180 --> 00:00:36,180
for patrolling and chasing.

16
00:00:36,180 --> 00:00:39,468
2 and 5 should be appropriate defaults for these.

17
00:00:39,468 --> 00:00:41,468
When reaching the last sighting of the player

18
00:00:41,468 --> 00:00:43,468
or the waypoints of their patrol route

19
00:00:43,468 --> 00:00:45,909
enemies will wait for a brief moment.

20
00:00:45,909 --> 00:00:47,909
We need to store the amount of time they wait

21
00:00:47,909 --> 00:00:49,909
when patrolling and when chasing.

22
00:00:50,409 --> 00:00:52,409
The last public variable we will need is

23
00:00:52,409 --> 00:00:54,409
an array of transforms to act as

24
00:00:54,409 --> 00:00:57,296
waypoints for the patrol route of each enemy.

25
00:00:58,376 --> 00:01:00,903
We need several private class variables.

26
00:01:00,903 --> 00:01:02,500
Firstly we need a reference to the

27
00:01:02,500 --> 00:01:04,500
EnemySight script.

28
00:01:04,500 --> 00:01:07,793
Next we need a reference to the nav mesh agent component.

29
00:01:08,904 --> 00:01:10,904
We will also need to know the player's position

30
00:01:10,904 --> 00:01:13,522
so we will need a reference to his transform.

31
00:01:14,091 --> 00:01:16,777
We will need a reference to the PlayerHealth script.

32
00:01:17,650 --> 00:01:19,650
And lastly we will need a reference to the

33
00:01:19,650 --> 00:01:21,650
LastPlayerSighting script.

34
00:01:22,012 --> 00:01:24,516
We need a few more private class variables.

35
00:01:24,516 --> 00:01:26,516
Firstly we need timers for the chase and 

36
00:01:26,516 --> 00:01:28,516
patrol wait times.

37
00:01:29,016 --> 00:01:31,016
Finally we need an index to keep track

38
00:01:31,016 --> 00:01:33,016
of which of the array of waypoints is

39
00:01:33,016 --> 00:01:35,016
the enemy's current destination.

40
00:01:35,668 --> 00:01:37,448
Now we will use the Awake function to

41
00:01:37,448 --> 00:01:39,448
setup our references.

42
00:01:58,844 --> 00:02:00,844
Now we will create all the empty functions

43
00:02:00,844 --> 00:02:02,844
we will need so that we can write

44
00:02:02,844 --> 00:02:05,123
calls to them as we proceed.

45
00:02:05,123 --> 00:02:07,123
We will start with Update as that is where

46
00:02:07,123 --> 00:02:09,123
all of our functions will be called.

47
00:02:09,123 --> 00:02:11,123
Next we will have functions to represent

48
00:02:11,123 --> 00:02:12,682
the states of the enemy.

49
00:02:12,682 --> 00:02:14,125
The first is Shooting.

50
00:02:14,125 --> 00:02:16,125
This is the highest priority state

51
00:02:16,125 --> 00:02:17,734
and though it doesn't matter which order

52
00:02:17,734 --> 00:02:19,734
the functions are listed in, it makes more sense

53
00:02:19,734 --> 00:02:22,480
to have the highest priority ones first.

54
00:02:23,242 --> 00:02:26,323
The next highest priority state is Chasing.

55
00:02:27,030 --> 00:02:29,707
Finally our last state is Patrolling.

56
00:02:30,373 --> 00:02:32,373
Now that we have our empty functions let's

57
00:02:32,373 --> 00:02:34,056
return to populate them.

58
00:02:34,056 --> 00:02:36,056
In Update we want to have the conditions

59
00:02:36,056 --> 00:02:38,056
for each of our states and then a call

60
00:02:38,056 --> 00:02:40,056
to the appropriate function.

61
00:02:40,056 --> 00:02:42,056
The highest priority state is Shooting

62
00:02:42,056 --> 00:02:44,056
and we want this to occur if the player

63
00:02:44,056 --> 00:02:46,056
is in sight and is alive.

64
00:02:46,056 --> 00:02:49,033
So the player's health must be greater than 0.

65
00:02:49,878 --> 00:02:52,647
If the enemy is not Shooting then the next

66
00:02:52,647 --> 00:02:54,508
highest priority is Chasing.

67
00:02:54,508 --> 00:02:56,508
We want the enemy to do this if the last

68
00:02:56,508 --> 00:02:58,508
personal sighting of the player is not

69
00:02:58,508 --> 00:03:00,508
the reset position, and if the

70
00:03:00,508 --> 00:03:02,508
player is also alive.

71
00:03:03,630 --> 00:03:05,630
If the enemy is not in either of these

72
00:03:05,630 --> 00:03:08,058
states then the enemy should be Patrolling.

73
00:03:08,600 --> 00:03:10,600
Now that we have the state logic finished

74
00:03:10,600 --> 00:03:13,415
we can populate our State function.

75
00:03:13,415 --> 00:03:15,415
The only thing we want to do when shooting

76
00:03:15,415 --> 00:03:17,594
is to stop the enemy from moving.

77
00:03:17,594 --> 00:03:21,060
We do this using the Stop function of the nav mesh agent.

78
00:03:21,060 --> 00:03:23,925
The rest is handled by the EnemyShooting script.

79
00:03:24,618 --> 00:03:27,182
Next we can move on to the Chasing function.

80
00:03:27,182 --> 00:03:29,182
The first thing we want to do is set a new

81
00:03:29,182 --> 00:03:32,350
destination of the last personal sighting of the player.

82
00:03:32,350 --> 00:03:34,350
However, we only want to do so if the

83
00:03:34,350 --> 00:03:36,350
distance between the enemy and the player

84
00:03:36,350 --> 00:03:38,916
is greater than some small margin.

85
00:03:38,916 --> 00:03:41,496
So first we create a vector from the enemy

86
00:03:41,496 --> 00:03:44,069
to the last personal sighting position.

87
00:03:45,957 --> 00:03:47,957
An appropriate margin is 2

88
00:03:47,957 --> 00:03:49,957
so we will compare the square magnitude

89
00:03:49,957 --> 00:03:52,583
of this vector to a value of 4.

90
00:03:54,114 --> 00:03:56,114
If it is not some small distance away

91
00:03:56,114 --> 00:03:59,267
we will set the nav mesh agents destination.

92
00:04:00,145 --> 00:04:02,449
We want to make sure that the enemy is running

93
00:04:02,449 --> 00:04:04,449
so the nav mesh agent's speed should be

94
00:04:04,449 --> 00:04:06,449
set to the value of chase speed.

95
00:04:07,129 --> 00:04:09,129
Now we need to check if the enemy has

96
00:04:09,129 --> 00:04:10,615
reached it's destination.

97
00:04:10,615 --> 00:04:12,615
To do so we will see if the nav mesh agent's

98
00:04:12,615 --> 00:04:14,615
remaining distance is less

99
00:04:14,615 --> 00:04:16,615
than it's stopping distance.

100
00:04:17,654 --> 00:04:19,654
Once the enemy reaches the last sighting

101
00:04:19,654 --> 00:04:21,654
we want him to wait, so we should start

102
00:04:21,654 --> 00:04:23,654
incrementing the chase timer.

103
00:04:24,154 --> 00:04:25,622
We then need to check if the enemy has

104
00:04:25,622 --> 00:04:27,622
been waiting long enough

105
00:04:27,622 --> 00:04:29,622
and if he has then the enemy will start

106
00:04:29,622 --> 00:04:32,453
his patrol route again to look for the player

107
00:04:32,453 --> 00:04:34,841
To make this happen we need to reset the

108
00:04:34,841 --> 00:04:36,841
global last sighting of the player, as well as

109
00:04:36,841 --> 00:04:39,638
the enemy's personal last sighting of the player.

110
00:04:39,638 --> 00:04:41,638
And since we've stopped waiting we will also

111
00:04:41,638 --> 00:04:43,638
reset the chase timer.

112
00:04:44,525 --> 00:04:46,525
One other thing that we need to do in this function

113
00:04:46,525 --> 00:04:48,525
is state that if we're not near the last

114
00:04:48,525 --> 00:04:51,975
sighting of the player the chase timer should be 0.

115
00:04:51,975 --> 00:04:53,975
This is because the player may be spotted elsewhere

116
00:04:53,975 --> 00:04:56,639
whilst the guard is already in persuite,

117
00:04:56,639 --> 00:04:58,639
meaning that we need to reset to 0.

118
00:04:59,664 --> 00:05:01,664
The patrolling function follows a similar

119
00:05:01,664 --> 00:05:03,664
pattern to chasing. First we need to

120
00:05:03,664 --> 00:05:06,403
get the nav mesh agent's speed appropriately

121
00:05:06,903 --> 00:05:08,903
Now we need to check whether the waypoint

122
00:05:08,903 --> 00:05:11,110
index needs incrementing.

123
00:05:11,110 --> 00:05:13,110
We need to check if the enemy is either near

124
00:05:13,110 --> 00:05:15,872
the destination or has no destination.

125
00:05:16,372 --> 00:05:18,372
The enemy has no destination if

126
00:05:18,372 --> 00:05:20,372
they have just lost track of the player,

127
00:05:20,372 --> 00:05:22,703
signified by last player sighting

128
00:05:22,703 --> 00:05:24,703
being set to the reset position.

129
00:05:25,355 --> 00:05:27,522
Now, similar to the Chasing function,

130
00:05:27,522 --> 00:05:29,522
we need to increment the timer.

131
00:05:30,146 --> 00:05:32,146
As before we check if the enemy has

132
00:05:32,146 --> 00:05:34,146
finished waiting.

133
00:05:34,646 --> 00:05:36,646
This time we need to increment the waypoint

134
00:05:36,646 --> 00:05:39,611
index so that we can set a new destination.

135
00:05:39,611 --> 00:05:41,611
First we check whether we are already at the end

136
00:05:41,611 --> 00:05:43,611
of the array of waypoints and set the

137
00:05:43,611 --> 00:05:45,942
index to 0 if we are.

138
00:05:45,942 --> 00:05:49,017
If we aren't then we increment the index.

139
00:05:50,097 --> 00:05:52,097
And at this point we need to reset the

140
00:05:52,097 --> 00:05:54,657
timer just as in the Chasing function.

141
00:05:54,998 --> 00:05:58,186
Also as before, if we are not near the destination

142
00:05:58,186 --> 00:06:00,758
or the destination is not the reset position

143
00:06:00,758 --> 00:06:02,758
then we need to reset the timer.

144
00:06:03,949 --> 00:06:05,949
Since the rest of the function may have changed

145
00:06:05,949 --> 00:06:09,316
the destintation we can now update it.

146
00:06:10,424 --> 00:06:12,424
That concludes the script, and we've almost

147
00:06:12,424 --> 00:06:14,424
finished making the enemy.

148
00:06:14,424 --> 00:06:16,959
Save it now and return to the Editor.

149
00:06:28,816 --> 00:06:30,816
First let's tidy our script in to the

150
00:06:30,816 --> 00:06:32,816
Scripts - Enemy folder by dragging

151
00:06:32,816 --> 00:06:34,816
it from the Assets folder

152
00:06:34,816 --> 00:06:36,816
in to the Scripts - Enemy folder.

153
00:06:39,526 --> 00:06:41,526
Next let's make a prefab out of our

154
00:06:41,526 --> 00:06:44,585
robot guard so that we can make more guards.

155
00:06:44,585 --> 00:06:47,024
Drag the char_robotGuard from the hierarchy

156
00:06:47,024 --> 00:06:49,548
in to the Prefabs folder in the Project panel.

157
00:06:50,809 --> 00:06:52,809
Now we need to make instances of the

158
00:06:52,809 --> 00:06:55,896
enemy prefab and place them around the scene.

159
00:06:55,896 --> 00:06:57,896
Now that it is a prefab, duplicating

160
00:06:57,896 --> 00:06:59,896
the existing one in the scene will

161
00:06:59,896 --> 00:07:01,744
make another instance.

162
00:07:01,744 --> 00:07:03,744
So let's used command-D on mac or

163
00:07:03,744 --> 00:07:06,573
control-D on PC to create a duplicate

164
00:07:06,573 --> 00:07:11,004
and place it at (-19, 0, 37).

165
00:07:12,637 --> 00:07:14,637
Then find your guard in the scene.

166
00:07:15,910 --> 00:07:17,910
Next duplicate again and place the

167
00:07:17,910 --> 00:07:23,446
new one at (-29, 0, 43.5).

168
00:07:29,098 --> 00:07:31,098
So that there's less confusion we will

169
00:07:31,098 --> 00:07:33,098
rename the robot guards now.

170
00:07:34,675 --> 00:07:37,532
Reselect the first guard near the bottom of the map

171
00:07:37,532 --> 00:07:41,104
and add _001 to the end.

172
00:07:42,239 --> 00:07:44,239
Select the second guard,

173
00:07:45,319 --> 00:07:49,363
and rename him with _002 on the end.

174
00:07:50,623 --> 00:07:53,598
And finally add 3 to the last guard.

175
00:07:55,866 --> 00:07:57,866
The last stage of making the Stealth game

176
00:07:57,866 --> 00:08:01,167
is to create waypoints for the enemies to patrol.

177
00:08:01,167 --> 00:08:03,167
To make it easier we are going to organise

178
00:08:03,167 --> 00:08:06,071
the waypoints under a parent game object.

179
00:08:06,071 --> 00:08:09,786
Create an empty game object and call it wayPoints.

180
00:08:09,786 --> 00:08:14,556
Go to Game Object - Create Empty and rename your object.

181
00:08:16,838 --> 00:08:19,418
Set the position to (0, 0, 0)

182
00:08:19,418 --> 00:08:21,709
so that each of the waypoint's local position

183
00:08:21,709 --> 00:08:23,709
is also the global position.

184
00:08:24,582 --> 00:08:27,126
Duplicate the wayPoints object and rename it 

185
00:08:27,126 --> 00:08:29,126
wayPoint_001.

186
00:08:29,888 --> 00:08:32,396
Now make it a child of wayPoints.

187
00:08:33,338 --> 00:08:35,338
Because our waypoints will be made up of

188
00:08:35,338 --> 00:08:37,338
empty game objects we won't be able to see

189
00:08:37,338 --> 00:08:39,338
where they are in the scene view without selecting

190
00:08:39,338 --> 00:08:40,759
them one by one.

191
00:08:40,759 --> 00:08:43,679
To solve this we can use 2D gizmos.

192
00:08:43,679 --> 00:08:45,679
Gizmos are simply icons that represent

193
00:08:45,679 --> 00:08:48,245
where an object is in a scene view.

194
00:08:48,607 --> 00:08:50,607
And you can set these by clicking on the icon

195
00:08:50,607 --> 00:08:53,571
to the left of the name at the top of the Inspector.

196
00:08:54,361 --> 00:08:56,236
With wayPoint_001 selected

197
00:08:56,236 --> 00:08:59,420
click on the game object icon and then choose Other.

198
00:08:59,907 --> 00:09:01,907
Then search for wayPoint

199
00:09:02,407 --> 00:09:04,407
and you'll see an asset in the Project

200
00:09:04,407 --> 00:09:06,407
panel called wayPoint.

201
00:09:06,407 --> 00:09:10,118
This flag icon should be applied to your waypoint.

202
00:09:10,118 --> 00:09:12,118
You can then collapse this menu.

203
00:09:14,345 --> 00:09:16,955
It should look like this flag in the Scene view.

204
00:09:17,911 --> 00:09:19,911
Now we need the rest of the waypoints.

205
00:09:19,911 --> 00:09:22,337
Duplicate wayPoint_001 10 more times

206
00:09:22,337 --> 00:09:24,337
and rename so that each of them has an

207
00:09:24,337 --> 00:09:26,527
individual number. You should end up with

208
00:09:26,527 --> 00:09:29,153
wayPoint_001 to wayPoint_011.

209
00:09:30,546 --> 00:09:32,546
Now that we have all the waypoints we can position

210
00:09:32,546 --> 00:09:34,546
them around the level as we wish.

211
00:09:34,546 --> 00:09:36,546
The first four we are going to use for the

212
00:09:36,546 --> 00:09:39,327
patrol route of robot guard number 1.

213
00:09:40,062 --> 00:09:43,150
The positions for waypoints 001 to 004 are

214
00:09:43,150 --> 00:09:46,713
(-26.75, 0, 7)

215
00:09:50,542 --> 00:09:55,973
(-25.4, 0, 14.5)

216
00:09:57,592 --> 00:10:01,322
(-18.8, 0, 14)

217
00:10:05,620 --> 00:10:09,387
and (-18.5, 0, 7).

218
00:10:14,666 --> 00:10:16,914
Centring on the building on the left hand side

219
00:10:16,914 --> 00:10:18,914
of the map you should see that there are 4

220
00:10:18,914 --> 00:10:20,914
waypoint flags now setup.

221
00:10:22,878 --> 00:10:26,244
Now we need to reposition the final 7 waypoints.

222
00:10:26,244 --> 00:10:28,244
These make up the two patrol routes of the

223
00:10:28,244 --> 00:10:30,867
robot guards near the end of the level.

224
00:10:30,867 --> 00:10:33,789
The next four waypoints have the following positions.

225
00:10:34,676 --> 00:10:41,185
Select wayPoint_005 and position at (-10, 0, 36.4)

226
00:10:41,185 --> 00:10:46,573
wayPoint_006 is at (-10, 0, 44.8)

227
00:10:46,573 --> 00:10:52,787
wayPoint_007 is at (-17.9, 0, 44.8)

228
00:10:54,337 --> 00:10:59,950
wayPoint_008 is at (-17.8, 0, 36.4)

229
00:11:01,817 --> 00:11:05,072
And the last three waypoints have these positions.

230
00:11:05,572 --> 00:11:11,013
wayPoint_009 is at (-27, 0, 35.4)

231
00:11:13,985 --> 00:11:19,178
wayPoint_010 is at (-17.9, 0, 43)

232
00:11:20,134 --> 00:11:26,335
and finally wayPoint_011 is at (-28.2, 0, 43).

233
00:11:30,633 --> 00:11:32,633
Looking at the end of the level you should now

234
00:11:32,633 --> 00:11:35,233
see that our flags are setup as shown.

235
00:11:35,233 --> 00:11:37,233
All that remains is to apply the waypoints

236
00:11:37,233 --> 00:11:39,233
to the appropriate enemies.

237
00:11:39,233 --> 00:11:42,514
First select char_robotGuard_001

238
00:11:43,276 --> 00:11:46,235
and scroll down to the EnemyAI script.

239
00:11:46,235 --> 00:11:49,154
From the hierarchy drag wayPoints 1 to 4

240
00:11:49,154 --> 00:11:51,764
in order on to the Patrol Way Points field

241
00:11:51,764 --> 00:11:53,764
of the EnemyAI script.

242
00:12:00,508 --> 00:12:03,054
They should now appear in order as shown.

243
00:12:04,362 --> 00:12:06,362
Now select guard_002

244
00:12:07,470 --> 00:12:10,280
and drag on waypoints 5 to 8.

245
00:12:15,808 --> 00:12:18,487
And finally guard_003 will need waypoints

246
00:12:18,487 --> 00:12:21,567
9, 8, 10 and 11.

247
00:12:21,567 --> 00:12:23,567
This unusual order is because we

248
00:12:23,567 --> 00:12:26,809
are using one of the same waypoints as guard_002,

249
00:12:27,406 --> 00:12:30,632
so be sure to drag them on in this order.

250
00:12:48,425 --> 00:12:50,147
And don't forget to save your scene

251
00:12:50,147 --> 00:12:52,147
and save your project.

252
00:12:55,355 --> 00:12:57,355
Now that we're finally ready to test our game

253
00:12:57,355 --> 00:12:59,355
we can check for any errors and any

254
00:12:59,355 --> 00:13:02,101
thing that we've forgotten to assign within the project.

255
00:13:03,043 --> 00:13:05,416
Let's press play and test our game.

256
00:13:05,416 --> 00:13:07,416
Remember that our controls for sneak,

257
00:13:07,416 --> 00:13:10,282
using switches and attracting attention

258
00:13:10,282 --> 00:13:14,038
are left-shift, Z and X respectively.

259
00:13:27,522 --> 00:13:29,522
The first thing to notice here is that

260
00:13:29,522 --> 00:13:31,522
as we've died Unity has shown

261
00:13:31,522 --> 00:13:34,019
us an error at the bottom of the screen

262
00:13:34,019 --> 00:13:36,019
An unassigned reference exception,

263
00:13:36,019 --> 00:13:38,809
the variable deathClip of PlayerHealth

264
00:13:38,809 --> 00:13:40,365
has not been assigned.

265
00:13:40,989 --> 00:13:42,989
So what we need to do is fix this before

266
00:13:42,989 --> 00:13:44,864
we continue testing.

267
00:13:44,864 --> 00:13:48,092
So I'll stop play, reselect the player

268
00:13:48,592 --> 00:13:50,220
char_Ethan

269
00:13:50,651 --> 00:13:52,292
and we can see here that deathClip

270
00:13:52,292 --> 00:13:54,967
in the PlayerHeath script has not been assigned.

271
00:13:55,688 --> 00:13:57,688
This is a very common problem when writing

272
00:13:57,688 --> 00:13:59,466
scripts with public variables.

273
00:13:59,466 --> 00:14:01,829
Often you will forget to assign references

274
00:14:01,829 --> 00:14:03,829
and Unity will prompt you to do these are

275
00:14:03,829 --> 00:14:05,402
they are called by a script.

276
00:14:05,902 --> 00:14:07,734
So simply select the Audio folder

277
00:14:08,234 --> 00:14:11,900
and drag the endgame audio clip on to the Death Clip.

278
00:14:15,397 --> 00:14:17,397
Now let's play test again.

279
00:14:19,927 --> 00:14:21,464
And we'll deliberately allow ourselves

280
00:14:21,464 --> 00:14:23,464
to be shot by the guards.

281
00:14:33,730 --> 00:14:35,730
And now we can see that our game

282
00:14:35,730 --> 00:14:39,065
plays back the end clip and resets the level.

283
00:14:40,187 --> 00:14:42,187
Let's continue to play test.

284
00:17:00,575 --> 00:17:02,369
And not that we've reached the end of the game

285
00:17:02,369 --> 00:17:04,369
we've verified that our game works properly.

286
00:17:04,369 --> 00:17:08,142
Congratulations, you've now finished the Stealth project.

287
00:17:08,142 --> 00:17:10,142
If you want, try out the stretch goals

288
00:17:10,142 --> 00:17:12,142
that we've set out in the next assignment.

289
00:17:12,142 --> 00:17:14,844
And we very much hope you've enjoyed this project.

290
00:17:14,844 --> 00:17:16,844
Thanks for watching.

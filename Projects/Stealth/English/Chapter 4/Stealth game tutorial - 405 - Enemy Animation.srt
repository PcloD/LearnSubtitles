1
00:00:00,249 --> 00:00:02,224
In this assignment we will write code

2
00:00:02,224 --> 00:00:04,532
to control the movement of the enemy.

3
00:00:04,532 --> 00:00:07,305
The enemy will be driven by the animator,

4
00:00:07,305 --> 00:00:09,305
taking movement from the root motion of

5
00:00:09,305 --> 00:00:12,524
the animation clips that we provided previously.

6
00:00:13,576 --> 00:00:15,939
Animator parameters control which animation

7
00:00:15,939 --> 00:00:17,939
states the animator should play

8
00:00:17,939 --> 00:00:20,163
and therefore how the enemies move.

9
00:00:20,663 --> 00:00:22,913
We will set these parameters using velocities

10
00:00:22,913 --> 00:00:24,913
from the nav mesh agent

11
00:00:24,913 --> 00:00:27,411
and we will modify the values with code

12
00:00:27,411 --> 00:00:29,411
to correct certain behaviours.

13
00:00:30,173 --> 00:00:32,173
When using the nav mesh the system gives

14
00:00:32,173 --> 00:00:34,714
the agent a desired velocity.

15
00:00:34,714 --> 00:00:36,714
This is not the actually velocity that the agent

16
00:00:36,714 --> 00:00:40,169
is moving, but one that it should head towards.

17
00:00:40,669 --> 00:00:42,669
Nav mesh agents such as our enemy

18
00:00:42,669 --> 00:00:45,322
have a waypoint path to a destination,

19
00:00:45,322 --> 00:00:47,322
shown here by a red line.

20
00:00:48,084 --> 00:00:50,084
The agent turns to face the waypoint

21
00:00:50,084 --> 00:00:52,749
whilst travelling towards it, and we say that

22
00:00:52,749 --> 00:00:55,726
the velocity of the agent, shown by the black arrow

23
00:00:55,726 --> 00:00:58,370
is heading towards the desired velocity,

24
00:00:58,370 --> 00:01:00,370
shown with the green arrow.

25
00:01:00,370 --> 00:01:02,370
This desired velocity will be the basis

26
00:01:02,370 --> 00:01:04,370
of the values that we'll send to the enemy's

27
00:01:04,370 --> 00:01:07,979
animator parameters Speed and Angular Speed.

28
00:01:09,087 --> 00:01:11,087
Let's begin by creating the script to

29
00:01:11,087 --> 00:01:13,031
control these parameters.

30
00:01:13,031 --> 00:01:15,031
Add a new script to the Robot Guard called

31
00:01:15,031 --> 00:01:17,031
EnemyAnimation.

32
00:01:17,031 --> 00:01:19,215
Select char_robotGuard and choose

33
00:01:19,215 --> 00:01:21,545
Add Component - New Script

34
00:01:21,545 --> 00:01:23,794
and name it EnemyAnimation.

35
00:01:24,391 --> 00:01:27,838
Launch the script for editing and prepare it.

36
00:01:28,617 --> 00:01:30,617
First let's take a look at the class variables

37
00:01:30,617 --> 00:01:33,564
that we will need. There is only one public variable

38
00:01:33,564 --> 00:01:35,564
that we will need, which is a float

39
00:01:35,564 --> 00:01:37,467
we will call deadZone.

40
00:01:37,467 --> 00:01:40,247
The deadzone, similar to a deadzone in input terms,

41
00:01:40,247 --> 00:01:42,819
is a value range which should be ignored

42
00:01:42,819 --> 00:01:44,819
in the case of enemy navigation

43
00:01:44,819 --> 00:01:47,308
we do not want the enemies to attempt to turn

44
00:01:47,308 --> 00:01:49,700
when the difference between their forward direction

45
00:01:49,700 --> 00:01:52,299
and their desired velocity is very small.

46
00:01:52,299 --> 00:01:54,299
And we define this with the deadzone.

47
00:01:54,799 --> 00:01:56,799
Without this we would see the enemies

48
00:01:56,799 --> 00:01:58,799
oversteering and walking in wavering

49
00:01:58,799 --> 00:02:00,923
lines towards each waypoint.

50
00:02:00,923 --> 00:02:02,923
As shown in this example.

51
00:02:13,823 --> 00:02:16,084
We will need 6 private variables.

52
00:02:16,084 --> 00:02:17,420
The first of which is a reference

53
00:02:17,420 --> 00:02:19,280
to the player's transform.

54
00:02:19,280 --> 00:02:21,280
We will need this to set the direction that the enemy

55
00:02:21,280 --> 00:02:24,312
faces to the player when they are in sight.

56
00:02:26,083 --> 00:02:27,683
Next we will need a reference to the

57
00:02:27,683 --> 00:02:29,683
EnemySight script so that we can change the

58
00:02:29,683 --> 00:02:31,683
animation based on whether the player is in

59
00:02:31,683 --> 00:02:33,683
sight or not.

60
00:02:35,067 --> 00:02:37,412
Then we will need a reference to the nav mesh agent

61
00:02:37,412 --> 00:02:40,624
component which will be guiding the enemies movement.

62
00:02:41,345 --> 00:02:43,345
Next we will need a reference to the animator

63
00:02:43,345 --> 00:02:45,345
component and to help reference it's

64
00:02:45,345 --> 00:02:47,345
parameters we will need a reference to

65
00:02:47,345 --> 00:02:49,345
the HashIDs script.

66
00:02:51,406 --> 00:02:53,406
The last will be an instance of the helper class

67
00:02:53,406 --> 00:02:55,928
that we made during the last assignment,

68
00:02:55,928 --> 00:02:57,928
AnimatorSetup.

69
00:02:59,326 --> 00:03:01,326
Next we will use the Awake function to

70
00:03:01,326 --> 00:03:03,326
setup these references.

71
00:03:24,752 --> 00:03:26,752
In addition to allocating the references

72
00:03:26,752 --> 00:03:28,752
we will also need the awake function to perform

73
00:03:28,752 --> 00:03:30,752
a number of other actions.

74
00:03:30,752 --> 00:03:32,752
Firstly we must make sure that the rotation

75
00:03:32,752 --> 00:03:35,074
of the enemy is set by the animator

76
00:03:35,074 --> 00:03:37,074
and not by the nav mesh agent.

77
00:03:37,074 --> 00:03:39,501
This will reduce the appearance of foot slipping

78
00:03:39,501 --> 00:03:41,501
whilst turning corners.

79
00:03:42,084 --> 00:03:44,084
We will also need to create an instance

80
00:03:44,084 --> 00:03:46,084
of our helper function from the previous

81
00:03:46,084 --> 00:03:48,084
assignment, and in doing so

82
00:03:48,084 --> 00:03:49,820
call it's constructor.

83
00:03:49,820 --> 00:03:52,028
We can parse in the animator component

84
00:03:52,028 --> 00:03:53,724
and the HashIDs script that we already

85
00:03:53,724 --> 00:03:55,724
have a reference to.

86
00:03:56,390 --> 00:03:58,390
We need to set the layer weight of the different

87
00:03:58,390 --> 00:04:00,390
layers of the animator.

88
00:04:00,390 --> 00:04:02,790
The Weight value controls the balance of animation

89
00:04:02,790 --> 00:04:04,566
from the layers on the animator.

90
00:04:05,152 --> 00:04:07,359
We are going to make both the Shooting

91
00:04:07,359 --> 00:04:09,553
and Gun layers have a weight of 1,

92
00:04:09,553 --> 00:04:11,553
meaning that they will totally override the

93
00:04:11,553 --> 00:04:14,144
layers beneath them, such as the base layer.

94
00:04:14,144 --> 00:04:16,144
This means that the animation would be purely

95
00:04:16,144 --> 00:04:17,841
based on those layers.

96
00:04:17,841 --> 00:04:19,841
However we are using a mask for both the

97
00:04:19,841 --> 00:04:21,841
Shooting and Gun layers so that the only

98
00:04:21,841 --> 00:04:24,186
parts of the body that they can override

99
00:04:24,186 --> 00:04:26,959
are the upper body and right hand respectively.

100
00:04:27,362 --> 00:04:29,919
So we use the Set Layer Weight function

101
00:04:29,919 --> 00:04:31,919
and use the integer of the layer.

102
00:04:31,919 --> 00:04:33,919
For example the base layer should be referenced

103
00:04:33,919 --> 00:04:37,397
with a 0, so because we're referencing Shooting and Gun

104
00:04:37,397 --> 00:04:39,796
we will use 1 to represent Shooting

105
00:04:39,796 --> 00:04:41,920
and 2 to represent Gun

106
00:04:41,920 --> 00:04:44,462
and we set both of them to 1f.

107
00:04:45,235 --> 00:04:47,749
The last thing that we need to do in the Awake function

108
00:04:47,749 --> 00:04:49,749
is to convert the deadZone variable

109
00:04:49,749 --> 00:04:51,609
from degrees to radians.

110
00:04:51,609 --> 00:04:53,609
This is because the animator controller we made

111
00:04:53,609 --> 00:04:56,750
earlier measures the parameter in radians.

112
00:04:56,750 --> 00:04:59,245
Luckily the Mathf class has a constant

113
00:04:59,245 --> 00:05:02,275
that we can use for this, deg2rad.

114
00:05:02,275 --> 00:05:04,275
A constant is like a variable,

115
00:05:04,275 --> 00:05:07,182
however once it has been set it cannot be changed.

116
00:05:07,182 --> 00:05:09,182
In order to convert a number from degrees

117
00:05:09,182 --> 00:05:12,630
to radians we simply multiply by this constant.

118
00:05:12,630 --> 00:05:14,630
The majority of this script will be setting

119
00:05:14,630 --> 00:05:17,544
up the animations based on the nav mesh agent.

120
00:05:17,544 --> 00:05:19,544
To do this we will create a function that we

121
00:05:19,544 --> 00:05:21,544
can call in the Update function.

122
00:05:21,544 --> 00:05:24,348
We will call it NavAnimSetup.

123
00:05:24,348 --> 00:05:26,708
The first thing we are going to do in this function

124
00:05:26,708 --> 00:05:29,015
is to create two floats for the Speed

125
00:05:29,015 --> 00:05:31,015
and Angle parameters that we will parse to

126
00:05:31,015 --> 00:05:33,015
the helper class's Setup function.

127
00:05:35,808 --> 00:05:38,863
Now we need to decide if the player is in sight.

128
00:05:40,896 --> 00:05:42,896
If the player is in sight then we

129
00:05:42,896 --> 00:05:44,896
want the enemy to stop, so we will set

130
00:05:44,896 --> 00:05:46,896
the Speed parameter to 0.

131
00:05:48,832 --> 00:05:50,832
Now we need to find the angle between the direction

132
00:05:50,832 --> 00:05:53,136
the enemy should face and the direction

133
00:05:53,136 --> 00:05:55,136
it is actually facing.

134
00:05:55,136 --> 00:05:58,451
Negative to the left and positive to the right.

135
00:05:59,061 --> 00:06:01,061
We will need to make another function in order

136
00:06:01,061 --> 00:06:02,521
to do this for us.

137
00:06:02,521 --> 00:06:04,521
It needs to return a float

138
00:06:04,521 --> 00:06:07,868
and will need 3 vector3s as parameters.

139
00:06:07,868 --> 00:06:10,034
A vector we are measuring from,

140
00:06:10,034 --> 00:06:12,216
a vector we are measuring to,

141
00:06:12,216 --> 00:06:14,216
and another vector to determine which

142
00:06:14,216 --> 00:06:16,768
way is up. We will call this function

143
00:06:16,768 --> 00:06:18,768
FindAngle.

144
00:06:21,160 --> 00:06:23,160
The toVector we are going to parse in to

145
00:06:23,160 --> 00:06:26,512
this is the nav mesh agent's desired velocity.

146
00:06:26,512 --> 00:06:28,678
This will sometimes equal 0.

147
00:06:28,678 --> 00:06:30,954
If this is the case then it might cause an error

148
00:06:30,954 --> 00:06:33,464
so we will need to put in a way to check for this.

149
00:06:33,464 --> 00:06:35,464
If the desired velocity is 0

150
00:06:35,464 --> 00:06:37,464
then we want the direction to be 0.

151
00:06:37,464 --> 00:06:39,464
If this is the case we can simply return

152
00:06:39,464 --> 00:06:42,116
0 from the function, and if this isn't

153
00:06:42,116 --> 00:06:44,116
the case then we will continue with

154
00:06:44,116 --> 00:06:46,116
the rest of the code.

155
00:06:46,116 --> 00:06:48,116
The next step is to find out the absolute

156
00:06:48,116 --> 00:06:49,543
value of the angle.

157
00:06:49,543 --> 00:06:51,458
We can do this very simply with the

158
00:06:51,458 --> 00:06:54,227
vector3.angle function.

159
00:06:55,335 --> 00:06:57,335
Now we need to determine whether this angle is

160
00:06:57,335 --> 00:06:59,335
to the left or to the right of the

161
00:06:59,335 --> 00:07:02,050
forward direction. To do this we can find the

162
00:07:02,050 --> 00:07:04,463
cross product of the two vectors

163
00:07:04,463 --> 00:07:07,099
and check the resultant normal vector.

164
00:07:07,099 --> 00:07:09,572
Using the lefthand rule for the cross product

165
00:07:09,572 --> 00:07:12,108
we know that if the toVector is to the right

166
00:07:12,108 --> 00:07:14,108
of the fromVector their normal

167
00:07:14,108 --> 00:07:15,460
will point upwards.

168
00:07:15,460 --> 00:07:17,848
See the lesson on Vector Maths linked below

169
00:07:17,848 --> 00:07:19,848
if you need reminding of this.

170
00:07:32,669 --> 00:07:34,669
Now we can find the .product of this

171
00:07:34,669 --> 00:07:37,697
Normal and the Up vector that we parsed in.

172
00:07:37,697 --> 00:07:39,697
If the Normal and the Up vector are pointing

173
00:07:39,697 --> 00:07:41,697
in the same direction the result will

174
00:07:41,697 --> 00:07:44,401
be greater than 0, therefore we can multiply

175
00:07:44,401 --> 00:07:46,773
the angle that we've already calculated

176
00:07:46,773 --> 00:07:49,532
by the sign of the .product that we have found.

177
00:07:49,532 --> 00:07:51,825
This will show whether the desired velocity

178
00:07:51,825 --> 00:07:55,333
is to the left or the right of the Forward vector.

179
00:07:56,441 --> 00:07:59,277
Remember that we need this angle to be in radians.

180
00:07:59,277 --> 00:08:01,098
So we need to multiply it by the

181
00:08:01,098 --> 00:08:03,770
Deg2Rad constant that we used earlier.

182
00:08:04,330 --> 00:08:07,044
And finally we can return the angle.

183
00:08:07,848 --> 00:08:10,193
Now that we have a function to find the angle

184
00:08:10,193 --> 00:08:12,193
we can use it in our NavAnim

185
00:08:12,193 --> 00:08:13,724
setup function. 

186
00:08:13,724 --> 00:08:16,913
The fromVector is the enemy's forward vector,

187
00:08:16,913 --> 00:08:18,913
the toVector is the vector from the

188
00:08:18,913 --> 00:08:21,216
enemy to the player and we will use the

189
00:08:21,216 --> 00:08:24,514
enemy's upVector as the up vector.

190
00:08:26,450 --> 00:08:27,812
Now we need to account for when the

191
00:08:27,812 --> 00:08:29,812
player is not in sight.

192
00:08:31,238 --> 00:08:33,238
Given that the player is not in sight

193
00:08:33,238 --> 00:08:35,238
we want the speed to be based on the

194
00:08:35,238 --> 00:08:37,712
nav mesh agent's desired velocity.

195
00:08:37,712 --> 00:08:40,486
To achieve this we can use projection

196
00:08:40,486 --> 00:08:42,486
in order to project the desired velocity

197
00:08:42,486 --> 00:08:46,080
vector on to the enemy's forward vector.

198
00:08:46,080 --> 00:08:48,559
Projection allows us to take 2 vectors

199
00:08:48,559 --> 00:08:51,002
and find out how much of the first vector

200
00:08:51,002 --> 00:08:53,528
is in the direction of the other vector.

201
00:08:54,317 --> 00:08:56,317
A projection is found by drawing a line

202
00:08:56,317 --> 00:08:58,317
from the tip of the first vector

203
00:08:58,317 --> 00:09:00,676
towards the second vector.

204
00:09:00,676 --> 00:09:02,676
It must be drawn so that this line is

205
00:09:02,676 --> 00:09:04,676
perpendicular to the direction

206
00:09:04,676 --> 00:09:06,327
of the second vector.

207
00:09:07,007 --> 00:09:09,007
The point of the intersection of this line

208
00:09:09,007 --> 00:09:12,275
defines the end of the projection vector.

209
00:09:12,275 --> 00:09:14,275
Since we are projecting the nav mesh agent's

210
00:09:14,275 --> 00:09:17,862
desired velocity on to the enemy's forward vector

211
00:09:17,862 --> 00:09:19,862
the resultant vector will be small

212
00:09:19,862 --> 00:09:22,698
if the enemy is not facing the same direction

213
00:09:22,698 --> 00:09:24,698
as the desired velocity.

214
00:09:25,198 --> 00:09:27,198
The speed variable will be set to the

215
00:09:27,198 --> 00:09:29,584
magnitude of the projection vector.

216
00:09:29,584 --> 00:09:31,584
Without using this projection the

217
00:09:31,584 --> 00:09:33,584
enemy might have a high speed whilst

218
00:09:33,584 --> 00:09:36,067
facing the wrong direction, and thus running a

219
00:09:36,067 --> 00:09:39,744
wide arch in order to face the correct direction.

220
00:09:41,446 --> 00:09:43,446
Next we need to determine the angle.

221
00:09:43,446 --> 00:09:46,256
Again we will use our findAngle function

222
00:09:46,256 --> 00:09:48,256
but this time the toVector is the

223
00:09:48,256 --> 00:09:51,016
nav mesh agent's desired velocity.

224
00:09:53,408 --> 00:09:55,408
Since we are using damping to set the animator

225
00:09:55,408 --> 00:09:57,408
parameters when they are turning

226
00:09:57,408 --> 00:09:59,408
they won't stop turning as soon as they face

227
00:09:59,408 --> 00:10:01,408
their correct direction. Instead they will

228
00:10:01,408 --> 00:10:03,670
continue to turn very slightly.

229
00:10:03,670 --> 00:10:06,542
They will then need to turn back to compensate.

230
00:10:06,542 --> 00:10:08,542
This will result in a snaking motion

231
00:10:08,542 --> 00:10:10,542
as they finish turning corners.

232
00:10:11,443 --> 00:10:13,443
In order to prevent this we need to put

233
00:10:13,443 --> 00:10:15,443
a check in to our function.

234
00:10:15,443 --> 00:10:17,443
This check will simply be whether the angle

235
00:10:17,443 --> 00:10:21,244
is small, i.e. less than our deadZone variable.

236
00:10:21,993 --> 00:10:24,940
If it is then we avoid using the animator controller

237
00:10:24,940 --> 00:10:27,397
to set the direction that the enemy is facing

238
00:10:27,397 --> 00:10:29,912
To do this we set the angle to 0

239
00:10:29,912 --> 00:10:31,912
and set the enemy's transform to look at

240
00:10:31,912 --> 00:10:34,878
the desired velocity from it's own position.

241
00:10:38,831 --> 00:10:40,831
Now that we have calculated the speed and

242
00:10:40,831 --> 00:10:42,831
angle we can parse them in to

243
00:10:42,831 --> 00:10:44,831
the Setup function of our helper class

244
00:10:44,831 --> 00:10:46,583
animator setup.

245
00:10:47,180 --> 00:10:49,180
They can then have damping applied and be

246
00:10:49,180 --> 00:10:51,656
parsed in to the animator controller.

247
00:10:52,971 --> 00:10:56,319
Now that we have our completed NavAnimSetup function

248
00:10:56,319 --> 00:10:58,977
we can call it in the Update function.

249
00:11:01,567 --> 00:11:03,567
Note that whilst we have inserted this function

250
00:11:03,567 --> 00:11:05,567
above ones that we have already written

251
00:11:05,567 --> 00:11:07,567
this is not necessary.

252
00:11:07,567 --> 00:11:09,567
We are doing this in order to maintain a flowing

253
00:11:09,567 --> 00:11:11,567
structure to the script.

254
00:11:12,730 --> 00:11:15,063
First come the class variables,

255
00:11:15,063 --> 00:11:17,063
then the Awake function is called,

256
00:11:17,063 --> 00:11:20,260
then every frame the Update function is called.

257
00:11:21,506 --> 00:11:24,484
This in turn calls the NavAnimSetup function

258
00:11:24,484 --> 00:11:27,257
which calls the FindAngle function.

259
00:11:29,277 --> 00:11:31,277
The last thing we need to do with this script

260
00:11:31,277 --> 00:11:34,100
is to effect the root motion of the enemy.

261
00:11:34,100 --> 00:11:36,100
Normally we have the choice of either applying

262
00:11:36,100 --> 00:11:39,009
root motion or not on the animator component.

263
00:11:39,009 --> 00:11:41,009
However if we use the OnAnimatorMove

264
00:11:41,009 --> 00:11:44,824
function, which is called after Update every frame,

265
00:11:44,824 --> 00:11:47,408
then we can effect the root motion manually.

266
00:11:48,291 --> 00:11:51,377
There are two things we need to control in this function.

267
00:11:51,377 --> 00:11:54,257
The velocity of the enemy and it's rotation.

268
00:11:54,257 --> 00:11:56,257
To control the velocity we must set the nav

269
00:11:56,257 --> 00:11:59,524
mesh agent's velocity to the delta position

270
00:11:59,524 --> 00:12:02,498
of the animation divided by the delta time.

271
00:12:03,371 --> 00:12:06,011
This is the change in position per frame.

272
00:12:06,672 --> 00:12:09,326
As for the rotation, we have already set the

273
00:12:09,326 --> 00:12:12,246
nav mesh agent so that it does not control rotation.

274
00:12:12,246 --> 00:12:14,246
This is so that we can effect the rotation

275
00:12:14,246 --> 00:12:18,146
directly using the animation's root rotation.

276
00:12:19,810 --> 00:12:22,059
And that's our script complete.

277
00:12:22,059 --> 00:12:23,709
Now that the script is finished,

278
00:12:23,709 --> 00:12:27,360
we can save it and return to the Editor.

279
00:12:28,647 --> 00:12:30,647
Don't forget to tidy the script away by

280
00:12:30,647 --> 00:12:32,647
putting it in to the Enemy folder.

281
00:12:33,147 --> 00:12:35,676
Expand the Scripts folder and drop it from

282
00:12:35,676 --> 00:12:39,123
the root of Assets in to the Enemy folder.

283
00:12:39,623 --> 00:12:42,840
Now let's save the scene and save the project.

284
00:12:46,862 --> 00:12:48,862
In the next assignment we will be making a

285
00:12:48,862 --> 00:12:51,122
script to make the enemy shoot the player.

1
00:00:00,373 --> 00:00:02,219
The next stage in creating our enemy

2
00:00:02,219 --> 00:00:04,219
is to create the EnemyShooting script

3
00:00:04,219 --> 00:00:06,219
to control all the aspects of the enemies

4
00:00:06,219 --> 00:00:07,871
firing their guns.

5
00:00:07,871 --> 00:00:09,871
Before we make the script we need to give the

6
00:00:09,871 --> 00:00:11,871
robot a gun. The model we need is

7
00:00:11,871 --> 00:00:13,634
in the Models folder

8
00:00:14,134 --> 00:00:17,243
and is called prop_sciFiGun_low.

9
00:00:20,505 --> 00:00:22,505
Drill down in to the hierarchy of the robot guard

10
00:00:22,505 --> 00:00:25,486
until you find his right hand.

11
00:00:28,361 --> 00:00:31,432
Then zoom with the Scene view until you can see it.

12
00:00:33,617 --> 00:00:35,617
Now drag the gun model from the Project panel

13
00:00:35,617 --> 00:00:39,296
and drop it on to the hand as a child object.

14
00:00:39,296 --> 00:00:41,296
We need to position this gun so that it is in

15
00:00:41,296 --> 00:00:43,296
the right position for when the enemy is

16
00:00:43,296 --> 00:00:45,296
walking and shooting.

17
00:00:45,296 --> 00:00:52,395
We are using a position of (0.1, 0.021, -0.02)

18
00:00:53,807 --> 00:01:01,165
and a rotation of (332, 101.4, 263.8).

19
00:01:02,438 --> 00:01:04,438
These settings will compensate for the position

20
00:01:04,438 --> 00:01:06,813
of the enemies hand when animated normally.

21
00:01:06,813 --> 00:01:08,813
Next we need to make some effects for when the

22
00:01:08,813 --> 00:01:11,384
gun is fired. Create a new game object

23
00:01:11,384 --> 00:01:14,380
and call it fx_laserShot,

24
00:01:14,380 --> 00:01:16,877
and then make it a child of the gun.

25
00:01:19,629 --> 00:01:21,629
Now we can tweak the position of this game object

26
00:01:21,629 --> 00:01:24,018
so that it's at the end of the gun.

27
00:01:24,018 --> 00:01:26,018
We will start by resetting it

28
00:01:26,518 --> 00:01:32,813
and then move the position to (0, 0.05, 0.2).

29
00:01:36,988 --> 00:01:38,666
Now we are going to add a point light

30
00:01:38,666 --> 00:01:40,345
and a line renderer.

31
00:01:40,345 --> 00:01:42,345
These will be triggered when the gun is fired.

32
00:01:42,845 --> 00:01:44,845
To add the light click Add Component

33
00:01:45,345 --> 00:01:47,680
Rendering - Light.

34
00:01:48,304 --> 00:01:51,367
The default type is a point light, which is what we want.

35
00:01:51,367 --> 00:01:54,008
To add the line renderer click Add Component

36
00:01:54,008 --> 00:01:56,008
FX - Line Renderer

37
00:01:57,585 --> 00:01:59,585
A line renderer creates a simple flat

38
00:01:59,585 --> 00:02:01,585
mesh that connects 2 or more points

39
00:02:01,585 --> 00:02:03,921
with a material drawn on to it.

40
00:02:03,921 --> 00:02:06,307
It is ideal for drawing effects like lasers

41
00:02:06,307 --> 00:02:08,307
as we will be. You might notice that by adding

42
00:02:08,307 --> 00:02:10,307
a line renderer we now have a pink

43
00:02:10,307 --> 00:02:12,307
square at the origin. This is because the

44
00:02:12,307 --> 00:02:14,801
line renderer currently has no material.

45
00:02:14,801 --> 00:02:16,801
To fix this search for the material called

46
00:02:16,801 --> 00:02:21,470
fx_laserShot in the Project panel and then drag it on.

47
00:02:22,357 --> 00:02:24,357
Also, in order to give our laser a bit of a

48
00:02:24,357 --> 00:02:26,357
tapered effect we are going to change

49
00:02:26,357 --> 00:02:29,066
the width to 0.05 at the start

50
00:02:29,066 --> 00:02:31,650
and 0.025 at the end.

51
00:02:31,650 --> 00:02:33,650
You can find these settings under the parameter

52
00:02:33,650 --> 00:02:34,806
section of the component.

53
00:02:34,806 --> 00:02:37,580
The point light will mostly be controlled by code

54
00:02:37,580 --> 00:02:39,580
but we will turn the intensity down to 0

55
00:02:39,580 --> 00:02:41,580
to start so that it doesn't interfer with

56
00:02:41,580 --> 00:02:43,251
the lighting in the scene.

57
00:02:43,804 --> 00:02:45,804
We now want to write a script for controlling

58
00:02:45,804 --> 00:02:47,804
all the aspects of the enemy shooting.

59
00:02:47,804 --> 00:02:49,804
Close the enemy's hierarchy and select

60
00:02:49,804 --> 00:02:51,804
the parent object now.

61
00:02:52,912 --> 00:02:55,326
Add a script called EnemyShooting.

62
00:02:55,326 --> 00:02:57,948
Then open it and prepare it as usual.

63
00:03:03,821 --> 00:03:05,821
We are going to make the damage done to the player

64
00:03:05,821 --> 00:03:07,570
scale with proximity.

65
00:03:07,570 --> 00:03:09,570
The closer the enemy is the more damage

66
00:03:09,570 --> 00:03:11,570
it does when shooting the player.

67
00:03:11,570 --> 00:03:13,570
With that in mind there are a few public

68
00:03:13,570 --> 00:03:15,570
class variables that we need to setup.

69
00:03:16,208 --> 00:03:18,208
Firstly we need 2 floats representing the

70
00:03:18,208 --> 00:03:20,457
maximum and minimum damage per shot.

71
00:03:20,457 --> 00:03:22,759
The player has 100 health to start with

72
00:03:22,759 --> 00:03:26,029
and if close enough a single shot should kill the player.

73
00:03:26,029 --> 00:03:28,029
That said, the player should not have to be

74
00:03:28,029 --> 00:03:30,029
right next to the enemy in order to

75
00:03:30,029 --> 00:03:31,612
die from a single shot.

76
00:03:31,612 --> 00:03:33,612
So we will give the maximum damage a 

77
00:03:33,612 --> 00:03:35,612
default of 120.

78
00:03:36,499 --> 00:03:38,499
The minimum damage of each shot should still be

79
00:03:38,499 --> 00:03:40,499
significant since we want to encourage

80
00:03:40,499 --> 00:03:42,247
stealth in this game.

81
00:03:42,247 --> 00:03:44,692
Let's give it a default of 45.

82
00:03:45,175 --> 00:03:47,175
Next we will need an audio clip to be

83
00:03:47,175 --> 00:03:49,175
played with each shot.

84
00:03:49,855 --> 00:03:52,897
We are using a point light to help simulate the shot.

85
00:03:52,897 --> 00:03:54,897
We need an intensity for the light as the gun

86
00:03:54,897 --> 00:03:56,897
fires and a speed at which the flash

87
00:03:56,897 --> 00:03:58,897
should diminish.

88
00:03:59,867 --> 00:04:01,867
In addition to those we have a few private

89
00:04:01,867 --> 00:04:03,867
class variables that we will need.

90
00:04:03,867 --> 00:04:06,376
We will need a reference to the animator component.

91
00:04:06,376 --> 00:04:08,376
Since we are referencing the animator we will

92
00:04:08,376 --> 00:04:10,846
need a reference to the HashIDs script.

93
00:04:12,133 --> 00:04:14,133
We have a line renderer and a light

94
00:04:14,133 --> 00:04:16,133
for effects that we will need references to.

95
00:04:18,180 --> 00:04:20,756
To give the enemy a distance range for firing

96
00:04:20,756 --> 00:04:23,150
we will use the radius of the sphere collider

97
00:04:23,150 --> 00:04:25,150
so we will need a reference to that as well.

98
00:04:26,327 --> 00:04:28,327
We need to know the player's position so

99
00:04:28,327 --> 00:04:30,327
we will need a reference to it's transform.

100
00:04:31,393 --> 00:04:33,393
The last reference we need is to the

101
00:04:33,393 --> 00:04:35,393
PlayerHealth script, so that we can call

102
00:04:35,393 --> 00:04:37,393
the TakeDamage function.

103
00:04:37,893 --> 00:04:39,893
Aside from these references we will also need

104
00:04:39,893 --> 00:04:41,893
a Boolean variable to determine whether

105
00:04:41,893 --> 00:04:43,893
or not the enemy is currently shooting.

106
00:04:43,893 --> 00:04:45,893
And finally we are going to use a float

107
00:04:45,893 --> 00:04:48,658
to store the amount of damaged that is scaled.

108
00:04:48,658 --> 00:04:50,658
This will be the difference between the maximum

109
00:04:50,658 --> 00:04:53,401
and minimum damage, this is not essential

110
00:04:53,401 --> 00:04:55,401
but it is slightly neater and makes the

111
00:04:55,401 --> 00:04:57,401
code earier to read.

112
00:04:57,901 --> 00:05:00,432
Now that that's done let's assign our references

113
00:05:00,432 --> 00:05:02,432
in the Awake function as normal.

114
00:05:21,827 --> 00:05:23,827
To find the line renderer we are using a

115
00:05:23,827 --> 00:05:26,888
function called GetComponentInChildren.

116
00:05:26,888 --> 00:05:29,411
This returns a component of the given type,

117
00:05:29,411 --> 00:05:31,411
but looks on a game object and all of it's

118
00:05:31,411 --> 00:05:33,411
child game objects to find it.

119
00:05:33,411 --> 00:05:36,109
It is worth noting that since the laser shot light

120
00:05:36,109 --> 00:05:38,675
and laser shot line are on the same game object

121
00:05:38,675 --> 00:05:40,941
and we already have a reference to the line

122
00:05:40,941 --> 00:05:43,396
we can use the game object it's attached to

123
00:05:43,396 --> 00:05:45,176
to get the reference to the light.

124
00:05:45,176 --> 00:05:47,813
We use a similar principle to find player health

125
00:05:47,813 --> 00:05:49,813
once we have the player transform.

126
00:05:49,813 --> 00:05:51,813
The next commands that we need to add to awake

127
00:05:51,813 --> 00:05:53,813
are to make sure that by default

128
00:05:53,813 --> 00:05:55,813
the laser shot line is disabled

129
00:05:55,813 --> 00:05:58,919
and the laser shot light's intensity is 0.

130
00:06:00,095 --> 00:06:02,799
Lastly we will need to set scaled damage

131
00:06:02,799 --> 00:06:04,799
to the difference between the maximum damage

132
00:06:04,799 --> 00:06:06,799
and the minimum damage.

133
00:06:07,423 --> 00:06:09,800
Next we will look at the Update function.

134
00:06:10,300 --> 00:06:12,300
In Update we need to check the current value

135
00:06:12,300 --> 00:06:14,300
of the shot curve that we used in the enemy's

136
00:06:14,300 --> 00:06:16,300
animator controller, so we will store it

137
00:06:16,300 --> 00:06:17,995
as a float here.

138
00:06:17,995 --> 00:06:19,995
Remember that the EnemyShoot animation

139
00:06:19,995 --> 00:06:22,758
features a curve which begins at 0,

140
00:06:22,758 --> 00:06:24,758
peaks in value when the weapon is fired

141
00:06:24,758 --> 00:06:26,758
and then quickly returns to 0.

142
00:06:27,258 --> 00:06:30,304
We can use the value from this to time our effects.

143
00:06:35,376 --> 00:06:37,376
Now that we have stored the value of this curve

144
00:06:37,376 --> 00:06:39,376
we need to check if it is peaking.

145
00:06:39,876 --> 00:06:41,876
If it is above 0.5

146
00:06:41,876 --> 00:06:43,557
then we can assume that it's peaking.

147
00:06:43,557 --> 00:06:45,557
However we only want to shoot once

148
00:06:45,557 --> 00:06:48,255
so we make sure that it's not already shooting

149
00:06:48,255 --> 00:06:50,753
when we first detect that the curve is peaking.

150
00:06:52,164 --> 00:06:55,211
Next we are going to create our empty Shoot function

151
00:06:55,211 --> 00:06:58,009
so that we can put a call to it here.

152
00:06:58,009 --> 00:07:00,916
The Shoot function should be called once per shot.

153
00:07:01,416 --> 00:07:04,307
We will come back to complete this function shortly.

154
00:07:04,307 --> 00:07:07,099
Next we need to check if the curve is not peaking

155
00:07:08,566 --> 00:07:10,566
and if it is not then we know the enemy

156
00:07:10,566 --> 00:07:11,941
is not shooting.

157
00:07:12,634 --> 00:07:14,634
We should also turn off the line renderer

158
00:07:14,634 --> 00:07:16,317
so that it's not displayed when the enemy

159
00:07:16,317 --> 00:07:17,875
is not shooting.

160
00:07:18,486 --> 00:07:20,486
The last thing we need to do in our update is to

161
00:07:20,486 --> 00:07:23,734
fade out the flash of light when the enemy shoots.

162
00:07:23,734 --> 00:07:26,061
To do that we will use a lerp to fade the

163
00:07:26,061 --> 00:07:29,905
intensity of our laser shot light between itself and 0.

164
00:07:32,490 --> 00:07:34,490
Now we can move on to the Shoot function.

165
00:07:34,490 --> 00:07:36,490
The first thing we need to do in this function is

166
00:07:36,490 --> 00:07:38,490
to say that we are shooting.

167
00:07:38,490 --> 00:07:40,490
The maximum distance at which the enemy

168
00:07:40,490 --> 00:07:42,490
can shoot the player is the radius of his

169
00:07:42,490 --> 00:07:45,112
sphere collider, this is because when the player

170
00:07:45,112 --> 00:07:48,289
is beyond this distance he is no longer in sight.

171
00:07:48,289 --> 00:07:50,289
With this in mind, the next thing we

172
00:07:50,289 --> 00:07:52,289
need to do is to calculate the distance

173
00:07:52,289 --> 00:07:54,718
of the player from the enemy as a fraction of

174
00:07:54,718 --> 00:07:56,553
the sphere collider's radius.

175
00:07:56,553 --> 00:07:58,553
This should be a number that equals 1 when

176
00:07:58,553 --> 00:08:01,254
the distance from the enemy to the player is 0

177
00:08:01,254 --> 00:08:03,768
and when the player is at the edge of the collider,

178
00:08:03,768 --> 00:08:06,954
the maximum range, the number should equal 0.

179
00:08:09,263 --> 00:08:11,263
This is calculated by finding the difference

180
00:08:11,263 --> 00:08:13,263
between the collider's radius and

181
00:08:13,263 --> 00:08:15,871
the distance from the enemy to the player

182
00:08:16,896 --> 00:08:19,651
and dividing by the collider's radius.

183
00:08:21,067 --> 00:08:23,067
Next we need to calculate the damage that the

184
00:08:23,067 --> 00:08:25,067
player will take, that is, the amount

185
00:08:25,067 --> 00:08:27,124
of damage to be scaled multiplied by the

186
00:08:27,124 --> 00:08:30,607
fractional distance plus the minimum damage.

187
00:08:32,958 --> 00:08:34,958
Now we can call the TakeDamage function from

188
00:08:34,958 --> 00:08:36,958
the PlayerHealth script and parse in the

189
00:08:36,958 --> 00:08:38,958
amount of damage we have calculated.

190
00:08:41,640 --> 00:08:43,640
Finally we will need to display the visual

191
00:08:43,640 --> 00:08:45,640
effects of the shot, but instead of

192
00:08:45,640 --> 00:08:47,640
putting that here we will put it in to a separate

193
00:08:47,640 --> 00:08:51,045
function called ShotEffects and call it here.

194
00:08:52,002 --> 00:08:54,002
First we need to set the start position of

195
00:08:54,002 --> 00:08:56,223
the line renderer to be at the end of the gun,

196
00:08:56,223 --> 00:08:58,223
which is already the position of our

197
00:08:58,223 --> 00:09:00,653
fx_laserShot game object

198
00:09:00,653 --> 00:09:02,308
and we need to set the end position to

199
00:09:02,308 --> 00:09:03,919
be where the player is.

200
00:09:03,919 --> 00:09:06,698
We do this using the SetPosition function.

201
00:09:06,698 --> 00:09:08,698
The first parameter is an integer representing

202
00:09:08,698 --> 00:09:12,113
the point of the line, 0 being the first point,

203
00:09:12,113 --> 00:09:14,113
1 being the second, etsetera.

204
00:09:14,113 --> 00:09:16,113
The second parameter is a vector3

205
00:09:16,113 --> 00:09:18,113
representing the position in world space

206
00:09:18,113 --> 00:09:20,113
of where the point should be.

207
00:09:23,292 --> 00:09:26,184
Instead of using only the player's position here

208
00:09:26,184 --> 00:09:30,185
we are adding the value of Vector3.up times 1.5.

209
00:09:30,185 --> 00:09:32,185
This is because the player's position is at

210
00:09:32,185 --> 00:09:35,052
the model's feet so we need to add some height

211
00:09:35,052 --> 00:09:38,061
so that the enemy shoots at his abdomen instead.

212
00:09:38,061 --> 00:09:40,061
Next we need to turn the laser shot line

213
00:09:40,061 --> 00:09:42,061
on by enabling the component.

214
00:09:43,404 --> 00:09:45,872
We need to set the intensity of the laser shot light

215
00:09:45,872 --> 00:09:47,872
to the flash intensity.

216
00:09:48,814 --> 00:09:50,814
Finally we need to play the Shot clip

217
00:09:50,814 --> 00:09:52,814
at the position of the laser shot.

218
00:09:53,963 --> 00:09:56,335
Now we can put a call to the ShotEffects function

219
00:09:56,335 --> 00:09:58,335
inside our Shoot function.

220
00:09:59,194 --> 00:10:01,194
Before we are finished with this script we need

221
00:10:01,194 --> 00:10:03,194
to make the enemy point the gun at the player

222
00:10:03,194 --> 00:10:05,194
when he's shooting. We are going to do this

223
00:10:05,194 --> 00:10:07,194
by using inverse kinematics,

224
00:10:07,194 --> 00:10:10,577
which is deal with in the OnAnimatorIK function.

225
00:10:10,577 --> 00:10:13,403
We will define it just below the Update function.

226
00:10:15,936 --> 00:10:17,936
The first thing we want to do in this function

227
00:10:17,936 --> 00:10:20,584
is to store the value of the Aim Weight curve that is

228
00:10:20,584 --> 00:10:24,452
on the Raise, Shoot and Lower weapon animations.

229
00:10:25,901 --> 00:10:27,901
Next we want to set the IK positions

230
00:10:27,901 --> 00:10:31,334
using the SetIKPosition function of the animator.

231
00:10:31,959 --> 00:10:33,959
 The first parameter of this function is

232
00:10:33,959 --> 00:10:37,074
an enumeration called AvatarIKGoal.

233
00:10:37,074 --> 00:10:40,350
An enumeration is a collection of named constants

234
00:10:40,350 --> 00:10:43,112
and the one we will be using will be the right hand.

235
00:10:43,100 --> 00:10:45,100
The second parameter is the position

236
00:10:45,100 --> 00:10:47,321
that the right hand should be aiming at.

237
00:10:47,321 --> 00:10:49,321
We will be using the player's position

238
00:10:49,321 --> 00:10:51,197
plus 1.5 units up

239
00:10:51,197 --> 00:10:53,197
Again this is because the player's transform

240
00:10:53,197 --> 00:10:55,794
is at his feet so in order to hit him around

241
00:10:55,794 --> 00:10:58,374
the centre we need to aim up slightly.

242
00:10:59,109 --> 00:11:02,025
Lastly we need to set the weight for the IK.

243
00:11:02,025 --> 00:11:05,381
We do this using SetIKPositionWeight.

244
00:11:05,381 --> 00:11:07,381
Again the first parameter is an

245
00:11:07,381 --> 00:11:10,698
AvatarIKGoal to say where we are applying the weight.

246
00:11:10,698 --> 00:11:13,356
So we will use the right hand enumeration again.

247
00:11:13,356 --> 00:11:15,356
The second parameter is the weight, which we

248
00:11:15,356 --> 00:11:17,356
stored earlier as the AimWeight.

249
00:11:18,547 --> 00:11:20,547
That's the end of our script so we can save

250
00:11:20,547 --> 00:11:22,547
it now and return to the Editor.

251
00:11:22,547 --> 00:11:25,610
We will reselect the char_robotGuard

252
00:11:25,610 --> 00:11:28,422
and on the Shot clip open the Audio folder

253
00:11:28,422 --> 00:11:31,836
and drag on weapon_sciFiGun_fire.

254
00:11:36,866 --> 00:11:38,866
Also remember that because we created this

255
00:11:38,866 --> 00:11:40,866
script directly on the object it will

256
00:11:40,866 --> 00:11:42,866
currently be in the root of Assets.

257
00:11:42,866 --> 00:11:47,485
So drag and drop this in to our Scripts - Enemy folder.

258
00:11:47,485 --> 00:11:50,749
Then you can save the scene and save the project.

259
00:11:51,594 --> 00:11:53,594
In the next and final assignment we will

260
00:11:53,594 --> 00:11:56,234
be going through making the EnemyAI script,

261
00:11:56,234 --> 00:11:57,956
the brain of the robot guards.

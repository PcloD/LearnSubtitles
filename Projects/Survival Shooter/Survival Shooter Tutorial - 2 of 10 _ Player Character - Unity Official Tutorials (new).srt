1
00:00:03,654 --> 00:00:05,305
So what we're going to do is setup our player now

2
00:00:05,305 --> 00:00:07,305
which is going to get him moving and jazzing and

3
00:00:07,305 --> 00:00:09,218
beboping and doing all that stuff.

4
00:00:09,218 --> 00:00:11,218
What we're going to do is we're going to go ahead and locate

5
00:00:11,218 --> 00:00:13,218
the player model, which is going to be located

6
00:00:13,218 --> 00:00:15,218
in Models folder, and we're going to

7
00:00:15,218 --> 00:00:17,817
expand that and we're going to look in the Characters folder

8
00:00:17,817 --> 00:00:19,817
and we should see a player,

9
00:00:19,817 --> 00:00:21,817
there we go, Player, it should be right there.

10
00:00:21,817 --> 00:00:23,817
So what we're going to do is we're going to go ahead and

11
00:00:23,817 --> 00:00:25,817
drag that either in to the scene or in to

12
00:00:25,817 --> 00:00:27,400
the hierarchy view.

13
00:00:27,400 --> 00:00:29,758
So we'll just click and drag and drop and there he is.

14
00:00:31,640 --> 00:00:35,060
There he is, looking pretty swag.

15
00:00:35,060 --> 00:00:39,299
And so obviously if we just click and drag him to the scene he might

16
00:00:39,299 --> 00:00:40,577
go where ever, you know, so we need to

17
00:00:40,577 --> 00:00:42,884
place him at a specific spot so we're going to be sure that

18
00:00:42,884 --> 00:00:45,514
the position is at (0, 0, 0).

19
00:00:46,120 --> 00:00:48,120
If it is then you're golden, if it's not then

20
00:00:48,120 --> 00:00:50,120
go ahead and set it to (0, 0, 0)

21
00:00:50,120 --> 00:00:52,120
by typing (0, 0, 0) or again we

22
00:00:52,120 --> 00:00:54,120
have this cog or gear icon

23
00:00:54,120 --> 00:00:56,351
and you can just click reset or reset position,

24
00:00:56,351 --> 00:00:59,198
which will put it where ever we want it to be on the origin.

25
00:00:59,198 --> 00:01:01,198
Now we need specific things to

26
00:01:01,198 --> 00:01:03,390
interact with the player in a very special way.

27
00:01:03,390 --> 00:01:05,390
And so we want to ensure that we have properly

28
00:01:05,390 --> 00:01:07,390
tagged our player so certain things will know

29
00:01:07,390 --> 00:01:09,390
when they've come in contact with the player.

30
00:01:09,794 --> 00:01:13,119
To do that we have this Tag drop down

31
00:01:13,119 --> 00:01:15,964
here in the inspector and it currently says Untagged.

32
00:01:15,964 --> 00:01:17,964
And what we're going to do is we're going to click that drop down

33
00:01:17,964 --> 00:01:19,964
and we are going to select Player.

34
00:01:19,964 --> 00:01:21,964
Thus tagging our player

35
00:01:21,964 --> 00:01:23,964
as the player so that the player will

36
00:01:23,964 --> 00:01:25,964
behave appropriately when they are playing.

37
00:01:27,051 --> 00:01:28,127
Alright, fantastic.

38
00:01:28,127 --> 00:01:30,127
Now what we need to do is

39
00:01:30,127 --> 00:01:32,127
we're going to go ahead and create

40
00:01:32,127 --> 00:01:34,127
an animation controller for our player,

41
00:01:34,127 --> 00:01:36,127
which is going to allow us to

42
00:01:36,127 --> 00:01:38,127
have all the neat little

43
00:01:38,127 --> 00:01:40,127
animation effects of moving and turning and

44
00:01:40,127 --> 00:01:41,480
doing all that stuff,

45
00:01:41,480 --> 00:01:43,163
and I'm still zoomed in here.

46
00:01:43,163 --> 00:01:45,163
So what we want to do is we want to go ahead and

47
00:01:45,163 --> 00:01:47,163
locate the Animation folder

48
00:01:47,163 --> 00:01:47,959
which we'll just click on right here.

49
00:01:47,959 --> 00:01:50,897
Currently it is in fact empty and we are going to make

50
00:01:50,897 --> 00:01:53,801
an animator controller.

51
00:01:53,801 --> 00:01:55,551
Shall we just talk a little bit about the

52
00:01:55,551 --> 00:01:57,206
animations that we've setup first?

53
00:01:57,206 --> 00:01:58,363
Great idea!

54
00:01:58,363 --> 00:02:01,680
Cool. So the model that we've just dragged in

55
00:02:02,478 --> 00:02:06,738
is the player model and what you can do is drag up

56
00:02:07,575 --> 00:02:10,907
the preview window in the lower right of the editor.

57
00:02:10,907 --> 00:02:13,514
So this model has been animated

58
00:02:13,514 --> 00:02:15,514
for you, so when you bring in an FPX

59
00:02:15,514 --> 00:02:17,950
in to Unity, or a Maya file

60
00:02:17,950 --> 00:02:19,950
or a 3DS Max, whatever package you use,

61
00:02:20,594 --> 00:02:22,594
When you bring that in you can

62
00:02:22,594 --> 00:02:24,594
store animations within it or if you have

63
00:02:24,594 --> 00:02:26,594
a humanoid, a biped-type model

64
00:02:26,594 --> 00:02:29,577
you can retarget those animations on to 

65
00:02:29,577 --> 00:02:31,577
similar type of models.

66
00:02:32,115 --> 00:02:34,115
This particular thing is rigged

67
00:02:34,115 --> 00:02:36,115
in what we call a generic manner.

68
00:02:36,634 --> 00:02:39,573
So if I look at my rig you can see generic up at the top.

69
00:02:41,198 --> 00:02:43,198
And what that means is that it's a very specific

70
00:02:43,198 --> 00:02:46,887
bone structure because our character is going to move like this.

71
00:02:47,675 --> 00:02:49,502
It's going to be kind of hopping around.

72
00:02:49,502 --> 00:02:52,272
So he's not got two arms, two legs as a biped would.

73
00:02:52,272 --> 00:02:54,895
So the animations that are stored in this

74
00:02:55,664 --> 00:02:58,545
particular model that we've given you

75
00:02:58,545 --> 00:03:01,039
are a move, an idle and a death.

76
00:03:01,039 --> 00:03:03,039
So what we're going to do now is to create

77
00:03:03,039 --> 00:03:05,957
a state machine called the Animator Controller

78
00:03:05,957 --> 00:03:07,957
to control when these three different

79
00:03:07,957 --> 00:03:10,485
animations are going to be played back.

80
00:03:11,177 --> 00:03:13,177
If you're looking in the inspector here

81
00:03:13,177 --> 00:03:15,177
I highly encourage you not to

82
00:03:15,177 --> 00:03:16,754
touch anything.

83
00:03:16,754 --> 00:03:18,754
Because these changes change how Unity

84
00:03:18,754 --> 00:03:21,263
imports the stuff and if you just start clicking

85
00:03:21,263 --> 00:03:23,263
and a little box comes up and says 'would you like to apply?'

86
00:03:23,263 --> 00:03:24,476
and you're like 'yeah, apply for what?'

87
00:03:24,476 --> 00:03:26,476
and then all of a sudden your stuff is not going to

88
00:03:26,476 --> 00:03:28,476
work later, so just look but don't touch.

89
00:03:28,476 --> 00:03:30,360
So we're doing this just to

90
00:03:30,360 --> 00:03:32,360
show your where the animation's going to be

91
00:03:32,360 --> 00:03:34,360
coming from and we're going to go ahead and

92
00:03:34,360 --> 00:03:36,053
actually implement it now.

93
00:03:36,053 --> 00:03:38,053
We're going to go back to this animation folder

94
00:03:38,053 --> 00:03:40,053
and again it's still empty so

95
00:03:40,053 --> 00:03:42,053
no magic there yet.

96
00:03:42,053 --> 00:03:44,053
And we're going to go ahead and add what's called

97
00:03:44,053 --> 00:03:45,656
an animator controller. 

98
00:03:45,656 --> 00:03:48,311
Animator controllers are part of the mecan animation

99
00:03:48,311 --> 00:03:51,206
system, they're basically a finite state machine that just

100
00:03:51,206 --> 00:03:53,206
blends animations and does all this neat stuff,

101
00:03:53,206 --> 00:03:55,695
it's actually magic, we hired wizards.

102
00:03:55,695 --> 00:03:57,695
And what we're going to do is we're going to go ahead and

103
00:03:57,695 --> 00:03:59,695
create this asset that's going to allow us to do that.

104
00:03:59,695 --> 00:04:01,695
So I'm going to right click here inside

105
00:04:01,695 --> 00:04:05,057
this animation folder in the project view here

106
00:04:05,057 --> 00:04:07,057
and I am going to select

107
00:04:07,057 --> 00:04:09,888
Create and then Animator Controller.

108
00:04:09,888 --> 00:04:12,762
Not Animation, not Animator Override Controller

109
00:04:12,762 --> 00:04:14,762
but Animator Controller.

110
00:04:14,762 --> 00:04:16,762
And I'm going to get this name here and I'm going to name it

111
00:04:16,762 --> 00:04:21,328
Player AC for Animator Controller.

112
00:04:21,915 --> 00:04:22,860
There we go.

113
00:04:22,860 --> 00:04:24,860
And so once we have that what we're 

114
00:04:24,860 --> 00:04:26,860
going to do is we are going to

115
00:04:26,860 --> 00:04:28,860
actually just click and drag that on

116
00:04:28,860 --> 00:04:30,860
to the player, which is going to apply this animator

117
00:04:30,860 --> 00:04:32,860
controller to the player,

118
00:04:32,860 --> 00:04:34,860
I'm not going to put it under the player

119
00:04:34,860 --> 00:04:36,860
I'm going to put it on the player and you'll know the difference

120
00:04:36,860 --> 00:04:39,611
because Player itself will become highlighted.

121
00:04:39,611 --> 00:04:41,611
And I'll let go.

122
00:04:41,611 --> 00:04:43,611
I can confirm I did this correctly be clicking on the player

123
00:04:43,611 --> 00:04:46,297
and I see here Player AC

124
00:04:46,297 --> 00:04:48,297
is now listed in the animator

125
00:04:48,297 --> 00:04:50,297
component, Player AC, right there.

126
00:04:50,297 --> 00:04:52,297
That's how I know I've done it correctly.

127
00:04:54,845 --> 00:04:57,669
Now let's go ahead and look at this animator controller,

128
00:04:57,669 --> 00:04:58,758
now that we have it created,

129
00:04:58,758 --> 00:05:01,501
and to do that I can go to Window

130
00:05:01,501 --> 00:05:03,501
and then select Animator

131
00:05:03,501 --> 00:05:05,501
but easier is to

132
00:05:05,501 --> 00:05:07,946
see my Player AC and just double click on it,

133
00:05:07,946 --> 00:05:10,820
which is automatically going to open up the animator window.

134
00:05:10,820 --> 00:05:12,820
If it's not docked here

135
00:05:12,820 --> 00:05:14,820
you can just dock it by clicking the

136
00:05:14,820 --> 00:05:17,371
tab, dragging it and docking it in to the window.

137
00:05:17,371 --> 00:05:19,371
So as we were looking at earlier

138
00:05:19,371 --> 00:05:21,371
when Will clicked on the player

139
00:05:21,371 --> 00:05:23,371
FPX model and we looked in the inspector and we saw

140
00:05:23,371 --> 00:05:25,908
those animations that were baked in to those settings.

141
00:05:25,908 --> 00:05:28,480
Those actually create assets that we're able to use.

142
00:05:28,480 --> 00:05:30,480
So if I go back to the Model's

143
00:05:30,480 --> 00:05:33,055
character's folder right here.

144
00:05:34,267 --> 00:05:37,078
and again look at my player.fpx.

145
00:05:37,453 --> 00:05:39,453
If I were to expand that I would

146
00:05:39,453 --> 00:05:41,453
see the assets that make up

147
00:05:41,453 --> 00:05:43,453
this imported model

148
00:05:43,453 --> 00:05:45,453
and so I'm going to go ahead and click this model here

149
00:05:45,453 --> 00:05:48,051
and what I see is I see these three animations

150
00:05:48,051 --> 00:05:50,051
death,  idle and move.

151
00:05:50,051 --> 00:05:52,051
So not only were the animations imported

152
00:05:52,051 --> 00:05:54,348
as part of the model but we actually have them assets

153
00:05:54,348 --> 00:05:56,010
that we can utilise.

154
00:05:56,010 --> 00:05:58,010
And so what I'm going to do now is I'm actually

155
00:05:58,010 --> 00:06:00,623
going to just take each of these in turn

156
00:06:00,623 --> 00:06:02,623
and move them in to my

157
00:06:02,623 --> 00:06:04,623
animator window, I'm just going to click and drag them,

158
00:06:04,623 --> 00:06:06,121
and drop them

159
00:06:06,873 --> 00:06:09,717
I'm just going in order here so I'm going to do death,

160
00:06:09,717 --> 00:06:11,717
idle and move, the order's not going to matter because

161
00:06:11,717 --> 00:06:13,717
we're going to reorder them in just a moment.

162
00:06:14,861 --> 00:06:16,861
So when you have this done right

163
00:06:16,861 --> 00:06:18,861
you'll see that you have this Any state

164
00:06:18,861 --> 00:06:21,666
and a Death state and an Idle state and a Move state.

165
00:06:21,666 --> 00:06:23,666
And so we'll notice that the death state is

166
00:06:23,666 --> 00:06:25,666
orange, or which ever state you drag in first

167
00:06:25,666 --> 00:06:26,816
is orange, right?

168
00:06:26,816 --> 00:06:28,816
Orange means that it's the default state.

169
00:06:28,816 --> 00:06:31,491
Obviously I do not want death as the default state

170
00:06:31,491 --> 00:06:33,491
It's a sad game but it's not that sad.

171
00:06:33,491 --> 00:06:35,491
And so what I want to do is

172
00:06:35,491 --> 00:06:37,491
I am going to set a different state

173
00:06:37,491 --> 00:06:39,491
as our default state, so I am going to right click

174
00:06:39,491 --> 00:06:42,663
on Idle and I'm going to click

175
00:06:42,663 --> 00:06:44,663
Set As Default.

176
00:06:46,625 --> 00:06:49,335
So that will then turn orange.

177
00:06:49,335 --> 00:06:51,335
And I can reorder by clicking and dragging and moving

178
00:06:51,335 --> 00:06:53,335
things around, if you just happened to be very particular

179
00:06:53,335 --> 00:06:55,952
about how things look you can start

180
00:06:55,952 --> 00:06:57,952
building yourself some geometric structures if you really

181
00:06:57,952 --> 00:06:58,806
feel like it, whatever.

182
00:06:58,806 --> 00:07:01,618
Anyway, now we have idle as the

183
00:07:01,618 --> 00:07:03,618
default state and so what we need to do

184
00:07:03,618 --> 00:07:05,618
is we need to

185
00:07:05,618 --> 00:07:07,618
tell the animator

186
00:07:07,618 --> 00:07:09,618
when we want to transition from one

187
00:07:09,618 --> 00:07:11,174
state to another state.

188
00:07:11,174 --> 00:07:13,782
So we've got these three states, idle, move and death.

189
00:07:13,782 --> 00:07:16,810
And they're self-contained animations, they can play and all that stuff but

190
00:07:16,810 --> 00:07:18,810
the logic of when we go from one

191
00:07:18,810 --> 00:07:20,810
to the next isn't currently in here.

192
00:07:20,810 --> 00:07:22,810
So what we need to do is we need to create something

193
00:07:22,810 --> 00:07:24,810
called a parameter which is basically going to control

194
00:07:24,810 --> 00:07:26,609
when something happens,

195
00:07:26,609 --> 00:07:28,207
when something changes state.

196
00:07:28,207 --> 00:07:30,207
And we access those parameters right here

197
00:07:30,207 --> 00:07:32,207
with this little Parameters button

198
00:07:32,207 --> 00:07:33,686
it's very cleverly named,

199
00:07:33,686 --> 00:07:36,033
and we have this little + icon right there.

200
00:07:36,033 --> 00:07:38,033
What we want to do is we want to create a parameter

201
00:07:38,033 --> 00:07:39,572
so the first parameter we're going to create,

202
00:07:39,572 --> 00:07:41,572
when we click this we're going to see some options

203
00:07:41,572 --> 00:07:43,572
we can create a float, as in a floating point number,

204
00:07:43,572 --> 00:07:46,237
int is an integer, bool is a boolean

205
00:07:46,237 --> 00:07:49,100
or trigger, we want to create a boolean

206
00:07:49,100 --> 00:07:52,124
and we're going to call this IsWalking.

207
00:07:52,124 --> 00:07:54,516
It's very important that you spell it right

208
00:07:55,018 --> 00:07:56,622
like I just did not.

209
00:07:56,622 --> 00:07:58,622
There we go, IsWalking,

210
00:07:58,622 --> 00:07:59,895
and then enter.

211
00:07:59,895 --> 00:08:01,895
It has to be capital I

212
00:08:01,895 --> 00:08:05,680
lowercase s, capital W alking.

213
00:08:05,680 --> 00:08:07,680
alright, it's important that it's spelt

214
00:08:07,680 --> 00:08:09,680
right because we have scripts that you're going to use

215
00:08:09,680 --> 00:08:11,680
that reference it by name

216
00:08:11,680 --> 00:08:14,996
so if you named it something else, like Skeletor,

217
00:08:14,996 --> 00:08:16,996
when the time comes it's not going to work

218
00:08:16,996 --> 00:08:20,554
you'll just have to open up your code and change it

219
00:08:20,554 --> 00:08:21,808
which you really don't want to do.

220
00:08:21,808 --> 00:08:23,808
So we have this IsWalking which is a boolean which

221
00:08:23,808 --> 00:08:25,449
means it can be either true or false

222
00:08:25,449 --> 00:08:27,449
and that true or false will dictate whether

223
00:08:27,449 --> 00:08:29,449
he is walking.

224
00:08:29,449 --> 00:08:31,449
I'm going to create another one now so again I'm going to click

225
00:08:31,449 --> 00:08:33,449
this little + icon and I'm going to select

226
00:08:33,449 --> 00:08:35,449
Trigger, and a trigger is like a boolean.

227
00:08:35,449 --> 00:08:37,449
It can have a state True or False

228
00:08:37,449 --> 00:08:39,449
but unlike a boolean the moment we set it to true

229
00:08:39,449 --> 00:08:41,449
it sets it back to false.

230
00:08:41,449 --> 00:08:43,449
Which is useful when I just want to

231
00:08:43,449 --> 00:08:46,007
trigger something to happen one time and then it resets itself.

232
00:08:46,007 --> 00:08:48,007
So we're going to select a trigger here

233
00:08:48,007 --> 00:08:50,007
and this trigger is going to be

234
00:08:50,007 --> 00:08:52,463
called Die.

235
00:08:53,357 --> 00:08:55,357
We listened to a lot of heavy metal while making this.

236
00:08:55,357 --> 00:08:57,357
So die is a trigger that's going to

237
00:08:57,357 --> 00:08:59,357
be triggered when the player

238
00:08:59,357 --> 00:09:00,771
actually dies.

239
00:09:00,771 --> 00:09:02,771
Now what we want to do is

240
00:09:02,771 --> 00:09:05,988
we have these parameters which is

241
00:09:05,988 --> 00:09:07,988
great but now we need to tell

242
00:09:07,988 --> 00:09:10,501
mechanim and the animator specifically how to use

243
00:09:10,501 --> 00:09:12,501
those parameters, we need to set up some logic

244
00:09:12,501 --> 00:09:14,501
to move us from one to the next.

245
00:09:23,058 --> 00:09:25,058
So what we want to do is we want to setup

246
00:09:25,058 --> 00:09:28,241
transitions that basically says 

247
00:09:28,241 --> 00:09:31,112
'this state is capable of going to that state'

248
00:09:31,112 --> 00:09:33,112
and 'this state is capable of going to that state'.

249
00:09:33,112 --> 00:09:35,680
We set up these transitions explicitly 

250
00:09:35,680 --> 00:09:37,680
so that we can't accidentally transition from

251
00:09:37,680 --> 00:09:40,092
say Dead to Jump,

252
00:09:40,092 --> 00:09:42,092
because that doesn't make a whole lot of sense.

253
00:09:42,092 --> 00:09:44,092
So what we want to do is create these

254
00:09:44,092 --> 00:09:46,092
transitions which basically are one-way bridges

255
00:09:46,092 --> 00:09:48,092
that define logically how

256
00:09:48,092 --> 00:09:50,092
we go from one state to another.

257
00:09:50,092 --> 00:09:52,092
So what I'm going to do is I'm going to right click on Idle

258
00:09:52,092 --> 00:09:54,092
and I'm going to select Make Transition.

259
00:09:54,592 --> 00:09:57,199
And when I click Make Transition I get this

260
00:09:57,199 --> 00:09:59,199
rodeo lasso thingy

261
00:09:59,199 --> 00:10:01,199
which is fun to play with by itself,

262
00:10:01,199 --> 00:10:02,515
but we're here for business,

263
00:10:02,515 --> 00:10:04,515
so what I'm going to do is once I've confirmed that

264
00:10:04,515 --> 00:10:06,515
there's this white line attached to my mouse

265
00:10:06,515 --> 00:10:08,515
I'm going to move my mouse over the Move

266
00:10:08,515 --> 00:10:10,515
animator state and I'm just going to click

267
00:10:10,515 --> 00:10:12,515
and it's going to connect the two.

268
00:10:12,515 --> 00:10:15,228
So now what we have is a transition from idle to move.

269
00:10:15,228 --> 00:10:17,874
See, there you go in case you didn't believe me.

270
00:10:17,874 --> 00:10:19,874
And so this is basically saying that we

271
00:10:19,874 --> 00:10:22,374
can go from idle to move.

272
00:10:22,374 --> 00:10:24,374
So what I'm going to do now is in order to

273
00:10:24,374 --> 00:10:26,839
actually dictate when that happens

274
00:10:26,839 --> 00:10:28,839
I have to click on the transition.

275
00:10:31,752 --> 00:10:32,679
Too close.

276
00:10:32,679 --> 00:10:33,508
There we go.

277
00:10:33,508 --> 00:10:36,473
I'm going to click and you'll see it turn blue

278
00:10:36,473 --> 00:10:39,196
and so now I have selected

279
00:10:39,196 --> 00:10:40,809
the transition between the two.

280
00:10:40,809 --> 00:10:42,809
And once I've done that over in the inspector view we get

281
00:10:42,809 --> 00:10:45,809
the properties of this transition

282
00:10:45,809 --> 00:10:48,145
and what I'm interested in is

283
00:10:49,155 --> 00:10:51,155
is down on the bottom we have these conditions.

284
00:10:51,155 --> 00:10:54,024
What is the condition of this transition?

285
00:10:54,024 --> 00:10:56,585
And so what I'm going to do is

286
00:10:56,585 --> 00:10:58,585
click this drop down that says Exit Time

287
00:10:58,585 --> 00:11:00,835
and I'm going to select IsWalking

288
00:11:01,614 --> 00:11:02,930
and I'm going to leave that as true.

289
00:11:02,930 --> 00:11:04,930
So the way you read this is you are transitioning

290
00:11:04,930 --> 00:11:06,930
from idle to move when IsWalking

291
00:11:06,930 --> 00:11:08,369
equals true.

292
00:11:10,545 --> 00:11:12,545
So now what I'm going to do

293
00:11:12,545 --> 00:11:15,899
is I'm just going to do the exact opposite,

294
00:11:15,899 --> 00:11:18,448
so I'm going to right click on move

295
00:11:18,448 --> 00:11:21,036
make transition, get my fun rodeo arrow,

296
00:11:21,036 --> 00:11:22,441
now I'm going to click on idle,

297
00:11:22,441 --> 00:11:24,441
so this is stating that I am able to move

298
00:11:24,441 --> 00:11:27,969
from the move state back to the idle state.

299
00:11:27,969 --> 00:11:29,969
and I'm sure that you can all guess what

300
00:11:29,969 --> 00:11:31,969
the condition for that is going to be but we'll

301
00:11:31,969 --> 00:11:34,713
go through it anyway, I'm going to select Conditions

302
00:11:35,277 --> 00:11:37,794
IsWalking equals false.

303
00:11:38,506 --> 00:11:40,738
So if the player is walking we play the walking animation.

304
00:11:40,738 --> 00:11:42,738
If the player is not walking we don't,

305
00:11:42,738 --> 00:11:44,738
we play the idle animation.

306
00:11:45,315 --> 00:11:47,315
Finally what I want to do is

307
00:11:47,315 --> 00:11:50,192
I am going to create one more transition,

308
00:11:50,192 --> 00:11:52,192
this time we want the player to be able to die.

309
00:11:52,682 --> 00:11:54,682
So to do that  we're not going

310
00:11:54,682 --> 00:11:57,486
to transition from idle or move or death

311
00:11:57,486 --> 00:11:59,486
because we can theoretically die

312
00:11:59,486 --> 00:12:01,486
in any state depending on whichever animation is

313
00:12:01,486 --> 00:12:02,775
currently going on.

314
00:12:02,775 --> 00:12:06,268
So we are going to use the Any state.

315
00:12:06,268 --> 00:12:08,721
And by that I mean the actually green any state,

316
00:12:08,721 --> 00:12:11,229
I don't mean you're going to transition from any state you want.

317
00:12:11,229 --> 00:12:13,229
So the one that says Any state.

318
00:12:13,229 --> 00:12:15,229
So I'm going to right click on that and

319
00:12:15,229 --> 00:12:17,229
I only have one option and that's Make Transition

320
00:12:17,585 --> 00:12:19,836
and I am going to transition from

321
00:12:19,836 --> 00:12:22,487
Any state to Death, so no matter what state

322
00:12:22,487 --> 00:12:24,487
you're currently in if you die, you die.

323
00:12:25,045 --> 00:12:27,045
I'm going to select that transition,

324
00:12:27,045 --> 00:12:29,045
you'll see it turn blue

325
00:12:29,045 --> 00:12:31,545
and I'm going to set my condition to be

326
00:12:33,362 --> 00:12:34,286
Die.

327
00:12:34,699 --> 00:12:36,699
Now since it's a trigger I don't need to

328
00:12:36,699 --> 00:12:39,444
specify true, false or a value like that, 

329
00:12:39,444 --> 00:12:40,973
it's just if Die get's triggered

330
00:12:40,973 --> 00:12:44,715
we immediately switch in to the death animation.

331
00:12:44,715 --> 00:12:47,251
The next thing we need to do with this player character

332
00:12:47,251 --> 00:12:50,541
is to give him a physical presence in the scene.

333
00:12:50,541 --> 00:12:52,926
So if you change from your animator window

334
00:12:53,378 --> 00:12:56,144
back to the scene view using the tab at the top

335
00:12:56,779 --> 00:12:59,148
then you can select the player.

336
00:12:59,148 --> 00:13:01,771
We're going to add a rigidbody.

337
00:13:01,771 --> 00:13:04,031
A rigidbody component is something that allows

338
00:13:04,031 --> 00:13:06,631
the physics engine of Unity to be applied to the object.

339
00:13:08,169 --> 00:13:10,169
We are going to click Add Component

340
00:13:10,169 --> 00:13:11,723
and choose Physics

341
00:13:12,506 --> 00:13:14,053
and Rigidbody.

342
00:13:14,841 --> 00:13:18,383
It's important that you don't select Physics 2D

343
00:13:18,383 --> 00:13:21,642
Rigidbody 2D, we're doing 3D physics

344
00:13:21,642 --> 00:13:22,840
so just physics.

345
00:13:23,873 --> 00:13:26,452
So then what we're going to do, because we don't want

346
00:13:26,452 --> 00:13:29,060
this to slow down over time

347
00:13:29,060 --> 00:13:31,650
we're going to set the drag and angular drag

348
00:13:31,650 --> 00:13:33,284
to infinity.

349
00:13:33,284 --> 00:13:35,284
So you can do this actually by just typing

350
00:13:35,284 --> 00:13:39,272
INF in the drag box and hitting return.

351
00:13:39,926 --> 00:13:41,926
If you've done it correctly you'll see a capitalised

352
00:13:41,926 --> 00:13:43,599
infinity.

353
00:13:44,301 --> 00:13:46,978
We do want to use gravity, we want to keep the player

354
00:13:46,978 --> 00:13:50,096
firmly grounded, despite this being a dream sequence.

355
00:13:50,750 --> 00:13:52,750
And we do want to use

356
00:13:52,750 --> 00:13:54,750
constraints, so basically we're going to use

357
00:13:54,750 --> 00:13:56,750
constraints to ensure that the player

358
00:13:56,750 --> 00:14:00,072
character doesn't fall forward or fall over any

359
00:14:00,072 --> 00:14:02,072
different directions, and we also want 

360
00:14:02,072 --> 00:14:05,723
to freeze the Y position so he doesn't sink through the floor

361
00:14:05,723 --> 00:14:08,488
or jump up or anything like that.

362
00:14:08,488 --> 00:14:11,666
In Freeze Position we're going to choose the Y coordinate

363
00:14:11,964 --> 00:14:16,191
and Freeze Rotation X and Z or Zee.

364
00:14:16,941 --> 00:14:19,434
You'll have to expand constraints if it's not currently expanded.

365
00:14:19,434 --> 00:14:21,060
Yep, sorry, you need to expand constraints, 

366
00:14:21,060 --> 00:14:23,185
if you can't see those properties you should see them

367
00:14:23,185 --> 00:14:24,332
at the bottom.

368
00:14:24,332 --> 00:14:27,247
Next we need to make sure things can actually

369
00:14:27,247 --> 00:14:29,247
bump in to the character because currently

370
00:14:29,247 --> 00:14:31,247
he reacts to physics

371
00:14:31,247 --> 00:14:33,247
but if he doesn't bump in to anything

372
00:14:33,247 --> 00:14:34,574
nothing's going to happen.

373
00:14:34,574 --> 00:14:36,574
So if you go to Add Component

374
00:14:37,286 --> 00:14:39,286
and then Physics

375
00:14:39,286 --> 00:14:40,969
and then there's a capsule collider along with

376
00:14:40,969 --> 00:14:42,969
all the other colliders there.

377
00:14:42,969 --> 00:14:44,969
We need to give it specific settings

378
00:14:44,969 --> 00:14:48,396
so we make sure that the capsule covers the player.

379
00:14:48,396 --> 00:14:50,396
So if you change the centre 

380
00:14:50,396 --> 00:14:52,396
to 0.2 in the X

381
00:14:53,079 --> 00:14:56,133
0.6 in Y and leave the Z as 0

382
00:14:56,133 --> 00:14:58,133
or Zee a 0.

383
00:14:58,902 --> 00:15:00,902
We also need to change the height

384
00:15:00,902 --> 00:15:04,473
to 1.2, so what that's going to mean is that

385
00:15:04,473 --> 00:15:06,905
this sort of leaning over character thing here

386
00:15:06,905 --> 00:15:08,905
he's got a little bit of an X offset so that the

387
00:15:08,905 --> 00:15:10,905
capsules going to cover him nicely.

388
00:15:10,905 --> 00:15:13,931
Next we need the player to make

389
00:15:13,931 --> 00:15:15,931
a little yelping sound when he gets hurt.

390
00:15:16,662 --> 00:15:18,662
So we're going to add an audio source

391
00:15:18,662 --> 00:15:20,662
component, so if you go to Add Component

392
00:15:20,662 --> 00:15:23,616
Audio, and then find Audio Source

393
00:15:24,712 --> 00:15:26,712
and we're going to change

394
00:15:26,712 --> 00:15:28,712
the audio clip from None, using the little

395
00:15:28,712 --> 00:15:30,355
circle select by it

396
00:15:31,125 --> 00:15:33,572
to Player Hurt.

397
00:15:34,351 --> 00:15:36,745
When it opens the context sensitive menu

398
00:15:36,745 --> 00:15:38,313
you can see Player Hurt there.

399
00:15:38,313 --> 00:15:40,841
One thing about the selection window is

400
00:15:40,841 --> 00:15:42,841
that you can double click to close

401
00:15:42,841 --> 00:15:44,841
it at the same time, if you want to assign something

402
00:15:44,841 --> 00:15:46,841
you can open up the circle select, double click

403
00:15:46,841 --> 00:15:48,841
will also close the window.

404
00:15:48,841 --> 00:15:50,841
Once other thing I'm going to quickly do because we've got these

405
00:15:50,841 --> 00:15:53,496
settings done is I'm going to close the rigidbody

406
00:15:53,496 --> 00:15:55,803
or collapse it up using the arrow next

407
00:15:55,803 --> 00:15:58,171
to it just so that we can see the ones below it.

408
00:15:58,620 --> 00:16:01,304
We do not want the player to make a yelp sound

409
00:16:01,304 --> 00:16:03,972
on awake, so we're going to uncheck Play On Awake

410
00:16:03,972 --> 00:16:06,914
You'll know that if you haven't unchecked that

411
00:16:06,914 --> 00:16:08,914
when you start the game it'll go 'oh'.

412
00:16:08,914 --> 00:16:11,366
If it does that go back to this

413
00:16:11,366 --> 00:16:13,366
and uncheck Play On Awake.

414
00:16:13,366 --> 00:16:16,268
So we're going to find the Player Movement script

415
00:16:16,268 --> 00:16:19,158
and that's in the Scripts - Player folder.

416
00:16:19,158 --> 00:16:22,767
So if you look in the project panel, find Scripts, expand that

417
00:16:22,767 --> 00:16:24,767
and then click on Player, you'll see on the right

418
00:16:24,767 --> 00:16:27,757
hand side the different player scripts that we've got.

419
00:16:27,757 --> 00:16:29,757
We've got an empty class called

420
00:16:29,757 --> 00:16:31,757
Player Movement and we're going to go through

421
00:16:31,757 --> 00:16:32,893
making that now.

422
00:16:32,893 --> 00:16:34,893
You can assign a script a number of different ways.

423
00:16:34,893 --> 00:16:36,893
A script is just a component

424
00:16:36,893 --> 00:16:38,893
like any other component.

425
00:16:38,893 --> 00:16:40,893
But what we're going to do is we're going to drag and drop

426
00:16:40,893 --> 00:16:42,893
for this one, so I'm going to grab

427
00:16:42,893 --> 00:16:44,893
my Player Movement script, I'm going to drag it

428
00:16:44,893 --> 00:16:48,446
up and drop if on to the player game object.

429
00:16:48,446 --> 00:16:50,446
When that's done you should see that it appears

430
00:16:50,446 --> 00:16:53,672
as a component at the bottom of the list.

431
00:16:53,672 --> 00:16:55,672
Be sure to save your scene before we go on to this next part

432
00:16:55,672 --> 00:16:57,672
too because we're in the beta software.

433
00:16:59,018 --> 00:17:02,389
So first of al double click it for opening and

434
00:17:02,389 --> 00:17:04,389
you should get mono develop to come up.

435
00:17:04,389 --> 00:17:06,389
There's a number of different ways to open a script.

436
00:17:06,389 --> 00:17:08,389
You can either double click the icon

437
00:17:08,389 --> 00:17:10,389
in the project panel, you can

438
00:17:10,389 --> 00:17:12,389
click open with it selected

439
00:17:12,389 --> 00:17:14,140
at the top of the inspector.

440
00:17:14,140 --> 00:17:16,140
Or one final way is to, when it's

441
00:17:16,140 --> 00:17:18,025
applied as a component

442
00:17:18,025 --> 00:17:20,025
you can actually click the cog icon and choose

443
00:17:20,025 --> 00:17:21,669
Edit Script.

444
00:17:22,458 --> 00:17:24,458
If you give it a moment it's going to open up that

445
00:17:24,458 --> 00:17:26,458
script editor for Unity which is

446
00:17:26,458 --> 00:17:28,267
Mono Develop.

447
00:17:28,267 --> 00:17:30,267
All of this is going to be done within

448
00:17:30,267 --> 00:17:32,267
the class, so you notice there's a pair

449
00:17:32,267 --> 00:17:36,393
of early braces, or brackets?

450
00:17:36,393 --> 00:17:38,393
What we're going to start off by doing is

451
00:17:38,393 --> 00:17:40,729
making some variables

452
00:17:40,729 --> 00:17:43,718
that we can adjust throughout the course of class.

453
00:17:43,718 --> 00:17:46,844
We're always going to start off with our public ones at the top.

454
00:17:46,844 --> 00:17:48,375
and then underneath with private ones.

455
00:17:48,375 --> 00:17:51,552
So we'll start off with a public float

456
00:17:51,552 --> 00:17:53,552
called Speed, which is obviously

457
00:17:53,552 --> 00:17:56,386
going to control how fast the player is.

458
00:17:56,386 --> 00:17:59,152
I'm going to give it a default value of 6.

459
00:17:59,152 --> 00:18:01,152
So the F on the end there is just

460
00:18:01,152 --> 00:18:03,566
saying that this is a floating point variable.

461
00:18:04,065 --> 00:18:07,549
Now we move on to the private  variables.

462
00:18:07,549 --> 00:18:09,366
So I could go ahead and type

463
00:18:09,366 --> 00:18:12,381
vector3 because vector2 is the first thing it suggests

464
00:18:12,381 --> 00:18:14,381
I could accidentally press return and get that

465
00:18:14,381 --> 00:18:17,167
but I don't, I want a vector3 type of variable.

466
00:18:17,167 --> 00:18:19,167
So these variables we're declaring

467
00:18:19,167 --> 00:18:21,988
the type of them first, if you're familiar with Java Script

468
00:18:21,988 --> 00:18:23,988
you'll remember that it does it the other way round.

469
00:18:23,988 --> 00:18:25,988
So in C# we say the type of variable first

470
00:18:25,988 --> 00:18:27,212
and then the name.

471
00:18:27,212 --> 00:18:29,212
So this one's going to be called Movement and

472
00:18:29,212 --> 00:18:31,212
we're going to use that to store

473
00:18:31,212 --> 00:18:34,007
the movement that we want to apply to the player.

474
00:18:34,007 --> 00:18:36,007
The next one we're going to have a reference

475
00:18:36,007 --> 00:18:38,007
to the animator component

476
00:18:38,007 --> 00:18:39,738
and we'll call that Anim.

477
00:18:40,584 --> 00:18:43,142
We're also going to have a reference to

478
00:18:43,142 --> 00:18:44,697
the rigidbody component

479
00:18:45,639 --> 00:18:48,338
and we'll call that Player Rigidbody.

480
00:18:50,293 --> 00:18:53,094
So the next one is an integer

481
00:18:53,094 --> 00:18:55,690
called Floor Mask, now I'm going to explain this one.

482
00:18:55,690 --> 00:18:57,690
If you remember earlier we made that floor

483
00:18:57,690 --> 00:18:59,690
quad, that big square that we just left

484
00:18:59,690 --> 00:19:01,690
on the floor, that's the thing that we want to raycast

485
00:19:01,690 --> 00:19:04,764
in to and the way we tell our raycast

486
00:19:04,764 --> 00:19:06,764
that we only want to hit that floor is we use

487
00:19:06,764 --> 00:19:09,310
a layermask, which is stored as an integer.

488
00:19:09,310 --> 00:19:11,310
If I hit save right now, basically we designed

489
00:19:11,310 --> 00:19:13,310
this project on a PC,

490
00:19:13,310 --> 00:19:15,310
we've opened it on a Mac,

491
00:19:15,310 --> 00:19:17,310
files have different line endings, it doesn't matter

492
00:19:17,310 --> 00:19:19,648
at all, just hit Convert, everything will be fine.

493
00:19:19,648 --> 00:19:21,648
So the last private variable that we're going to make

494
00:19:21,648 --> 00:19:23,648
is a float

495
00:19:23,648 --> 00:19:26,334
called camRayLength.

496
00:19:26,334 --> 00:19:28,334
That's going to be the length of the ray

497
00:19:28,334 --> 00:19:30,334
that we cast from the camera,

498
00:19:30,334 --> 00:19:32,334
and we're going to give that a value of 100.

499
00:19:32,334 --> 00:19:34,334
The next thing that we're going to do is setup

500
00:19:34,334 --> 00:19:36,334
those references.

501
00:19:36,334 --> 00:19:38,334
We're going to setup the references

502
00:19:38,334 --> 00:19:40,997
in the awake function

503
00:19:42,459 --> 00:19:44,459
Some of you will be familiar with

504
00:19:44,459 --> 00:19:47,493
the start function, awake is very similar

505
00:19:47,493 --> 00:19:49,493
but it gets called regardless of whether

506
00:19:49,493 --> 00:19:51,493
the script is enabled or not.

507
00:19:51,493 --> 00:19:54,594
So it's good for setting up references and things like that.

508
00:19:55,108 --> 00:19:57,108
We're going to start off by setting

509
00:19:57,108 --> 00:19:59,108
up our floor mask

510
00:19:59,108 --> 00:20:03,029
and we're going to use LayerMask.GetMask

511
00:20:03,029 --> 00:20:05,517
so then we can parse in a string

512
00:20:05,517 --> 00:20:07,825
which is just a word or a sentence

513
00:20:08,604 --> 00:20:10,604
of the layer that we're going to get.

514
00:20:10,604 --> 00:20:13,795
So we put the floor quad

515
00:20:13,795 --> 00:20:17,441
on the floor layer so we're going to get mask from floor.

516
00:20:18,056 --> 00:20:21,289
Then we're going to use GetComponent to

517
00:20:21,981 --> 00:20:25,056
get the references to the animator, like that.

518
00:20:26,104 --> 00:20:28,634
You'll notice a little angled brackets there,

519
00:20:28,634 --> 00:20:31,145
that's just denoting the type of what we're looking for.

520
00:20:31,145 --> 00:20:33,692
In this case we're looking for an animator so we write .

521
00:20:33,692 --> 00:20:36,789
If we were looking for a rigidbody we'd write  and so on.

522
00:20:39,164 --> 00:20:41,638
So we write  here.

523
00:20:42,609 --> 00:20:45,378
And that's all we need to do to setup the references.

524
00:20:46,080 --> 00:20:48,080
Next what we're going to do is

525
00:20:48,080 --> 00:20:51,518
put a call to fixed update.

526
00:20:51,518 --> 00:20:53,518
Fixed update is a function

527
00:20:53,518 --> 00:20:56,847
that Unity will automatically call on it's scripts

528
00:20:57,491 --> 00:21:00,699
that fires every physics update.

529
00:21:01,786 --> 00:21:05,170
Unity runs on a number of updates.

530
00:21:05,170 --> 00:21:07,170
The normal update system that you're familiar with

531
00:21:07,170 --> 00:21:09,170
runs along with rendering.

532
00:21:09,170 --> 00:21:12,335
The fixed update runs with physics.

533
00:21:12,335 --> 00:21:14,335
So since we're moving a physics character

534
00:21:14,335 --> 00:21:16,335
he's got a rigidbody attached we're going to

535
00:21:16,335 --> 00:21:18,335
use fixed update to move him.

536
00:21:18,335 --> 00:21:20,335
So what we're going to do is get the input

537
00:21:20,335 --> 00:21:23,357
from the horizontal and vertical axis,

538
00:21:23,357 --> 00:21:25,357
but we're not going to get the standard input,

539
00:21:25,357 --> 00:21:27,357
we're going to get the raw input.

540
00:21:27,847 --> 00:21:31,283
So whereas a normal axis would have values 

541
00:21:31,283 --> 00:21:33,283
varying between -1 and 1

542
00:21:33,918 --> 00:21:36,690
the raw axis will only have

543
00:21:36,690 --> 00:21:39,870
a value of -1, 0 or 1.

544
00:21:40,572 --> 00:21:44,230
It won't have any variation in between those.

545
00:21:44,230 --> 00:21:46,230
So what that means is that

546
00:21:46,230 --> 00:21:48,230
when we're controlling the character, rather than him

547
00:21:48,230 --> 00:21:51,202
slowly accelerating towards it's full speed

548
00:21:51,202 --> 00:21:53,202
he's going to immediately

549
00:21:53,202 --> 00:21:55,202
snap to full speed, which will give us a much

550
00:21:55,202 --> 00:21:56,605
more responsive feel.

551
00:21:56,605 --> 00:21:59,530
Just so you know, an axis is actually input.

552
00:21:59,530 --> 00:22:02,669
So these axis, horizontal

553
00:22:02,669 --> 00:22:05,728
vertical, jump, fire1, fire2,

554
00:22:05,728 --> 00:22:07,728
those are defaults within Unity,

555
00:22:07,728 --> 00:22:09,728
so if you're wondering what horizontal is it's

556
00:22:09,728 --> 00:22:11,728
already in there.

557
00:22:13,305 --> 00:22:16,168
So the horizontal axis basically maps

558
00:22:16,168 --> 00:22:18,168
to the A and D keys

559
00:22:18,168 --> 00:22:20,534
as well as the left and right arrow keys.

560
00:22:20,534 --> 00:22:24,880
Either of those manipulate the horizontal axis.

561
00:22:24,880 --> 00:22:27,343
Pressing the A key gives me a value of -1

562
00:22:27,343 --> 00:22:30,597
in the horizontal axis, pressing the D key

563
00:22:30,597 --> 00:22:33,235
gives me a value of 1 in the horizontal axis.

564
00:22:37,279 --> 00:22:41,376
Vertical is another axis, it's the W and S keys

565
00:22:41,376 --> 00:22:43,376
as well as the up and down arrows.

566
00:22:43,376 --> 00:22:45,376
Fire1 is your left mouse button

567
00:22:45,376 --> 00:22:47,376
or right control, so on and so forth.

568
00:22:47,376 --> 00:22:49,376
If you're curious you can go in the input manager,

569
00:22:49,376 --> 00:22:51,376
I think Will had that up there a second ago

570
00:22:51,376 --> 00:22:54,097
and that's where these axis exist and how we set them up.

571
00:22:54,097 --> 00:22:56,097
But the ones we're all using here are defaults

572
00:22:56,097 --> 00:22:58,097
so there's nothing special that you need

573
00:22:58,097 --> 00:22:59,681
to do to get those.

574
00:22:59,681 --> 00:23:03,419
Go ahead and put in the vertical axis as well,

575
00:23:03,419 --> 00:23:05,419
we're storing that as a float called V,

576
00:23:05,419 --> 00:23:07,419
so these are private variables within

577
00:23:07,419 --> 00:23:09,419
fixed update so we can use

578
00:23:09,419 --> 00:23:12,496
them within specifically fixed update.

579
00:23:12,909 --> 00:23:14,909
So remember that the variables that we created earlier

580
00:23:14,909 --> 00:23:16,909
are outside of these functions so we can use

581
00:23:16,909 --> 00:23:18,909
them within any of the functions in this script.

582
00:23:20,390 --> 00:23:22,390
Fixed update and awake are automatically

583
00:23:22,390 --> 00:23:26,815
called by Unity, they're mono-behaviour functions.

584
00:23:26,815 --> 00:23:28,815
But we can also make our own functions

585
00:23:28,815 --> 00:23:32,607
that we can call within those fixed update and awake.

586
00:23:32,607 --> 00:23:34,607
What we're going to do now is create a

587
00:23:34,607 --> 00:23:37,331
move function that we can call in fixed update later

588
00:23:37,331 --> 00:23:38,734
to move our character.

589
00:23:38,734 --> 00:23:40,734
We're basically going to split up the actual

590
00:23:40,734 --> 00:23:42,734
operations of those player movement script

591
00:23:42,734 --> 00:23:45,549
in to movement, turning and animation.

592
00:23:45,549 --> 00:23:46,608
We're going to put them in to separate functions

593
00:23:46,608 --> 00:23:48,135
to keep them all modular.

594
00:23:48,135 --> 00:23:50,135
If you make a Move function

595
00:23:50,135 --> 00:23:52,135
that's going to have 2 parameters,

596
00:23:52,135 --> 00:23:54,135
a float called H

597
00:23:55,106 --> 00:23:56,796
and a float called V

598
00:23:56,796 --> 00:23:58,796
and unsurprisingly those are going to be the input

599
00:23:58,796 --> 00:24:00,796
that we'll parse in to this function when we call it.

600
00:24:00,796 --> 00:24:02,796
We have this movement vector that we stored

601
00:24:02,796 --> 00:24:04,796
earlier and we want to set the value

602
00:24:04,796 --> 00:24:08,262
of that, so if you type movement.set

603
00:24:08,724 --> 00:24:10,724
then you get the chance to put each of the

604
00:24:10,724 --> 00:24:13,453
X, Y and Z components of those

605
00:24:13,453 --> 00:24:16,300
so we're going to use H for it's X component.

606
00:24:16,300 --> 00:24:18,300
We don't want any vertical components so we're

607
00:24:18,300 --> 00:24:19,701
going to put that as 0.

608
00:24:19,701 --> 00:24:22,154
We're going to use an F because it's a floating point.

609
00:24:23,000 --> 00:24:26,067
And then V for the Z component, so what that means is

610
00:24:26,067 --> 00:24:28,688
X and Z are flat along the ground.

611
00:24:29,596 --> 00:24:31,596
The horizontal and vertical movement that we give it

612
00:24:31,596 --> 00:24:34,978
will translate to lateral movement in the game.

613
00:24:34,978 --> 00:24:36,978
Now we've set that we have a bit of a

614
00:24:36,978 --> 00:24:40,069
problem because if you move

615
00:24:40,069 --> 00:24:43,677
just in the Z axis or just in the X axis

616
00:24:43,677 --> 00:24:45,677
then you've got a value of 1,

617
00:24:45,677 --> 00:24:47,677
like a size of 1 for that vector.

618
00:24:47,677 --> 00:24:49,677
However, if you use both then

619
00:24:49,677 --> 00:24:51,677
the length of the vector is different,

620
00:24:51,677 --> 00:24:53,677
it's 1.4,

621
00:24:53,677 --> 00:24:55,677
so we need to change that so that you don't

622
00:24:55,677 --> 00:24:57,677
get an advantage by moving diagonally.

623
00:24:57,677 --> 00:25:00,060
What we want to do is normalise that.

624
00:25:00,060 --> 00:25:02,060
So what that means is it's going to take

625
00:25:02,060 --> 00:25:04,060
a direction that we have

626
00:25:04,060 --> 00:25:06,659
but it's going to make sure that the size is always 1.

627
00:25:06,659 --> 00:25:08,659
Effectively make sure that the player moves at the same speed

628
00:25:08,659 --> 00:25:11,152
regardless of which key combination you use.

629
00:25:11,152 --> 00:25:13,152
We don't want it to move at a speed of 1, we want it to

630
00:25:13,152 --> 00:25:15,152
move at our speed, so we're going to times

631
00:25:15,152 --> 00:25:18,038
that by our speed variable that we stored.

632
00:25:18,038 --> 00:25:21,494
Also, this is called fixed update.

633
00:25:21,494 --> 00:25:23,494
So we don't want it to move at

634
00:25:23,494 --> 00:25:25,494
6 units per fixed update,

635
00:25:25,494 --> 00:25:28,377
it would move 6 units every 50th of a second

636
00:25:28,377 --> 00:25:30,377
and we wouldn't see our player ever again,

637
00:25:30,377 --> 00:25:32,377
so instead we're going to change it so that it's

638
00:25:32,377 --> 00:25:34,377
per seconds and the way we do that is by

639
00:25:34,377 --> 00:25:36,377
multiplying by Time.DeltaTime.

640
00:25:36,377 --> 00:25:40,351
DeltaTime is the time between each update call.

641
00:25:40,351 --> 00:25:42,351
So if you're moving it by that much

642
00:25:42,351 --> 00:25:44,351
per 50th of a second

643
00:25:44,351 --> 00:25:47,396
over the course of 50 50ths of a second

644
00:25:47,396 --> 00:25:49,396
it is going to move 6 units.

645
00:25:49,396 --> 00:25:51,396
So finally in this function the last thing we need to do is

646
00:25:51,396 --> 00:25:53,396
apply that movement to the player.

647
00:25:53,396 --> 00:25:55,396
So we're going to do that using a rigidbody function

648
00:25:55,396 --> 00:25:57,396
called MovePosition.

649
00:25:57,396 --> 00:25:59,396
So MovePosition moves a rigidbody

650
00:25:59,396 --> 00:26:01,396
to a position in world space.

651
00:26:01,396 --> 00:26:03,396
So we need to move it relative

652
00:26:03,396 --> 00:26:06,246
to the position that the character currently is.

653
00:26:06,246 --> 00:26:08,246
We need to add our movement

654
00:26:08,246 --> 00:26:12,380
to the player's position, the transform.position + movement.

655
00:26:12,380 --> 00:26:14,380
So it's going to be it's current positions plus

656
00:26:14,380 --> 00:26:16,380
this input that we've given him to move him

657
00:26:16,380 --> 00:26:17,504
slightly further along.

658
00:26:17,504 --> 00:26:19,504
The next thing that we're going to do is look at the

659
00:26:19,504 --> 00:26:20,464
turning of the character.

660
00:26:20,464 --> 00:26:23,593
Again we're going to make a new function.

661
00:26:23,593 --> 00:26:25,593
This time we're going to call it Turning.

662
00:26:25,593 --> 00:26:29,748
We don't require any parameters for this.

663
00:26:30,323 --> 00:26:32,323
Because the direction the character

664
00:26:32,323 --> 00:26:34,323
is facing is based on the mouse input

665
00:26:34,323 --> 00:26:36,797
rather than the input that we've already stored.

666
00:26:36,797 --> 00:26:38,797
The first thing that we're going to do is create

667
00:26:38,797 --> 00:26:40,797
a ray that we cast

668
00:26:40,797 --> 00:26:42,797
from the camera in to the scene.

669
00:26:42,797 --> 00:26:44,797
Let's have a little look at how that actually works first.

670
00:26:44,797 --> 00:26:46,797
If you have a look at this diagram we have

671
00:26:46,797 --> 00:26:48,797
a representation of the camera,

672
00:26:48,797 --> 00:26:53,403
the screen and the level plus the floor quad around the level.

673
00:26:53,403 --> 00:26:55,403
So that box that you're looking at there

674
00:26:55,403 --> 00:26:57,403
is effectively your level,

675
00:26:57,403 --> 00:26:59,403
the floor quad is around that

676
00:26:59,403 --> 00:27:01,403
and the camera, if you think of the camera as

677
00:27:01,403 --> 00:27:03,403
something that's looking from where you're

678
00:27:03,403 --> 00:27:05,202
looking at the game on the screen

679
00:27:05,202 --> 00:27:07,202
forward on to the game level

680
00:27:07,202 --> 00:27:11,427
you cast a ray, a single invisible line from that point

681
00:27:11,427 --> 00:27:14,700
to the floor quad to get a particular position back.

682
00:27:14,700 --> 00:27:16,700
And we want to use that because we want the

683
00:27:16,700 --> 00:27:18,700
character to turn and face the

684
00:27:18,700 --> 00:27:20,700
point of wherever the camera's looking. 

685
00:27:20,700 --> 00:27:22,700
So when you move the mouse around in the game

686
00:27:22,700 --> 00:27:24,700
he's going to turn around and face that position

687
00:27:24,700 --> 00:27:26,700
so that you can turn around and also shoot

688
00:27:26,700 --> 00:27:28,085
in a particular direction.

689
00:27:28,085 --> 00:27:30,085
So we see this end bracket on line 40,

690
00:27:30,085 --> 00:27:32,085
make sure that's there.

691
00:27:32,085 --> 00:27:34,085
It's a real quick gotcha that everyone always does is they

692
00:27:34,085 --> 00:27:37,161
move their functions down outside of the class

693
00:27:37,161 --> 00:27:39,161
by accident, so if you have

694
00:27:39,161 --> 00:27:41,161
avoid Turning with your open and closed brackets

695
00:27:41,161 --> 00:27:44,259
and you don't have another bracket immediately after that

696
00:27:44,259 --> 00:27:45,440
you've missed one.

697
00:27:45,440 --> 00:27:47,440
And don't just add another one

698
00:27:47,440 --> 00:27:48,756
because then you're going to have one in the wrong spot

699
00:27:48,756 --> 00:27:50,392
and another one in the wrong spot.

700
00:27:50,392 --> 00:27:52,392
Instead just move that function back

701
00:27:52,392 --> 00:27:54,392
up so that it is inside the class.

702
00:27:54,392 --> 00:27:56,392
The first thing we're going to do in this function is

703
00:27:56,392 --> 00:27:57,899
we're going to create a ray.

704
00:27:58,748 --> 00:28:00,748
So we'll call that camRay,

705
00:28:00,748 --> 00:28:02,748
a ray coming from the camera.

706
00:28:02,748 --> 00:28:04,748
And we're going to use a function of

707
00:28:04,748 --> 00:28:06,748
the camera, the main camera called

708
00:28:06,748 --> 00:28:08,748
ScrenPointToRay.

709
00:28:08,748 --> 00:28:10,748
So what that's going to do is take a point on

710
00:28:10,748 --> 00:28:12,748
the screen and cast a ray

711
00:28:12,748 --> 00:28:15,991
from that point forwards in to the scene.

712
00:28:15,991 --> 00:28:17,991
So the point that we're going to give it

713
00:28:17,991 --> 00:28:19,340
is the mouse position.

714
00:28:20,231 --> 00:28:22,231
So it's always going to find the point

715
00:28:22,231 --> 00:28:23,971
underneath the mouse if you imagine.

716
00:28:23,971 --> 00:28:25,971
So if you're looking at the game,

717
00:28:25,971 --> 00:28:27,971
there's a mouse on your screen, the point underneath that

718
00:28:27,971 --> 00:28:29,971
mouse is the point it's going to find

719
00:28:29,971 --> 00:28:31,099
if that hits the floor quad.

720
00:28:31,099 --> 00:28:33,099
We need to get information back when we

721
00:28:33,099 --> 00:28:35,099
do this raycast and in order to get

722
00:28:35,099 --> 00:28:37,409
information back from this raycast

723
00:28:37,409 --> 00:28:39,409
we need a RaycastHit variable,

724
00:28:39,409 --> 00:28:41,072
so that's what we're creating here.

725
00:28:41,072 --> 00:28:43,072
The next stage is to actually

726
00:28:43,072 --> 00:28:44,815
cast the ray that we've created.

727
00:28:44,815 --> 00:28:47,416
So we created this imaginary invisible line

728
00:28:47,416 --> 00:28:49,416
and now we need to actually perform the action

729
00:28:49,416 --> 00:28:51,416
of casting the ray

730
00:28:51,416 --> 00:28:53,416
so that it can hit something.

731
00:28:53,416 --> 00:28:55,416
A raycast function will return

732
00:28:55,416 --> 00:28:57,416
true if it has hit something

733
00:28:57,416 --> 00:29:00,201
and it will return false if it hasn't

734
00:29:00,201 --> 00:29:03,116
So we're going to put that inside and If statement.

735
00:29:03,116 --> 00:29:05,116
And if it has hit something

736
00:29:05,116 --> 00:29:07,116
then the code within the If statement

737
00:29:07,116 --> 00:29:08,325
will be carried out.

738
00:29:08,325 --> 00:29:10,325
If it hasn't hit anything then the code within

739
00:29:10,325 --> 00:29:12,325
the If statement won't be carried out

740
00:29:12,325 --> 00:29:13,901
so we'll just skip out of this function.

741
00:29:13,901 --> 00:29:16,275
That's what that little If at the start there is for.

742
00:29:16,275 --> 00:29:18,275
So we need to give this a number of parameters.

743
00:29:18,275 --> 00:29:20,275
Let's start off with the ray itself, that's the

744
00:29:20,275 --> 00:29:23,626
positions and directions of the cast that we're going to have.

745
00:29:23,626 --> 00:29:25,626
We need to use an Out variable

746
00:29:25,626 --> 00:29:27,626
for the floor hit, so Out means

747
00:29:27,626 --> 00:29:29,626
that we're going to get information out of

748
00:29:29,626 --> 00:29:31,626
this function and we're going to store it

749
00:29:31,626 --> 00:29:33,028
in that floorHit variable.

750
00:29:33,028 --> 00:29:35,028
Next we need to give it a length,

751
00:29:35,028 --> 00:29:37,843
so how far are we going to do this raycast for?.

752
00:29:37,843 --> 00:29:40,610
And that's the variable camRayLength that we store earlier.

753
00:29:40,610 --> 00:29:43,050
And finally we want to make sure that this raycast is

754
00:29:43,050 --> 00:29:46,189
only trying to hit things on the floor layer.

755
00:29:46,189 --> 00:29:48,584
That's that floor mask that we created earlier.

756
00:29:48,584 --> 00:29:51,239
Remember that since this is an If statement

757
00:29:51,239 --> 00:29:53,239
and a function there should be

758
00:29:53,239 --> 00:29:56,669
two closed braces at the end there.

759
00:29:58,188 --> 00:30:04,055
So if you see you've got if (Physics.Raycast (

760
00:30:04,055 --> 00:30:07,156
and then at the end we need to close both of those brackets again.

761
00:30:07,156 --> 00:30:12,297
Okay so we've got the open curly braces afterwards

762
00:30:12,297 --> 00:30:14,297
and this will be the code that's carried out

763
00:30:14,297 --> 00:30:16,297
if we've hit something, so we need to

764
00:30:16,297 --> 00:30:18,297
create a vector3 from the

765
00:30:18,297 --> 00:30:21,394
player to where the mouse has hit.

766
00:30:21,394 --> 00:30:23,394
And that's the floorHit.Point,

767
00:30:23,394 --> 00:30:26,530
so that's the point that it's hit the floor

768
00:30:26,530 --> 00:30:30,436
minus transform.position, that's the position of the player.

769
00:30:30,436 --> 00:30:33,808
We're going to apply this

770
00:30:33,808 --> 00:30:35,808
to the character to make him turn

771
00:30:35,808 --> 00:30:39,468
but we don't want him to sort of start leaning back

772
00:30:39,468 --> 00:30:41,468
so we need to make sure that the Y component

773
00:30:41,468 --> 00:30:43,468
of this vector is definitely 0. 

774
00:30:43,468 --> 00:30:45,468
Now we can't set a player's rotation based on

775
00:30:45,468 --> 00:30:47,468
a vector so we need to change that

776
00:30:47,468 --> 00:30:49,468
from a vector in to the

777
00:30:49,468 --> 00:30:51,468
horrible word, quaternion.

778
00:30:52,006 --> 00:30:54,006
So quaternion basically speaking is 

779
00:30:54,006 --> 00:30:55,286
a way of storing a rotation.

780
00:30:55,286 --> 00:30:57,286
We have a vector3 but we can't

781
00:30:57,286 --> 00:30:59,286
use that to store a rotation so we use a 

782
00:30:59,286 --> 00:31:02,233
quaternion and we're going to create one called newRotation

783
00:31:02,233 --> 00:31:04,233
and quaternions are also a class

784
00:31:04,233 --> 00:31:06,233
that has a number of functions of

785
00:31:06,233 --> 00:31:08,233
which we're going to use one called LookRotation

786
00:31:08,973 --> 00:31:11,541
So what lookRotation does, the default for

787
00:31:11,541 --> 00:31:13,541
characters and cameras and things like that

788
00:31:13,541 --> 00:31:16,154
in Unity and in most 3D modelling

789
00:31:16,154 --> 00:31:19,683
is that the Z axis is their forward axis.

790
00:31:19,683 --> 00:31:23,804
So we want to made the playerToMouse vector

791
00:31:23,804 --> 00:31:25,236
the forward vector of the player.

792
00:31:25,236 --> 00:31:27,881
So that's all that this function is doing

793
00:31:27,881 --> 00:31:29,555
when we give it the playerToMouse.

794
00:31:29,555 --> 00:31:31,555
When we actually have to apply it so we're going to

795
00:31:31,555 --> 00:31:33,181
address the player rigidbody.

796
00:31:33,181 --> 00:31:35,181
I'm going to use the moveRotation function

797
00:31:35,181 --> 00:31:36,987
and since we don't want to give it an offset 

798
00:31:36,987 --> 00:31:39,822
we're trying to give it a completely new rotation.

799
00:31:40,447 --> 00:31:42,447
We're just going to assign it like that, we don't need to do

800
00:31:42,447 --> 00:31:45,084
transform.rotation + newRotation,

801
00:31:45,084 --> 00:31:46,892
it's just this rotation.

802
00:31:46,892 --> 00:31:50,161
So that's our turning, the next and final function of this,

803
00:31:50,161 --> 00:31:52,161
we're going to look at the animation.

804
00:31:53,286 --> 00:31:55,657
After the turning we're going to make another function

805
00:31:55,657 --> 00:31:57,657
called Animating.

806
00:31:57,657 --> 00:32:01,845
Now we do need to give this the

807
00:32:01,845 --> 00:32:03,845
H and V parameters because

808
00:32:03,845 --> 00:32:05,845
whether or not the player is walking

809
00:32:05,845 --> 00:32:07,845
or idle is dependent on the input.

810
00:32:08,980 --> 00:32:10,980
So what we're going to do is we're going to create

811
00:32:10,980 --> 00:32:14,093
a boolean variable called Walking.

812
00:32:14,593 --> 00:32:16,593
And we need this to be true

813
00:32:17,180 --> 00:32:19,848
if either the H variable

814
00:32:19,848 --> 00:32:21,848
or the V variable has some value.

815
00:32:21,848 --> 00:32:23,848
If it's 0 then

816
00:32:23,848 --> 00:32:25,848
there's no input on that axis

817
00:32:25,848 --> 00:32:26,920
and we don't need to worry about it.

818
00:32:26,920 --> 00:32:29,735
But if either H or V has

819
00:32:29,735 --> 00:32:32,779
a value that's non-0 then

820
00:32:32,779 --> 00:32:34,779
it's true and the player is walking.

821
00:32:34,779 --> 00:32:38,299
So what that complicated bit of code there is doing

822
00:32:39,182 --> 00:32:42,560
is saying that first of all H

823
00:32:42,560 --> 00:32:44,964
is that not equal to 0?

824
00:32:45,772 --> 00:32:47,772
That will return either true of false

825
00:32:47,772 --> 00:32:51,112
depending on whether it's 0 or not 0.

826
00:32:51,939 --> 00:32:53,020
Or

827
00:32:54,626 --> 00:32:57,740
is V not equal to 0?

828
00:32:57,740 --> 00:32:59,740
What this is basically saying is 'hey, did we

829
00:32:59,740 --> 00:33:01,740
press the horizontal axis or did we

830
00:33:01,740 --> 00:33:03,047
press the vertical axis'?

831
00:33:03,047 --> 00:33:05,047
If we pressed either of those we're walking.

832
00:33:05,047 --> 00:33:06,513
If we didn't we're not.

833
00:33:06,513 --> 00:33:08,513
So the reason we're doing that is we want to

834
00:33:08,513 --> 00:33:10,513
parse this to our animator component

835
00:33:10,513 --> 00:33:13,542
so you'll remember we made a parameter called IsWalking.

836
00:33:13,946 --> 00:33:15,773
And the way that we set that is we say

837
00:33:15,773 --> 00:33:18,549
anim, so our reference to the animator component,

838
00:33:18,549 --> 00:33:20,549
Set.Bool, so we made a parameter which

839
00:33:20,549 --> 00:33:23,999
was a type bool, a boolean, true or false.

840
00:33:23,999 --> 00:33:25,371
And it was called IsWalking. 

841
00:33:25,371 --> 00:33:27,371
So first to actually set this

842
00:33:27,371 --> 00:33:30,116
we tell it which one so the IsWalking parameter

843
00:33:30,116 --> 00:33:33,410
and then we give it a value, so we could here write true or false

844
00:33:33,410 --> 00:33:35,410
but we want to use Walking, the variable

845
00:33:35,410 --> 00:33:36,821
that we just made.

846
00:33:36,821 --> 00:33:40,145
So the very last thing that we need to do in this class

847
00:33:40,773 --> 00:33:42,773
is we need to put, so we need to put

848
00:33:42,773 --> 00:33:44,773
calls to those functions that we've made.

849
00:33:44,773 --> 00:33:47,978
Currently they're just functions sitting there by themselves.

850
00:33:47,978 --> 00:33:49,978
We need to make sure that those functions are

851
00:33:49,978 --> 00:33:52,629
actually being called an actually being used.

852
00:33:52,629 --> 00:33:55,177
These three functions aren't happening

853
00:33:55,177 --> 00:33:57,177
until we tell them to, we haven't actually

854
00:33:57,177 --> 00:33:59,177
called them anywhere in the script, they just

855
00:33:59,177 --> 00:34:01,177
exist and are waiting to happen.

856
00:34:01,177 --> 00:34:03,177
In fixed update that we created earlier

857
00:34:03,177 --> 00:34:05,828
we already got the input, we stored that.

858
00:34:06,953 --> 00:34:08,953
Now after we've got the input entirety

859
00:34:08,953 --> 00:34:11,749
we now need to call these functions that we've created.

860
00:34:12,239 --> 00:34:14,239
So we call them just by using their name.

861
00:34:15,431 --> 00:34:18,322
And then parsing in the values if they're required.

862
00:34:18,322 --> 00:34:20,322
So Move requires 2 floats,

863
00:34:20,322 --> 00:34:22,322
we've got our floats for input there

864
00:34:22,322 --> 00:34:24,322
and that's all that we need to do.

865
00:34:24,322 --> 00:34:26,322
So we need to say H and V

866
00:34:26,678 --> 00:34:28,216
semi-colon.

867
00:34:28,870 --> 00:34:32,122
Then we'll call Turning which doesn't take any parameters

868
00:34:32,122 --> 00:34:33,567
And finally we'll call

869
00:34:34,814 --> 00:34:36,814
Animati, which does.

870
00:34:39,266 --> 00:34:40,295
Like that.

871
00:34:40,295 --> 00:34:42,295
These are in fixed update, so they're being called

872
00:34:42,295 --> 00:34:44,295
every physics step.

873
00:34:44,295 --> 00:34:46,295
That is the end of that script so what I want you to do

874
00:34:46,295 --> 00:34:48,295
now is to go to File - Save

875
00:34:48,824 --> 00:34:50,344
and switch back to Unity.

876
00:34:50,344 --> 00:34:53,035
If anything is wrong you will see an error

877
00:34:53,035 --> 00:34:55,509
at the bottom of the screen in red.

878
00:34:56,622 --> 00:34:59,504
When you have no errors in your script,

879
00:35:00,004 --> 00:35:02,971
when you press play at the top of the editor

880
00:35:03,384 --> 00:35:05,731
you can move your character around with the arrow keys

881
00:35:05,731 --> 00:35:08,677
or W, A, S and D.

882
00:35:08,677 --> 00:35:10,677
The animation should function

883
00:35:10,677 --> 00:35:12,677
but the actual movement of the mouse should be a little bit

884
00:35:12,677 --> 00:35:14,677
tricky right now because we haven't moved the

885
00:35:14,677 --> 00:35:16,677
camera to the right point, so the camera isn't

886
00:35:16,677 --> 00:35:20,097
seeing the entirety of the floor quad yet

887
00:35:20,097 --> 00:35:21,501
and that can be a problem, but we're going to solve

888
00:35:21,501 --> 00:35:22,907
that in the next phase.

889
00:35:22,907 --> 00:35:24,300
So you should be able to move around.

890
00:35:24,300 --> 00:35:27,847
You'll note if I move the mouse up away from the floor quad

891
00:35:27,847 --> 00:35:29,847
that it doesn't rotate.

892
00:35:29,847 --> 00:35:31,847
As soon as I move it back over there the rayCast

893
00:35:31,847 --> 00:35:33,847
kicks back in and I can turn around

894
00:35:34,395 --> 00:35:36,395
and run around this this.

895
00:35:40,135 --> 00:35:42,135
Okay so we're at the end of phase 2.

896
00:35:42,135 --> 00:35:46,067
Phase 3 will be setting up the camera

897
00:35:46,067 --> 00:35:48,067
and we're going to have a quick look at the script that

898
00:35:48,067 --> 00:35:50,067
will make that camera work.

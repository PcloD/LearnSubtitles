1
00:00:01,194 --> 00:00:03,297
The next thing we're going to do is look in to

2
00:00:03,297 --> 00:00:05,297
player health, so obviously we just created a slider

3
00:00:05,297 --> 00:00:06,392
to represent the health,

4
00:00:06,392 --> 00:00:08,392
we now want to actually implement that.

5
00:00:08,392 --> 00:00:10,392
So we have this HealthUI

6
00:00:10,392 --> 00:00:13,215
and the next component to this game

7
00:00:13,215 --> 00:00:15,215
that we want to have is we want to

8
00:00:15,215 --> 00:00:17,215
have the player have health

9
00:00:17,215 --> 00:00:19,215
that is able to be taken away and is able to

10
00:00:19,215 --> 00:00:21,774
also interact with our UI that we just created.

11
00:00:21,774 --> 00:00:23,774
We also want to have the enemy have

12
00:00:23,774 --> 00:00:25,774
the ability to attack the player and thus

13
00:00:25,774 --> 00:00:27,504
take that health away.

14
00:00:27,504 --> 00:00:30,032
And then from there we're going to reverse the roles,

15
00:00:30,032 --> 00:00:32,032
we're going to give the enemy some health and give the player

16
00:00:32,032 --> 00:00:33,916
the ability to take that health away.

17
00:00:34,340 --> 00:00:36,340
What we're going to do to start is we're going to go

18
00:00:36,340 --> 00:00:38,340
to the Scripts folder and we're going to

19
00:00:38,340 --> 00:00:40,340
locate the Player folder and

20
00:00:40,340 --> 00:00:43,676
we should find a script called PlayerHealth.

21
00:00:44,205 --> 00:00:46,686
So we're going to take that and we're going to click

22
00:00:46,686 --> 00:00:49,720
and drag that on to the Player game object

23
00:00:49,720 --> 00:00:51,720
in our hierarchy.

24
00:00:51,720 --> 00:00:53,720
So we will drop there and if we click on the player,

25
00:00:53,720 --> 00:00:55,720
we scroll down and we should see

26
00:00:55,720 --> 00:00:57,720
Player Health Script as a component.

27
00:00:57,720 --> 00:00:59,720
Also we are currently still in this

28
00:00:59,720 --> 00:01:01,720
view where we're really zoomed out and we're

29
00:01:01,720 --> 00:01:04,508
focused on the canvas and all that stuff

30
00:01:04,508 --> 00:01:06,508
so why don't we take a second, we'll come out of 2D

31
00:01:06,508 --> 00:01:09,051
view here again by clicking on the 2D button

32
00:01:09,051 --> 00:01:11,751
right there, bringing us out of that 2D mode

33
00:01:11,751 --> 00:01:14,350
and then if we want to get to the player quickly

34
00:01:14,350 --> 00:01:16,350
we can just double click on the player's name in the hierarchy

35
00:01:16,350 --> 00:01:18,350
it'll zoom us right in there.

36
00:01:18,350 --> 00:01:21,078
It just brings us back to where we were previously

37
00:01:21,078 --> 00:01:23,510
We now have the PlayerHealth script on the player

38
00:01:23,510 --> 00:01:25,510
so we're going to open it up and take a look at it

39
00:01:25,510 --> 00:01:27,510
before we do be sure to save your scene.

40
00:01:28,279 --> 00:01:30,279
And let's go ahead and pop this open.

41
00:01:31,164 --> 00:01:32,816
Alright, player health.

42
00:01:32,816 --> 00:01:34,816
So we start off with our PlayerHealth with a whole

43
00:01:34,816 --> 00:01:36,816
bunch of variables so let's just step through and

44
00:01:36,816 --> 00:01:38,222
see what each of these are.

45
00:01:38,222 --> 00:01:40,222
So the first variable here is our startingHealth,

46
00:01:40,222 --> 00:01:42,222
which is a public integer which dictates

47
00:01:42,222 --> 00:01:44,222
how much health the player has 

48
00:01:44,222 --> 00:01:46,222
when the level first starts.

49
00:01:46,222 --> 00:01:48,222
Next we have an integer for currentHealth

50
00:01:48,222 --> 00:01:50,222
which is how much health a player will have

51
00:01:50,222 --> 00:01:53,150
after they've been damaged or just at any given point in the game.

52
00:01:53,150 --> 00:01:55,150
We have this healthSlider which

53
00:01:55,150 --> 00:01:57,725
is a slider game object

54
00:01:57,725 --> 00:02:00,766
which is the reference to that slider UI element

55
00:02:00,766 --> 00:02:01,555
that we created earlier.

56
00:02:01,555 --> 00:02:04,704
Now a good note right here, we're accessing Slider,

57
00:02:04,704 --> 00:02:06,512
which is the new UI.

58
00:02:06,512 --> 00:02:08,512
In order to access this we need to

59
00:02:08,512 --> 00:02:11,805
include using UnityEngine.uI.

60
00:02:11,805 --> 00:02:13,438
If you don't have that line of code at the top

61
00:02:13,438 --> 00:02:15,438
using UnityEngine.uI

62
00:02:15,438 --> 00:02:17,438
you're not going to be able to use text, images, sliders

63
00:02:17,438 --> 00:02:19,438
any of the new UI components.

64
00:02:19,438 --> 00:02:21,438
So just keep in mind you have to have that.

65
00:02:21,438 --> 00:02:23,438
After the slider we then have a

66
00:02:23,438 --> 00:02:25,438
public Image damageImage,

67
00:02:25,438 --> 00:02:27,438
which is again a reference to that damage image

68
00:02:27,438 --> 00:02:28,752
item we created.

69
00:02:28,752 --> 00:02:30,752
We have an audio which is our death clip.

70
00:02:30,752 --> 00:02:32,752
So unlike our hurt clip the death clip

71
00:02:32,752 --> 00:02:35,251
is going to be what's called a one-shot audio

72
00:02:35,251 --> 00:02:36,818
where we basically are saying we're not going to play

73
00:02:36,818 --> 00:02:38,818
the hurt sound any more, this is the sound the player makes

74
00:02:38,818 --> 00:02:39,654
when the player loses the game.

75
00:02:39,654 --> 00:02:42,613
We have a public float flashSpeed which is how

76
00:02:42,613 --> 00:02:44,613
quickly the damaged image

77
00:02:44,613 --> 00:02:46,148
flashes up on the screen.

78
00:02:46,148 --> 00:02:48,148
And then we have flashColour which we have

79
00:02:48,148 --> 00:02:52,131
set to (1f, 0f, 0f, 0.1f) which means

80
00:02:52,131 --> 00:02:54,131
completely red and a tenth

81
00:02:54,131 --> 00:02:55,671
of the way completely opaque.

82
00:02:55,671 --> 00:02:57,913
So it's mostly transparent and red.

83
00:02:58,961 --> 00:03:00,961
Next we have some private variables, the first

84
00:03:00,961 --> 00:03:03,345
is animator anim which again a reference

85
00:03:03,345 --> 00:03:05,345
to our animator components.

86
00:03:05,345 --> 00:03:07,345
We have a reference to our audio sources which

87
00:03:07,345 --> 00:03:09,345
we call payerAudio.

88
00:03:09,345 --> 00:03:11,345
We have a reference to the playerMovement scripts

89
00:03:11,345 --> 00:03:13,345
So this is the first time we've seen this.

90
00:03:13,345 --> 00:03:16,387
We've created a reference to another script

91
00:03:16,387 --> 00:03:17,521
that we've already written.

92
00:03:17,521 --> 00:03:20,133
We all remember writing PlayerMovement earlier today

93
00:03:20,133 --> 00:03:22,133
so now we are actually getting a reference to that

94
00:03:22,133 --> 00:03:24,133
script that is on the Player

95
00:03:24,133 --> 00:03:26,133
so that we can prevent the player from

96
00:03:26,133 --> 00:03:28,133
running around once the player is dead.

97
00:03:28,133 --> 00:03:30,133
We have to have a reference to it to do that so

98
00:03:30,133 --> 00:03:32,536
you're seeing some script interactivity there.

99
00:03:32,536 --> 00:03:35,207
We have 2 boolean values, one is isDead,

100
00:03:35,207 --> 00:03:37,207
which will determine whether or not the player is dead.

101
00:03:37,207 --> 00:03:39,782
And the other is damaged, which will allow us

102
00:03:39,782 --> 00:03:41,782
to know whether or not the player has taken damage.

103
00:03:41,782 --> 00:03:43,782
The awake function here is going to be fairly similar

104
00:03:43,782 --> 00:03:45,782
to what we've seen before, we're starting

105
00:03:45,782 --> 00:03:47,782
by getting a reference component to

106
00:03:47,782 --> 00:03:49,782
our animator, we're then getting a

107
00:03:49,782 --> 00:03:51,782
reference to our audio source

108
00:03:51,782 --> 00:03:54,271
playerAudio = GetComponent 

109
00:03:54,271 --> 00:03:55,872
This is slightly new, so here we're doing

110
00:03:55,872 --> 00:03:58,521
 playerMovement = GetComponent 

111
00:03:58,521 --> 00:04:00,521
And you'll see to get the component of the script

112
00:04:00,521 --> 00:04:03,517
we've created we just use the name of that script.

113
00:04:03,517 --> 00:04:06,029
Script is called PlayerMovement, I want to reference to it

114
00:04:06,029 --> 00:04:08,029
so I GetComponent .

115
00:04:08,029 --> 00:04:10,029
Again we have some comments in our code.

116
00:04:10,029 --> 00:04:12,962
We'll revisit this script and re-enable that later.

117
00:04:12,962 --> 00:04:14,471
And then we're going to say our

118
00:04:14,471 --> 00:04:16,471
currentHealth is equal to our startingHealth

119
00:04:16,471 --> 00:04:18,471
You'll recall awake gets called right

120
00:04:18,471 --> 00:04:20,471
at the beginning when the game first starts up

121
00:04:20,471 --> 00:04:22,471
so we're just going to set out currentHealth to it's max

122
00:04:22,471 --> 00:04:23,586
value right there.

123
00:04:24,577 --> 00:04:26,577
Update method, our update method's really simple.

124
00:04:26,577 --> 00:04:28,577
Update is simply concerning itself with

125
00:04:28,577 --> 00:04:30,577
whether or not we are flashing that

126
00:04:30,577 --> 00:04:32,577
red damaged image, right.

127
00:04:32,577 --> 00:04:34,577
And so basically what this function is saying

128
00:04:34,577 --> 00:04:36,577
is 'hey, if we are damaged,

129
00:04:36,577 --> 00:04:38,577
if damage has been taken, what we are going to do is

130
00:04:38,577 --> 00:04:40,577
we are going to set this image

131
00:04:40,577 --> 00:04:42,481
to our flashColour',

132
00:04:42,481 --> 00:04:44,481
which you'll recall is red with a 

133
00:04:44,481 --> 00:04:46,481
10% opacity, so that's going to happen

134
00:04:46,481 --> 00:04:47,900
immediately, it's going to flash this red.

135
00:04:47,900 --> 00:04:49,900
Otherwise, if we're not damaged,

136
00:04:49,900 --> 00:04:52,496
what we're concerned with is fading

137
00:04:52,496 --> 00:04:55,006
the damaged image away, so it flashes red

138
00:04:55,006 --> 00:04:57,469
and then we're going to fade it back to transparent.

139
00:04:57,469 --> 00:04:59,469
And we do that again using Lerp.

140
00:04:59,469 --> 00:05:01,938
Before we used Vector3.Lerp

141
00:05:01,938 --> 00:05:04,457
with the player's movement, so now  what we're doing is

142
00:05:04,457 --> 00:05:06,457
we're doing a Color.Lerp,

143
00:05:06,457 --> 00:05:08,457
which is the exact same concept,

144
00:05:08,457 --> 00:05:10,457
we're moving from one to another,

145
00:05:10,457 --> 00:05:12,457
but instead of vector3s we're doing color.

146
00:05:12,457 --> 00:05:14,457
So we're doing Color.Lerp and we're

147
00:05:14,457 --> 00:05:16,814
parsing in the current color

148
00:05:16,814 --> 00:05:18,814
of our damaged image and we're

149
00:05:18,814 --> 00:05:20,814
parsing the color that we would like,

150
00:05:20,814 --> 00:05:23,614
which is completely clear, completely invisible,

151
00:05:23,614 --> 00:05:26,173
and then we have our flashSpeed

152
00:05:26,173 --> 00:05:27,921
times Time.DeltaTime.

153
00:05:27,921 --> 00:05:29,921
Very much like the smoothing that we had on

154
00:05:29,921 --> 00:05:32,745
the camera as it would follow the player around.

155
00:05:32,745 --> 00:05:35,662
Here we're just smoothing from the

156
00:05:35,662 --> 00:05:38,611
color that it is all the way to transparent.

157
00:05:38,611 --> 00:05:40,611
And then finally at the end of every update cycle

158
00:05:40,611 --> 00:05:42,611
we're setting damaged equal to false.

159
00:05:42,611 --> 00:05:44,611
What that basically means is the moment we

160
00:05:44,611 --> 00:05:47,468
take damage we're then going to set damage back

161
00:05:47,468 --> 00:05:49,468
to false after showing that damaged image.

162
00:05:50,035 --> 00:05:52,035
In the next bit here what we have is a

163
00:05:52,035 --> 00:05:53,603
called TakeDamage.

164
00:05:53,603 --> 00:05:55,603
Now this function is also unique because it is a

165
00:05:55,603 --> 00:05:58,427
public function, as such, what this means is

166
00:05:58,427 --> 00:06:00,427
other scripts and other components can

167
00:06:00,427 --> 00:06:01,799
call this function.

168
00:06:01,799 --> 00:06:03,799
Take damage as a special function in the script

169
00:06:03,799 --> 00:06:06,929
in that it's not called in this script.

170
00:06:06,929 --> 00:06:08,929
Other stuff calls this function, 

171
00:06:08,929 --> 00:06:10,929
so when the enemies attack the player they

172
00:06:10,929 --> 00:06:12,929
call the TakeDamage function and so

173
00:06:12,929 --> 00:06:14,929
again that script interactivity is important.

174
00:06:14,929 --> 00:06:17,254
It has to be public or else this isn't going to work.

175
00:06:17,254 --> 00:06:19,254
The one parameter or argument for this function is

176
00:06:19,254 --> 00:06:22,225
int amount, which is how much damage the player has taken.

177
00:06:22,225 --> 00:06:24,225
Next what we're going to do is we want to ensure

178
00:06:24,225 --> 00:06:27,496
the player flashes that red image.

179
00:06:27,496 --> 00:06:29,790
So we do that by saying damaged equals true.

180
00:06:29,790 --> 00:06:32,662
We detract the amount of damage from our current health.

181
00:06:32,662 --> 00:06:34,466
We do that using a little shorthand here 

182
00:06:34,466 --> 00:06:37,293
by saying currentHealth -= amount;

183
00:06:37,293 --> 00:06:39,293
What that little shorthand means is we're going to say

184
00:06:39,293 --> 00:06:41,785
take the current health, remove the amount of damage

185
00:06:41,785 --> 00:06:43,785
and then put that back in to current health,

186
00:06:43,785 --> 00:06:45,785
so basically it just reduces by that amount.

187
00:06:45,785 --> 00:06:47,785
We are then going to take our current health and

188
00:06:47,785 --> 00:06:50,467
parse it in to the value of our slider.

189
00:06:50,467 --> 00:06:52,467
And so we see the slider slowly

190
00:06:52,467 --> 00:06:54,467
shrink as the player takes more damage.

191
00:06:54,957 --> 00:06:56,957
Next we're going to play our audio and if we

192
00:06:56,957 --> 00:06:58,957
recall we setup an audio source on

193
00:06:58,957 --> 00:07:00,957
the player in Unity

194
00:07:00,957 --> 00:07:03,549
and we gave it that Player Hurt audio.

195
00:07:03,549 --> 00:07:05,549
So basically every time the player takes damage they're

196
00:07:05,549 --> 00:07:07,347
going to play that hurt audio.

197
00:07:07,347 --> 00:07:10,703
Finally we're going to say 'the player's hurt,

198
00:07:10,703 --> 00:07:12,396
is the player dead?'.

199
00:07:12,396 --> 00:07:14,105
What we're going to do is say

200
00:07:14,105 --> 00:07:16,616
if the current health is now below or 

201
00:07:16,616 --> 00:07:19,677
equal to 0, and they're not already dead,

202
00:07:19,677 --> 00:07:21,677
that's what that and not isDead

203
00:07:21,677 --> 00:07:23,649
make them dead, alright, because there's no sense in

204
00:07:23,649 --> 00:07:25,649
making them dead if they're already dead.

205
00:07:25,649 --> 00:07:28,286
If that happens we're going to call a new function called Death.

206
00:07:28,286 --> 00:07:30,105
Death is a function that is in this script.

207
00:07:30,105 --> 00:07:32,105
It's not built in to Unity or anything like that.

208
00:07:32,105 --> 00:07:34,105
It's actually the very next function we're going to look at.

209
00:07:34,105 --> 00:07:36,105
Basically if the health drops below 0

210
00:07:36,105 --> 00:07:37,910
we're going to call this Death function,

211
00:07:37,910 --> 00:07:39,078
and here's what the Death function does.

212
00:07:39,078 --> 00:07:41,078
The first thing the Death function does is sets

213
00:07:41,078 --> 00:07:44,403
isDead equal to true, saying 'yeah, okay, player is dead'.

214
00:07:44,403 --> 00:07:47,162
Next we've got some disabled code, we'll come back to that.

215
00:07:47,162 --> 00:07:50,525
Next we say anim.SetTrigger ("Die");

216
00:07:50,525 --> 00:07:52,857
remember when we did the Animator Controller

217
00:07:52,857 --> 00:07:54,857
in the animator window and we had that second

218
00:07:54,857 --> 00:07:56,857
parameter which was Die which was a trigger?

219
00:07:56,857 --> 00:07:58,857
This is where we play that animation

220
00:07:58,857 --> 00:08:00,857
so we say SetTrigger Die and the character

221
00:08:00,857 --> 00:08:02,498
plays their death animation.

222
00:08:02,498 --> 00:08:04,498
We then set the audio clip of

223
00:08:04,498 --> 00:08:07,030
the audio source to this Death clip

224
00:08:07,030 --> 00:08:09,030
and then we play that sound, the sound the player makes

225
00:08:09,030 --> 00:08:10,557
when they lose the game.

226
00:08:10,557 --> 00:08:12,557
And then finally here's where we access

227
00:08:12,557 --> 00:08:14,557
that script, the Player Movement script

228
00:08:14,557 --> 00:08:15,819
we added as a component.

229
00:08:15,819 --> 00:08:18,827
We say playerMovement.enabled = false;

230
00:08:18,827 --> 00:08:20,827
which basically means no more movement.

231
00:08:20,827 --> 00:08:22,827
That script component on the object gets

232
00:08:22,827 --> 00:08:24,827
disabled, stops reading our inputs,

233
00:08:24,827 --> 00:08:26,617
player stops moving.

234
00:08:26,617 --> 00:08:28,617
And so this is that script

235
00:08:28,617 --> 00:08:30,617
in it's entirety so let's go ahead and

236
00:08:30,617 --> 00:08:32,617
close this down here and now we're going to

237
00:08:32,617 --> 00:08:34,617
return to the Unity editor.

238
00:08:34,617 --> 00:08:37,020
And again I reiterate, make sure if you

239
00:08:37,020 --> 00:08:39,020
click on the player in the hierarchy

240
00:08:39,020 --> 00:08:41,020
that you see the playerHeath component

241
00:08:41,020 --> 00:08:43,020
at the very bottom, which will let you know that you

242
00:08:43,020 --> 00:08:46,556
put that script on to the right game object.

243
00:08:47,000 --> 00:08:49,000
Now that we are

244
00:08:49,000 --> 00:08:52,200
back here and we have this PlayerHeath script component

245
00:08:52,200 --> 00:08:54,200
on the player game object what we're

246
00:08:54,200 --> 00:08:56,200
going to do is we are going to start

247
00:08:56,200 --> 00:08:58,200
filling in some of these values.

248
00:08:58,200 --> 00:09:00,200
So we could see Starting Health is 100, that's fine,

249
00:09:00,200 --> 00:09:01,422
it's what we want.

250
00:09:01,422 --> 00:09:03,422
Current Health is 0, again that doesn't matter

251
00:09:03,422 --> 00:09:05,296
it'll be set in the awake function.

252
00:09:05,296 --> 00:09:07,981
But here we have this Health Slider property.

253
00:09:07,981 --> 00:09:09,456
And it's currently empty.

254
00:09:09,456 --> 00:09:11,456
This is where we establish that link between

255
00:09:11,456 --> 00:09:13,456
the UI that we created and the

256
00:09:13,456 --> 00:09:14,946
script that we've just added.

257
00:09:14,946 --> 00:09:16,946
So if we look in the hierarchy

258
00:09:16,946 --> 00:09:20,352
we see the HUDCanvas, which we expand

259
00:09:20,352 --> 00:09:22,581
and then the healthUI, which we expand,

260
00:09:22,581 --> 00:09:25,567
and right here we have our HealthSlider.

261
00:09:25,567 --> 00:09:27,567
So if we were to take this health slider and

262
00:09:27,567 --> 00:09:29,567
click and drag and drop it in to the

263
00:09:29,567 --> 00:09:31,567
Health Slider property that will link

264
00:09:31,567 --> 00:09:33,913
the healthSliderUI component

265
00:09:33,913 --> 00:09:36,676
with this Player Health script.

266
00:09:36,676 --> 00:09:39,111
So now we can update the health via the slider.

267
00:09:39,878 --> 00:09:41,772
Next we have this Damage Image,

268
00:09:41,772 --> 00:09:43,772
so again I'm going to come up and grab my

269
00:09:43,772 --> 00:09:46,667
Damage Image from the HUD and I'm going to click and drag

270
00:09:46,667 --> 00:09:50,013
down in to the Damage Image property in the script.

271
00:09:50,821 --> 00:09:53,394
And then finally I have this Death Clip,

272
00:09:53,394 --> 00:09:55,394
where it currently says None I'm going to click the circle select

273
00:09:55,394 --> 00:09:57,394
here and I'm going to look for

274
00:09:57,394 --> 00:09:59,394
Player Death and I'm going to double click

275
00:09:59,394 --> 00:10:02,137
and we'll see that that gets added there.

276
00:10:02,137 --> 00:10:03,683
So the next thing I want to do now,

277
00:10:03,683 --> 00:10:06,175
the player has health and the health is interfaced

278
00:10:06,175 --> 00:10:08,175
with our UI system, so as the player loses

279
00:10:08,175 --> 00:10:10,621
health the UI system reacts, and all that's done.

280
00:10:10,621 --> 00:10:12,621
Now what we want to do is we want to give the

281
00:10:12,621 --> 00:10:14,621
enemies the ability to actually attack the player

282
00:10:14,621 --> 00:10:16,621
and thus we can see that this all works and

283
00:10:16,621 --> 00:10:19,598
see the interactivity of our game objects.

284
00:10:19,598 --> 00:10:21,907
We want to look in the Scripts folder

285
00:10:21,907 --> 00:10:23,907
and we want to locate the Enemy scripts folder

286
00:10:23,907 --> 00:10:26,629
and we're going to locate the EnemyAttack script.

287
00:10:27,408 --> 00:10:29,408
What we want to do is click

288
00:10:29,408 --> 00:10:32,999
and drag that on to the Zombunny.

289
00:10:33,566 --> 00:10:35,230
Again when we select the Zombunny afterwards

290
00:10:35,230 --> 00:10:37,230
we should see,

291
00:10:38,249 --> 00:10:39,948
we should see EnemyAttack

292
00:10:40,400 --> 00:10:41,795
at the bottom there.

293
00:10:41,795 --> 00:10:43,795
Let's go ahead and open up EnemyAttack.

294
00:10:44,670 --> 00:10:47,986
EnemyAttack, a lot of this stuff is going to be

295
00:10:47,986 --> 00:10:49,986
very familiar to you by now,

296
00:10:49,986 --> 00:10:51,986
but again we're going to start with a few public variables.

297
00:10:51,986 --> 00:10:54,942
The first public variable we're interested in is a public float

298
00:10:54,942 --> 00:10:56,942
timeBetweenAttacks,

299
00:10:56,942 --> 00:10:58,942
which is 0.5.

300
00:10:58,942 --> 00:11:00,942
It basically is the amount of time

301
00:11:00,942 --> 00:11:02,477
between each of the attacks

302
00:11:02,477 --> 00:11:05,539
And then we also have a public integer, which is the attackDamage.

303
00:11:05,539 --> 00:11:07,539
So how much damage has each of these

304
00:11:07,539 --> 00:11:09,452
attacks done to the player.

305
00:11:09,452 --> 00:11:11,452
Then we have our private variables, and again

306
00:11:11,452 --> 00:11:13,452
these are very similar, we have an

307
00:11:13,452 --> 00:11:15,452
Animator variable named anim which is going to

308
00:11:15,452 --> 00:11:17,713
store our reference to our animator component.

309
00:11:17,713 --> 00:11:20,022
We have a GameObject parameter which

310
00:11:20,022 --> 00:11:22,022
is going to be the player, so again the

311
00:11:22,022 --> 00:11:24,022
enemy will be able to attack the player

312
00:11:24,022 --> 00:11:26,254
but it needs to have some reference to that player.

313
00:11:26,254 --> 00:11:29,159
We have a reference to the PlayerHealth script.

314
00:11:29,159 --> 00:11:33,031
This is new, we have the enemy

315
00:11:33,031 --> 00:11:35,031
referencing a script that we have created

316
00:11:35,031 --> 00:11:37,751
that is on a different game object.

317
00:11:37,751 --> 00:11:39,751
So the player has a PlayerHealth script

318
00:11:39,751 --> 00:11:41,751
and the enemy has a reference to it

319
00:11:41,751 --> 00:11:44,139
so that the enemy can then damage the player.

320
00:11:44,139 --> 00:11:46,139
We have a bit of code that is commented out

321
00:11:46,139 --> 00:11:48,947
and then we have a boolean value playerInRange.

322
00:11:48,947 --> 00:11:50,947
This will be set to true whenever the player gets

323
00:11:50,947 --> 00:11:52,947
close enough for the enemy to attack/

324
00:11:52,947 --> 00:11:54,947
It'll be set back to false when the player

325
00:11:54,947 --> 00:11:56,580
gets too far away.

326
00:11:56,580 --> 00:11:58,263
And then finally we have float timer,

327
00:11:58,263 --> 00:12:00,263
and timer is a variable that we're going to use to keep

328
00:12:00,263 --> 00:12:02,551
everything in sync, to make sure that the enemy is not

329
00:12:02,551 --> 00:12:04,551
not too fast, not too slow.

330
00:12:04,551 --> 00:12:06,551
In our awake function, again we're going to be

331
00:12:06,551 --> 00:12:08,551
setting up a lot of our stuff so

332
00:12:08,551 --> 00:12:12,774
we're doing GameObject.FindGameObjectWithTag ("player");

333
00:12:12,774 --> 00:12:15,336
Which again is going to locate the player for us

334
00:12:15,336 --> 00:12:17,191
and store that reference locally.

335
00:12:17,191 --> 00:12:19,191
We do this in the awake method and then we store it

336
00:12:19,191 --> 00:12:21,191
so that we don't have to do it every frame

337
00:12:21,191 --> 00:12:22,203
or every time we need it.

338
00:12:22,203 --> 00:12:24,203
This is a fairly inefficient call

339
00:12:24,203 --> 00:12:26,203
so we really want to limit the number of time

340
00:12:26,203 --> 00:12:28,203
we do that, so by doing it once in the awake function

341
00:12:28,203 --> 00:12:30,826
and storing it we're greatly improving

342
00:12:30,826 --> 00:12:33,125
the performance of our games and projects.

343
00:12:33,125 --> 00:12:36,115
Then we use that player object that we just found

344
00:12:36,115 --> 00:12:39,360
and we say player.GetComponent <PlayerHealth>

345
00:12:39,360 --> 00:12:41,360
thus pulling the PlayerHealth script off

346
00:12:41,360 --> 00:12:44,592
off that player, and again, storing a reference to it.

347
00:12:44,592 --> 00:12:46,592
Now with that reference we have the ability to

348
00:12:46,592 --> 00:12:49,782
call that public function takeDamage we saw previously.

349
00:12:49,782 --> 00:12:52,041
And then finally we do GetComponent <Animator>

350
00:12:52,041 --> 00:12:54,922
to setup a reference to our animator component.

351
00:12:54,922 --> 00:12:56,922
Now remember how we created the

352
00:12:56,922 --> 00:12:58,922
sphere collider on the enemy that was a trigger

353
00:12:58,922 --> 00:13:00,922
and I talked about how triggers are

354
00:13:00,922 --> 00:13:03,528
not used for in-scene effects

355
00:13:03,528 --> 00:13:05,528
and Will was talking about how we use these

356
00:13:05,528 --> 00:13:08,854
for detecting collisions and stuff behind the scenes?

357
00:13:08,854 --> 00:13:10,854
If we have a trigger on an object and

358
00:13:10,854 --> 00:13:12,854
another object comes in collision with that

359
00:13:12,854 --> 00:13:16,062
it doesn't react physically, because it's a trigger.

360
00:13:16,062 --> 00:13:18,515
Instead it calls a function

361
00:13:18,515 --> 00:13:20,515
and if we have a function in a script

362
00:13:20,515 --> 00:13:22,206
that function runs.

363
00:13:22,206 --> 00:13:24,206
The function's called OnTriggerEnter

364
00:13:24,206 --> 00:13:26,570
and it gets called whenever anything goes

365
00:13:26,570 --> 00:13:27,983
in to a trigger.

366
00:13:27,983 --> 00:13:30,840
So here we have void OnTriggerEnter

367
00:13:30,840 --> 00:13:33,779
and then inside parenthesis we have (Collider other).

368
00:13:33,779 --> 00:13:35,779
Other is whatever it is that

369
00:13:35,779 --> 00:13:37,394
collider with this collider.

370
00:13:37,394 --> 00:13:39,394
If I'm the enemy and something collided with me chances

371
00:13:39,394 --> 00:13:40,931
are Other is the player.

372
00:13:40,931 --> 00:13:42,931
And so now I know where that is. 

373
00:13:42,931 --> 00:13:44,931
So the very next line is

374
00:13:44,931 --> 00:13:47,278
me making sure that it's the player

375
00:13:47,278 --> 00:13:49,278
because we don't want to be able to attack a sofa

376
00:13:49,278 --> 00:13:51,278
we want to only attack the player and

377
00:13:51,278 --> 00:13:53,278
as such we want to ensure

378
00:13:53,278 --> 00:13:54,903
what it is we are attacking, so we're going to say

379
00:13:54,903 --> 00:13:58,807
if(other.gameObject == player)

380
00:13:58,807 --> 00:14:01,967
and that double equals is an equality operator, it says

381
00:14:01,967 --> 00:14:03,726
'are these the same thing?'.

382
00:14:03,726 --> 00:14:06,878
So if what we collided with is the player,

383
00:14:06,878 --> 00:14:08,425
cool, okay, then we can attack it.

384
00:14:08,425 --> 00:14:11,764
If that's true then we set playerInRange to true.

385
00:14:11,764 --> 00:14:13,764
Now there's an inverse version of that

386
00:14:13,764 --> 00:14:16,627
function called OnTriggerExit.

387
00:14:16,627 --> 00:14:19,087
It tells us that something was in the trigger

388
00:14:19,087 --> 00:14:20,972
and it has now gone away.

389
00:14:20,972 --> 00:14:22,972
Alright, that's just the complete opposite.

390
00:14:22,972 --> 00:14:24,972
So again what we're going to say is

391
00:14:24,972 --> 00:14:27,787
was the thing that left the trigger the player?

392
00:14:27,787 --> 00:14:29,787
If it was the player is no longer

393
00:14:29,787 --> 00:14:31,787
in range, so we set that to false.

394
00:14:32,479 --> 00:14:34,479
So we just used the trigger to say 'hey, they're close enough'

395
00:14:34,479 --> 00:14:35,632
'no, they're not close enough any more'.

396
00:14:35,632 --> 00:14:37,632
'Hey they're close enough, no they're not close enough any more'.

397
00:14:37,632 --> 00:14:39,632
This isn't actually the attacking part

398
00:14:39,632 --> 00:14:41,632
this is just how we determine whether we're close enough.

399
00:14:42,363 --> 00:14:44,795
The actual attacking happens in the update.

400
00:14:44,795 --> 00:14:46,795
In the update method the first thing we

401
00:14:46,795 --> 00:14:49,390
do is we determine how much time has occurred.

402
00:14:49,390 --> 00:14:51,390
We start accumulating this time

403
00:14:51,390 --> 00:14:53,131
inside the variable Timer.

404
00:14:53,131 --> 00:14:55,911
So every time update runs Timer gets a little bit bigger and

405
00:14:55,911 --> 00:14:59,316
a little bit bigger and it represents how much time has passed.

406
00:14:59,903 --> 00:15:01,903
Then we're going to say

407
00:15:01,903 --> 00:15:03,903
if the timer is greater than

408
00:15:03,903 --> 00:15:06,516
the time between attacks, so it's been long enough

409
00:15:06,516 --> 00:15:09,795
between attacks and the player is close enough,

410
00:15:09,795 --> 00:15:11,167
we're going to attack the player.

411
00:15:11,167 --> 00:15:13,417
And we can see that we call the function Attack.

412
00:15:13,811 --> 00:15:15,811
Then finally we'll look at Attack here in a second.

413
00:15:15,811 --> 00:15:17,608
Then finally we say

414
00:15:17,608 --> 00:15:19,608
if the player's health is

415
00:15:19,608 --> 00:15:22,284
equal to 0, that means the player died,

416
00:15:22,284 --> 00:15:24,574
right, our attack killed it and the player died

417
00:15:24,574 --> 00:15:27,753
so we're going to do anim.SetTrigger ("PlayerDead");

418
00:15:27,753 --> 00:15:31,634
which as we recall will transition us from the

419
00:15:31,634 --> 00:15:34,055
moving state to the idle state.

420
00:15:34,055 --> 00:15:36,055
Player is dead so now we just get to sit around and go

421
00:15:36,055 --> 00:15:37,306
'well that was fun, now what?'.

422
00:15:37,306 --> 00:15:40,204
And so that's how we stop chasing the player around.

423
00:15:40,204 --> 00:15:42,649
So if the timer is greater than the time between attacks

424
00:15:42,649 --> 00:15:45,161
and the player is in range then we call this aAttack function

425
00:15:45,161 --> 00:15:47,161
and this is what the Attack function looks like.

426
00:15:47,161 --> 00:15:48,941
The first thing we do is we reset Timer.

427
00:15:48,941 --> 00:15:51,367
We're now attacking so Timer is set back to 0.

428
00:15:51,367 --> 00:15:54,526
And then we're going to say if the player is alive

429
00:15:54,526 --> 00:15:56,915
playerHealth.currentHealth is greater than 0,

430
00:15:56,915 --> 00:15:58,595
let's take some of that away.

431
00:15:58,595 --> 00:16:00,595
So we say playerHealth.takeDamage

432
00:16:00,595 --> 00:16:03,918
and we parse in however much damage this enemy does.

433
00:16:03,918 --> 00:16:05,745
And so then the player is going to manage

434
00:16:05,745 --> 00:16:07,745
the rest of that and if that happens to kill them

435
00:16:07,745 --> 00:16:09,745
the rest of the update will run and we'll

436
00:16:09,745 --> 00:16:11,745
transition in to the idle state.

437
00:16:11,745 --> 00:16:14,104
And so that is our enemy attack

438
00:16:14,104 --> 00:16:16,104
and once we've taken a look at that

439
00:16:16,104 --> 00:16:18,104
be sure to save our scene to wrap up 

440
00:16:18,104 --> 00:16:19,630
what we've just done here.

441
00:16:19,630 --> 00:16:22,587
Why not test this? Let's pop back over to Unity.

442
00:16:23,443 --> 00:16:26,504
Will, go ahead and get eaten!

443
00:16:28,456 --> 00:16:30,619
Oh, and he's taken damage

444
00:16:30,619 --> 00:16:33,647
and we see the health slider being reduced in size,

445
00:16:33,647 --> 00:16:36,511
we see the screen flashing slightly,

446
00:16:36,511 --> 00:16:39,041
and man, that Zombunny is relentless!

447
00:16:39,041 --> 00:16:41,041
I don't think he wants to give you hugs.

448
00:16:42,983 --> 00:16:45,419
The damage image there is quite faint.

449
00:16:45,419 --> 00:16:47,187
But we can play around with that with the

450
00:16:47,187 --> 00:16:50,481
Flash Color public variable on PlayerHealth

451
00:16:50,481 --> 00:16:51,392
on the player.

452
00:16:51,392 --> 00:16:53,392
So if we wanted to make that more apparent

453
00:16:53,392 --> 00:16:55,392
we could crank it up a little bit and it would flash

454
00:16:55,392 --> 00:16:57,729
a bit more harshly, like that.

455
00:16:57,729 --> 00:16:59,729
Again he achieved this just now by increasing

456
00:16:59,729 --> 00:17:03,787
the alpha of the color on the Player Health script.

457
00:17:03,787 --> 00:17:07,432
Obviously the higher the alpha the stronger the effect

458
00:17:07,432 --> 00:17:09,585
and so on and so forth.

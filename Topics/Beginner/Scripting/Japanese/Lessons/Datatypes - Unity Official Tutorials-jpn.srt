1
00:00:00,264 --> 00:00:01,685
コードに触れるときには

2
00:00:01,685 --> 00:00:03,049
どうしてもさまざまな型の変数に

3
00:00:03,049 --> 00:00:05,437
触れることになります

4
00:00:05,437 --> 00:00:07,437
さてこの変数は 突き詰めれば

5
00:00:07,437 --> 00:00:09,437
すべて Datatype（データ型）を持ちます

6
00:00:10,687 --> 00:00:12,506
二大主要データ型は

7
00:00:12,506 --> 00:00:14,990
value 型と reference 型です

8
00:00:15,782 --> 00:00:18,477
変数のうち integer / float

9
00:00:18,477 --> 00:00:21,258
double / boolean / character などは

10
00:00:21,258 --> 00:00:23,511
すべて value 型です

11
00:00:23,511 --> 00:00:25,511
この他にもより複雑な

12
00:00:25,511 --> 00:00:27,511
struct と呼ばれる変数型もあります

13
00:00:28,122 --> 00:00:30,122
struct は value データ型で

14
00:00:30,122 --> 00:00:33,182
1 つ以上の変数を格納します

15
00:00:33,863 --> 00:00:35,863
Unity でよく使われる struct を 2 つ挙げると

16
00:00:35,863 --> 00:00:38,360
Vector3 と Quaternion があります

17
00:00:39,196 --> 00:00:41,821
一方で reference 型のリストはもっとシンプル

18
00:00:41,821 --> 00:00:43,821
基本的にクラスのオブジェクトである変数は

19
00:00:43,821 --> 00:00:46,381
すべて reference 型です

20
00:00:47,043 --> 00:00:49,043
よく使われる 2 つのクラス... すなわち

21
00:00:49,043 --> 00:00:51,871
Unity でよく reference 型として使われるクラスは

22
00:00:51,871 --> 00:00:54,458
Transform と GameObject です

23
00:00:55,788 --> 00:00:57,788
しかし value と reference 型は何が違うの? と

24
00:00:57,788 --> 00:01:00,264
思った方も多いのではないでしょうか

25
00:01:00,732 --> 00:01:03,368
シンプルに言い換えると value 型の変数は

26
00:01:03,368 --> 00:01:05,368
実際に value（値）を含んでいます

27
00:01:05,368 --> 00:01:07,368
一方 reference 型の変数は値の格納されている

28
00:01:07,368 --> 00:01:10,243
メモリアドレスを含んでいます

29
00:01:11,271 --> 00:01:13,915
このため value 型の変数が変更されても

30
00:01:13,915 --> 00:01:16,293
その変数が影響を受けるだけですが

31
00:01:16,846 --> 00:01:18,846
reference 型が変更されると

32
00:01:18,846 --> 00:01:20,846
そのメモリアドレスを含むすべての変数が

33
00:01:20,846 --> 00:01:22,846
影響を受けることになるわけです

34
00:01:23,582 --> 00:01:26,272
たとえ話にしてみましょう...

35
00:01:26,272 --> 00:01:29,906
チャールズは お気に入りのモノでいっぱいの素敵な青い家を持ってます

36
00:01:29,906 --> 00:01:32,866
クエンティンはチャールズの家をオンラインで見かけて嫉妬しました

37
00:01:32,866 --> 00:01:34,866
そこでチャールズの家の完全なコピーを作って

38
00:01:34,866 --> 00:01:37,587
中のモノも完璧に複製して再現しました

39
00:01:37,587 --> 00:01:39,268
ええ キモいですね

40
00:01:39,268 --> 00:01:41,268
これが value 型の割り当てと考えてください

41
00:01:41,268 --> 00:01:44,162
変数の複製を作るだけで

42
00:01:44,162 --> 00:01:46,385
クエンティンはチャールズの家を保有してはいません

43
00:01:46,385 --> 00:01:49,737
そしてクエンティンが内装を変えてもチャールズの家には一切影響しません

44
00:01:49,737 --> 00:01:51,737
たとえ赤く塗っても 影響しません

45
00:01:52,293 --> 00:01:54,293
一方  クエンティンがチャールズの家のアドレスを持っている場合

46
00:01:54,293 --> 00:01:56,293
クエンティンは家を複製する必要がありません

47
00:01:56,293 --> 00:01:58,293
好きなときにチャールズの家に行って

48
00:01:58,293 --> 00:02:00,699
中身を見ればいいわけですから

49
00:02:01,057 --> 00:02:03,526
これが reference 型の割り当てです

50
00:02:03,526 --> 00:02:06,658
必要なメモリアドレスの値を記録しておいて

51
00:02:06,658 --> 00:02:08,658
変数の値を知る必要が生じたら記録したアドレスに

52
00:02:08,658 --> 00:02:10,658
戻ってくるわけです

53
00:02:12,019 --> 00:02:14,339
それでは実際の様子を見てみましょう

54
00:02:14,339 --> 00:02:16,339
このシーンには Sphere（球体）がひとつあります

55
00:02:16,339 --> 00:02:18,645
Sphere にはスクリプトがアタッチされています

56
00:02:18,645 --> 00:02:21,077
DatatypeScript というスクリプトがそれです

57
00:02:21,994 --> 00:02:23,994
この DatatypeScript の中に

58
00:02:23,994 --> 00:02:25,994
pos という名前で Vector3 変数を作成して...

59
00:02:25,994 --> 00:02:29,316
値を transform の position に割り当てます

60
00:02:30,219 --> 00:02:32,754
そして pos = new Vector3 と指定して

61
00:02:32,754 --> 00:02:35,320
値を (0, 2, 0) とします

62
00:02:35,865 --> 00:02:38,200
さて pos は Vector3 の struct です

63
00:02:38,200 --> 00:02:40,200
そして struct は value 型でしたよね

64
00:02:40,200 --> 00:02:43,429
ということはこのコードで影響を受けるのは pos だけで

65
00:02:43,429 --> 00:02:45,890
transform の position は影響を受けません

66
00:02:46,860 --> 00:02:49,752
これで一旦 Unity に戻りシーンを実行してみると

67
00:02:49,752 --> 00:02:52,419
球体が動かないのが確認できると思います

68
00:02:53,460 --> 00:02:56,082
value 型は複製した独立データということになるので

69
00:02:56,082 --> 00:02:58,082
その値を変えても 影響を受けるのは

70
00:02:58,082 --> 00:03:00,082
その変数自身だけなのです

71
00:03:00,748 --> 00:03:03,590
さてそれでは DatatypeScript に戻り別の方法を試してみましょう

72
00:03:04,284 --> 00:03:07,112
まず Transform 変数に tran という名前をつけて

73
00:03:07,112 --> 00:03:09,927
オブジェクトの transform とイコールでつなぎます

74
00:03:11,260 --> 00:03:14,297
続けて tran の位置を指定するため new Vector3 と書き

75
00:03:14,297 --> 00:03:17,184
値を (0, 2, 0) とします

76
00:03:19,753 --> 00:03:21,434
Transform はクラスなので

77
00:03:21,434 --> 00:03:23,701
tran は reference 型ということになりますね

78
00:03:24,142 --> 00:03:27,155
さらにオブジェクトの transform と

79
00:03:27,155 --> 00:03:30,111
変数 tran を代入演算子でつないだので

80
00:03:30,111 --> 00:03:33,291
両方が同一のメモリアドレスを示すようになっています

81
00:03:33,291 --> 00:03:36,358
このためどちらか一方を変えると 他方にも反映されるようになります

82
00:03:37,080 --> 00:03:39,500
それでは Unity 上のシーンに戻ってみます

83
00:03:39,899 --> 00:03:42,134
球体が先程よりも上に移動しているのが

84
00:03:42,134 --> 00:03:44,792
確認できますね 直接 Sphere の transform の値を

85
00:03:44,792 --> 00:03:47,718
変更していないにも関わらず移動したわけです

86
00:03:48,496 --> 00:03:50,496
reference 変数を使って間接的に

87
00:03:50,496 --> 00:03:52,496
変更できたわけです

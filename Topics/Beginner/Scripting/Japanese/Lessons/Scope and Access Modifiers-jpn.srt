1
00:00:00,276 --> 00:00:02,790
変数のスコープとは

2
00:00:02,790 --> 00:00:04,692
コード内における変数が有効な範囲のことです。

3
00:00:04,692 --> 00:00:06,692
コード内において、スコープの中で有効な場所にある

4
00:00:06,692 --> 00:00:08,692
変数のことをローカル変数と呼びます。

5
00:00:08,692 --> 00:00:10,692
コード群は一般的に、変数のスコープを

6
00:00:10,692 --> 00:00:12,692
定義するもので、それらは中括弧によって

7
00:00:12,692 --> 00:00:13,921
示されます。

8
00:00:14,421 --> 00:00:16,352
例えば、例示されているクラスの

9
00:00:16,352 --> 00:00:18,352
中にあるものは全て、そのクラスの

10
00:00:18,352 --> 00:00:20,088
ローカルであると言うことができます。

11
00:00:20,562 --> 00:00:24,383
pens、crayons、answer 変数は全て

12
00:00:24,383 --> 00:00:26,956
Example 関数のローカルであり、

13
00:00:26,956 --> 00:00:28,776
関数の外側で使用することはできません。

14
00:00:29,263 --> 00:00:30,727
alpha、beta、gamma 変数は

15
00:00:30,727 --> 00:00:33,556
ScopeAndAccessModifiersクラスの

16
00:00:33,556 --> 00:00:36,199
スコープ内にあると言えます。

17
00:00:36,575 --> 00:00:38,575
そして、pens、crayons、answer 変数は

18
00:00:38,575 --> 00:00:40,879
Example 関数のスコープ

19
00:00:40,879 --> 00:00:42,879
内にあると言えます。

20
00:00:43,945 --> 00:00:46,337
Public Private アクセス修飾子について

21
00:00:46,680 --> 00:00:48,680
クラスで定義された変数は

22
00:00:48,680 --> 00:00:50,680
関数内で宣言されたものとは違って

23
00:00:50,680 --> 00:00:52,680
アクセス修飾子の特質を持っています。

24
00:00:52,680 --> 00:00:55,581
アクセス修飾子というのは、変数を宣言する時に

25
00:00:55,581 --> 00:00:58,657
データ型の前に書くキーワードで、

26
00:00:58,657 --> 00:01:00,657
変数や関数がどこから閲覧できるか

27
00:01:00,657 --> 00:01:02,657
を定義するためにあります。

28
00:01:02,936 --> 00:01:05,616
一般的なルールとして、他のスクリプトが変数や関数に

29
00:01:05,616 --> 00:01:07,616
アクセスする必要がある時は public に、

30
00:01:07,616 --> 00:01:10,440
そうで無い時は private にしておくべきです。

31
00:01:10,940 --> 00:01:12,731
public として変数を宣言するのは

32
00:01:12,731 --> 00:01:15,325
クラスの外側からアクセスできる、ということを意味します。

33
00:01:15,325 --> 00:01:17,325
さらに、変数が Inspecter のコンポーネント

34
00:01:17,325 --> 00:01:20,070
に表示され、編集もできるということも意味します。

35
00:01:20,070 --> 00:01:22,455
この例では、

36
00:01:22,455 --> 00:01:24,455
ScopeAndAccesModifiersスクリプトは

37
00:01:24,455 --> 00:01:26,455
prop_samoflange オブジェクトに適用されており、

38
00:01:26,455 --> 00:01:28,455
public 変数 alpha が編集可能なプロパティとして

39
00:01:28,455 --> 00:01:31,336
スクリプトに含まれていることが分かります。

40
00:01:31,336 --> 00:01:33,573
このことによって、ユーザーがゲームをテストしている

41
00:01:33,573 --> 00:01:35,211
間に変数を編集することができます。

42
00:01:35,211 --> 00:01:37,211
例えば、車の速度を調節する

43
00:01:37,211 --> 00:01:39,447
値があるとします。それがあれば

44
00:01:39,447 --> 00:01:41,071
ゲームを停止し、スクリプトを変更してから

45
00:01:41,071 --> 00:01:43,196
やり直さなくてもテスト中にその変数を

46
00:01:43,196 --> 00:01:45,196
調節できるので便利でしょう。そのように、

47
00:01:45,196 --> 00:01:47,196
public 変数を持つというのは理にかなった

48
00:01:47,196 --> 00:01:49,196
ことなのです。変数がクラス内で

49
00:01:49,196 --> 00:01:51,196
規定値として初期化された場合に

50
00:01:51,196 --> 00:01:53,980
注意してください。例えば、alphaの値を

51
00:01:53,980 --> 00:01:55,980
5に設定したとしても、

52
00:01:55,980 --> 00:01:57,980
Inspector に記述された値に

53
00:01:57,980 --> 00:01:59,980
上書きされたままになります。

54
00:01:59,980 --> 00:02:02,063
しかし、もしこれらの値が

55
00:02:02,063 --> 00:02:04,315
Inspector で設定された後に

56
00:02:04,315 --> 00:02:06,315
Start や Awake といった関数で設定されたら

57
00:02:06,315 --> 00:02:08,789
Inspectorの値には上書きされません。

58
00:02:08,789 --> 00:02:11,584
では、例えばスクリプトが初期値に5を

59
00:02:11,584 --> 00:02:13,584
設定していて、

60
00:02:13,584 --> 00:02:16,335
Inspector によって上書きされてしまったものを

61
00:02:16,335 --> 00:02:18,648
Start関数内で設定すると、

62
00:02:19,328 --> 00:02:22,299
Inspectorの値を上書きします。

63
00:02:25,327 --> 00:02:27,327
Now given that the game is at runtime
では、ゲーム実行時に変更された値を

64
00:02:27,327 --> 00:02:29,327
もう一度いじると、

65
00:02:29,327 --> 00:02:31,258
その時点でスクリプトを再度上書きします。

66
00:02:31,537 --> 00:02:33,412
ですので、public な変数は

67
00:02:33,412 --> 00:02:35,799
コンポーネント上でいじることができますが、

68
00:02:35,799 --> 00:02:37,367
実行時にスクリプトを通してやり直したり、

69
00:02:37,367 --> 00:02:39,090
編集することができないということはないと

70
00:02:39,090 --> 00:02:40,280
覚えておきましょう。

71
00:02:40,545 --> 00:02:42,880
Private な変数はクラス内からのみ

72
00:02:42,880 --> 00:02:46,025
編集することができます。C#においては、private は

73
00:02:46,025 --> 00:02:48,025
特別なことをせずとも、どんな変数に対しても

74
00:02:48,025 --> 00:02:50,025
自然と付加されるアクセス修飾子です。

75
00:02:50,318 --> 00:02:52,318
ですので、beta と gamma に対して private

76
00:02:52,318 --> 00:02:55,150
を書きましたが、書かなくても関係無く private

77
00:02:55,150 --> 00:02:57,150
になります。関数、というより

78
00:02:57,150 --> 00:02:59,811
クラスに属する全てのメンバ変数は

79
00:02:59,811 --> 00:03:01,811
明確な理由があって

80
00:03:01,811 --> 00:03:03,811
public にする必要が無い限りは

81
00:03:03,811 --> 00:03:05,112
private にすると良いでしょう。

82
00:03:05,112 --> 00:03:07,609
変数と関数を public に設定するということは、

83
00:03:07,609 --> 00:03:09,609
それらに他のスクリプトからアクセスできるという

84
00:03:09,609 --> 00:03:12,160
意味でもあります。例えば、ここに

85
00:03:12,160 --> 00:03:15,025
2つの関数を有した別のクラスを用意しました。

86
00:03:15,025 --> 00:03:17,025
関数には、 FruitMachineという名前の public なものと

87
00:03:17,025 --> 00:03:19,636
OfficeSort という名前の private なものがあります。

88
00:03:19,832 --> 00:03:21,832
そして、いくつかの public な変数と

89
00:03:21,832 --> 00:03:23,832
private な変数も用意しました。元の public メンバ

90
00:03:23,832 --> 00:03:27,032
のみを呼び出せるスクリプトに

91
00:03:27,032 --> 00:03:28,628
戻りましょう。

92
00:03:28,948 --> 00:03:32,359
例えば、AnotherClass のインスタンスを作成

93
00:03:32,359 --> 00:03:34,359
したとして、

94
00:03:34,359 --> 00:03:36,359
FruitMachine にアクセスできるのと同様に

95
00:03:36,359 --> 00:03:37,820
apples 、banana 変数に

96
00:03:37,820 --> 00:03:40,703
アクセスしようとしているのが

97
00:03:40,703 --> 00:03:42,452
分かるかと思います。

98
00:03:42,452 --> 00:03:44,866
そして、MonoDevelop の示す入力候補が

99
00:03:44,866 --> 00:03:46,533
これらの変数が使えることを示していることも分かります。

100
00:03:46,533 --> 00:03:48,533
FruitMachine を選択して

101
00:03:48,533 --> 00:03:50,533
かっこを開けば、値を得るのに

102
00:03:50,533 --> 00:03:52,533
必要な引数を指示してくれます。

103
00:03:52,533 --> 00:03:54,782
そして、このスクリプトのスコープ内や、

104
00:03:54,782 --> 00:03:56,782
AnotherClass のスコープの中にある

105
00:03:56,782 --> 00:03:59,185
変数は public であるため

106
00:03:59,185 --> 00:04:00,629
全て取得できます。

107
00:04:01,322 --> 00:04:03,322
だから ScopeAndAccessModifiers クラスの

108
00:04:03,322 --> 00:04:05,826
変数は全て使用できましたし、

109
00:04:05,826 --> 00:04:07,826
apples の例で示したように、もうひとつのクラスの

110
00:04:07,826 --> 00:04:09,826
インスタンスにアクセスでき、そのクラスの

111
00:04:09,826 --> 00:04:12,344
public 変数を使用することもできます。

112
00:04:12,609 --> 00:04:14,609
OfficeSort や stapler、sellotape は

113
00:04:14,609 --> 00:04:16,609
全て private なので他のクラスが

114
00:04:16,609 --> 00:04:19,446
インスタンスを作成してもアクセスできない

115
00:04:19,446 --> 00:04:21,446
ということに注意して下さい。

116
00:04:21,446 --> 00:04:24,574
それらの変数はそのクラス自身の中でのみ使うためのものなのです。

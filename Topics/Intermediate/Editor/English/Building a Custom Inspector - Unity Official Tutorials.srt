1
00:00:00,308 --> 00:00:03,558
In Unity we can create a custom inspector to control

2
00:00:03,558 --> 00:00:05,558
which data from our scripts is visible

3
00:00:05,558 --> 00:00:07,558
and how it is represented in the editor.

4
00:00:08,846 --> 00:00:11,547
That ability to extend the editor in this way

5
00:00:11,547 --> 00:00:14,507
gives us a lot of power and flexibility with our scripts

6
00:00:14,507 --> 00:00:16,507
and the resulting workflow.

7
00:00:17,997 --> 00:00:19,997
Let's say we had a levelling system

8
00:00:19,997 --> 00:00:23,729
where every time a character earned 750 experience points

9
00:00:23,729 --> 00:00:25,224
they gained a new level.

10
00:00:26,191 --> 00:00:29,140
This is easy enough to calculate in the beginning

11
00:00:29,140 --> 00:00:31,699
but it could be a bit cumbersome as characters

12
00:00:31,699 --> 00:00:33,699
get to higher levels.

13
00:00:33,699 --> 00:00:35,851
Luckily we can create a custom

14
00:00:35,851 --> 00:00:37,851
inspector to make this much simpler.

15
00:00:38,947 --> 00:00:40,947
Here we have a script called LevelScript.

16
00:00:41,724 --> 00:00:43,724
This script represents the experience based

17
00:00:43,724 --> 00:00:45,724
levelling system mentioned before.

18
00:00:46,723 --> 00:00:50,312
In the script we first have a variable named experience

19
00:00:50,312 --> 00:00:52,312
which will contain the total amount of experience

20
00:00:52,312 --> 00:00:54,312
a character has accumulated.

21
00:00:55,352 --> 00:00:57,921
Next we have a property named Level.

22
00:00:58,504 --> 00:01:00,504
We can see that this property takes the current

23
00:01:00,504 --> 00:01:03,372
experience value and returns the level equivalent.

24
00:01:03,941 --> 00:01:05,941
For more information on properties

25
00:01:05,941 --> 00:01:07,941
see the lesson on properties linked below.

26
00:01:10,216 --> 00:01:12,913
In Unity we have an empty game object

27
00:01:12,913 --> 00:01:14,705
with the LevelScript attached.

28
00:01:15,385 --> 00:01:17,385
Notice how we can see the experience

29
00:01:17,385 --> 00:01:19,385
property in the inspector.

30
00:01:20,092 --> 00:01:23,522
It is easy to calculate the level when our experience is 0.

31
00:01:23,522 --> 00:01:26,982
But what if it was 49865?

32
00:01:28,313 --> 00:01:30,313
Let's customise the inspector to show

33
00:01:30,313 --> 00:01:32,313
the level for us.

34
00:01:33,020 --> 00:01:35,020
In order to customise the inspector we need

35
00:01:35,020 --> 00:01:37,636
to make a folder to place our editor scripts in.

36
00:01:38,205 --> 00:01:40,205
Unity requires that this folder is named

37
00:01:40,205 --> 00:01:42,205
Editor.

38
00:01:42,649 --> 00:01:45,328
Inside the editor folder we will create a new script.

39
00:01:46,119 --> 00:01:48,119
This script will contain our custom inspector.

40
00:01:49,588 --> 00:01:51,318
It can have any name,

41
00:01:51,318 --> 00:01:53,318
but for the sake of this example we will

42
00:01:53,318 --> 00:01:55,570
call it LevelScriptEditor.

43
00:01:58,751 --> 00:02:01,363
In the LevelScriptEditor

44
00:02:01,363 --> 00:02:03,476
we can begin writing our custom inspector.

45
00:02:05,127 --> 00:02:08,169
Before we begin writing any editor specific code

46
00:02:08,169 --> 00:02:10,169
we must first declare that we are using the

47
00:02:10,169 --> 00:02:12,169
UnityEditor namespace.

48
00:02:12,925 --> 00:02:14,925
For more information on namespaces

49
00:02:14,925 --> 00:02:17,527
see the lesson on namespaces linked below.

50
00:02:19,202 --> 00:02:21,202
Next we need to inherit from editor

51
00:02:21,202 --> 00:02:23,202
instead of monobehaviour.

52
00:02:23,202 --> 00:02:26,301
This in effect is how we extend the editor.

53
00:02:27,900 --> 00:02:29,900
For more information on inheritance

54
00:02:29,900 --> 00:02:32,424
see the lesson on inheritance linked below.

55
00:02:34,081 --> 00:02:36,081
From here we need to give our custom

56
00:02:36,081 --> 00:02:38,081
inspector an attribute to tell it which

57
00:02:38,081 --> 00:02:40,081
script we are customising.

58
00:02:41,133 --> 00:02:43,133
The syntax for doing this starts with a

59
00:02:43,133 --> 00:02:45,133
open square bracket followed by the

60
00:02:45,133 --> 00:02:48,296
keyword CustomEditor and parenthesis.

61
00:02:49,643 --> 00:02:52,737
Inside the parenthesis we use the keyword

62
00:02:52,737 --> 00:02:55,223
typeOf to specify the type.

63
00:02:55,962 --> 00:02:58,527
And then we put the name of our script

64
00:02:58,527 --> 00:03:00,527
in another set of parenthesis.

65
00:03:01,579 --> 00:03:03,579
We can see that in this example

66
00:03:03,579 --> 00:03:06,521
the script we are customising is the LevelScript.

67
00:03:08,517 --> 00:03:11,397
We end the line with a closed square bracket.

68
00:03:13,031 --> 00:03:15,719
Inside our LevelScriptEditor class

69
00:03:15,719 --> 00:03:19,446
we create the method public override void

70
00:03:21,870 --> 00:03:23,870
OnInspectorGUI

71
00:03:19,446 --> 00:03:21,446
This is the method that is called every time the

72
00:03:23,862 --> 00:03:25,862
inspector is drawn inside Unity.

73
00:03:27,461 --> 00:03:29,461
For more information on what the override

74
00:03:29,461 --> 00:03:30,940
keyword is doing

75
00:03:30,940 --> 00:03:33,527
see the lesson on overriding linked below.

76
00:03:36,643 --> 00:03:38,643
At this point the inspector for the 

77
00:03:38,643 --> 00:03:40,643
LevelScript has been modified.

78
00:03:41,269 --> 00:03:43,269
If we go back in to Unity we can see

79
00:03:43,269 --> 00:03:45,269
that we no longer see any properties of

80
00:03:45,269 --> 00:03:47,269
the script in the inspector view.

81
00:03:49,033 --> 00:03:51,033
Since this is not very useful

82
00:03:51,033 --> 00:03:53,295
let's continue writing our custom inspector.

83
00:03:56,544 --> 00:03:58,544
Back in the LevelScriptEditor

84
00:03:58,813 --> 00:04:01,503
we will want to create some fields for the inspector.

85
00:04:02,668 --> 00:04:05,893
We automatically have a reference to our LevelScript object

86
00:04:05,893 --> 00:04:09,505
named target inside the OnInspectorGUI method.

87
00:04:11,051 --> 00:04:13,051
This isn't useable until we cast it in to

88
00:04:13,051 --> 00:04:15,051
an appropriately typed variable however.

89
00:04:16,077 --> 00:04:18,077
To do this we will create a

90
00:04:18,077 --> 00:04:21,346
LevelScript variable named myLevelScript

91
00:04:22,006 --> 00:04:25,256
and set it equal to the inherited variable target.

92
00:04:27,524 --> 00:04:29,524
Finally we will cast the variable

93
00:04:29,524 --> 00:04:31,524
target as a LevelScript variable

94
00:04:31,524 --> 00:04:35,127
by writing LevelScript in parenthesis next to it.

95
00:04:37,769 --> 00:04:40,493
We want our inspector to show two pieces of information.

96
00:04:41,064 --> 00:04:43,064
The amount of experience the character has,

97
00:04:43,412 --> 00:04:45,412
and the current level of the character.

98
00:04:46,507 --> 00:04:49,038
We can create an integer field in the inspector

99
00:04:49,038 --> 00:04:51,746
using the EditorGUILayout class.

100
00:04:52,859 --> 00:04:55,544
The syntax for this starts with the classname

101
00:04:55,544 --> 00:04:58,266
EditorGUILayout, followed by a period

102
00:04:58,796 --> 00:05:00,796
and then the method IntField

103
00:05:01,378 --> 00:05:03,378
followed by parenthesis.

104
00:05:05,594 --> 00:05:09,103
Inside the parenthesis we specify the name of the field

105
00:05:09,103 --> 00:05:10,634
and the value of the field.

106
00:05:11,103 --> 00:05:14,736
In this case we want the field to be named Experience

107
00:05:14,736 --> 00:05:17,924
and the value to be the value of the experience variable

108
00:05:17,924 --> 00:05:19,924
of our myLevelScript.

109
00:05:22,470 --> 00:05:24,470
Since we want this field to be able to write back

110
00:05:24,470 --> 00:05:27,734
to our Experience variable we set the entire line

111
00:05:27,734 --> 00:05:30,688
equal to myLevelScript.experience.

112
00:05:32,930 --> 00:05:35,545
We follow a similar process for the Level field.

113
00:05:36,405 --> 00:05:38,405
This time however we will be using

114
00:05:38,405 --> 00:05:42,484
the LabelField method of the EditorGUILayout class.

115
00:05:43,689 --> 00:05:45,951
A label is a read-only control

116
00:05:45,951 --> 00:05:47,951
so we do not have to worry about the user

117
00:05:47,951 --> 00:05:50,371
attempting to manually adjust the level in the inspector. 

118
00:05:52,326 --> 00:05:55,058
Inside the parenthesis of the LabelField method

119
00:05:55,623 --> 00:05:57,623
we parse in the name Level

120
00:05:57,623 --> 00:06:00,532
and the value myLevelScript.Level.

121
00:06:02,748 --> 00:06:06,027
Since a label control requires a string as a value

122
00:06:06,027 --> 00:06:08,027
we will call the ToString method

123
00:06:08,027 --> 00:06:10,027
of the Level property to turn it

124
00:06:10,027 --> 00:06:11,320
in to a string.

125
00:06:13,009 --> 00:06:15,762
At this point our custom inspector is complete.

126
00:06:16,735 --> 00:06:19,554
We can go back in to Unity to see the result.

127
00:06:22,500 --> 00:06:24,500
In the inspector we can see that

128
00:06:24,500 --> 00:06:28,923
when our experience is 49865

129
00:06:28,923 --> 00:06:30,923
our level is 66.

130
00:06:32,296 --> 00:06:34,296
Furthermore we can see that as

131
00:06:34,296 --> 00:06:36,296
we adjust the experience value

132
00:06:36,296 --> 00:06:38,729
the inspector automatically tells us the level.

133
00:06:42,154 --> 00:06:44,154
By customising the editor for our scripts

134
00:06:44,675 --> 00:06:47,268
we can simplify and automate

135
00:06:47,268 --> 00:06:49,784
many of our otherwise cumbersome tasks.

1
00:00:00,262 --> 00:00:02,417
Extension methods are a way of adding functionality

2
00:00:02,417 --> 00:00:04,417
to a type without having to create a derive type

3
00:00:04,417 --> 00:00:06,195
or change the original type.

4
00:00:06,778 --> 00:00:08,778
They are perfect for situations where you need to add

5
00:00:08,778 --> 00:00:11,713
functionality to a class but cannot edit the class.

6
00:00:12,075 --> 00:00:14,075
Consider the class transform which is built in to

7
00:00:14,075 --> 00:00:17,359
Unity so we do not have access to it's source code.

8
00:00:17,359 --> 00:00:19,359
Let's say we wanted an easy way to reset the

9
00:00:19,359 --> 00:00:21,359
position, rotation and scale

10
00:00:21,359 --> 00:00:23,359
transform using a function.

11
00:00:23,359 --> 00:00:25,359
The ideal place for this function would be in

12
00:00:25,359 --> 00:00:27,359
the transform class, but since we can't

13
00:00:27,359 --> 00:00:29,359
directly add to the class and it wouldn't make sense

14
00:00:29,359 --> 00:00:31,359
to have this function in a derived class

15
00:00:31,359 --> 00:00:33,359
we'll make an extension for it.

16
00:00:33,859 --> 00:00:35,594
Extension methods must be placed in a

17
00:00:35,594 --> 00:00:37,594
non-generic static class.

18
00:00:37,594 --> 00:00:39,594
It is common to create a class specifically

19
00:00:39,594 --> 00:00:41,164
to contain them.

20
00:00:41,164 --> 00:00:43,164
While extension methods are used like instance

21
00:00:43,164 --> 00:00:46,234
methods, they too are declared static.

22
00:00:46,234 --> 00:00:48,234
What makes a function an extension method

23
00:00:48,234 --> 00:00:50,234
instead of a static method is the use

24
00:00:50,234 --> 00:00:52,872
of the This keyword in the parameter.

25
00:00:53,303 --> 00:00:55,303
For our example we will create a static

26
00:00:55,303 --> 00:00:57,579
class called ExtensionMethods.

27
00:00:57,579 --> 00:00:59,579
We then create our extension method named

28
00:00:59,579 --> 00:01:01,579
ResetTransformation.

29
00:01:01,579 --> 00:01:03,941
Notice that this method is declared static.

30
00:01:03,941 --> 00:01:05,941
Also notice that the first parameter has the

31
00:01:05,941 --> 00:01:08,198
this keyword followed by the transform

32
00:01:08,198 --> 00:01:10,803
class and an arbitrary parameter name.

33
00:01:10,803 --> 00:01:13,172
This first parameter will be the calling object

34
00:01:13,172 --> 00:01:15,172
and thus will not have to be supplied when we

35
00:01:15,172 --> 00:01:16,529
call this function.

36
00:01:16,529 --> 00:01:18,994
Furthermore, this first parameter dictates which

37
00:01:18,994 --> 00:01:21,265
class this method becomes a part of.

38
00:01:21,265 --> 00:01:23,265
If we wanted any more parameters we

39
00:01:23,265 --> 00:01:26,276
could put them in here without the this keyword.

40
00:01:26,776 --> 00:01:28,776
Within the method we can now write the code

41
00:01:28,776 --> 00:01:30,776
to reset the transform.

42
00:01:32,612 --> 00:01:34,612
It is important to note that despite this function

43
00:01:34,612 --> 00:01:36,948
declaration having a parameter, when the function is

44
00:01:36,948 --> 00:01:38,596
called it will have none.

45
00:01:38,596 --> 00:01:40,596
The parameter implicitly becomes the

46
00:01:40,596 --> 00:01:42,596
instance of the transform.

47
00:01:42,596 --> 00:01:44,596
In order to use this extension method

48
00:01:44,596 --> 00:01:46,596
you only need to look for it as a member

49
00:01:46,596 --> 00:01:48,079
of the class you extended.

50
00:01:48,079 --> 00:01:50,079
In this case we extend transform

51
00:01:50,079 --> 00:01:53,623
and can see that the method is now a part of the transform class.

1
00:00:00,235 --> 00:00:02,163
オーバーライドは親クラスのメソッドを

2
00:00:02,163 --> 00:00:04,796
子クラスで再実装する時に使う手法です

3
00:00:04,796 --> 00:00:07,016
メソッドを呼び出すと その時点で最も新しい

4
00:00:07,016 --> 00:00:09,016
バージョンのオーバーライドされたメソッドが

5
00:00:09,016 --> 00:00:11,016
呼び出されます

6
00:00:11,016 --> 00:00:13,016
継承を階層的に使っている場合にはよく

7
00:00:13,016 --> 00:00:15,016
継承した基底クラスの関数とは少し違う動作を

8
00:00:15,016 --> 00:00:17,016
させたい状況が生じます

9
00:00:17,016 --> 00:00:19,016
やり方はシンプルです

10
00:00:19,016 --> 00:00:21,488
子クラスでメソッドを改めて作成し

11
00:00:21,488 --> 00:00:24,218
そこにやらせたい事を書くだけです

12
00:00:24,218 --> 00:00:27,553
例を挙げて見てみましょう  まず Humanoid 基底クラスがあり

13
00:00:27,553 --> 00:00:29,955
それを継承した派生クラス Enemy があり

14
00:00:29,955 --> 00:00:32,834
さらにそれを継承した派生クラス Orc があるとします

15
00:00:33,541 --> 00:00:36,121
Humanoid クラスには Yell（叫ぶ）という関数があります

16
00:00:36,121 --> 00:00:38,647
Humanoid で Yell が呼び出されると  モデルが

17
00:00:38,647 --> 00:00:42,363
叫び声をあげる動作と両手を筒型にして口に添える動作をします

18
00:00:42,363 --> 00:00:44,363
この Yell メソッドは自動的に Enemy クラスに

19
00:00:44,363 --> 00:00:47,880
継承されますが  今回はそれを変更していきます

20
00:00:47,880 --> 00:00:50,763
Enemy の Yell では他の敵を呼び寄せる効果にします

21
00:00:50,763 --> 00:00:53,498
また Orc の Yell も別の内容にしてみましょう

22
00:00:53,498 --> 00:00:55,965
Orc オブジェクトから Yell が呼び出された場合には

23
00:00:55,965 --> 00:00:57,965
エリア内の全オークが一時的に攻撃力ボーナスを

24
00:00:57,965 --> 00:00:59,965
得られるようにします

25
00:00:59,965 --> 00:01:01,965
これを実現するために必要な事は

26
00:01:01,965 --> 00:01:03,965
子クラスの Yell メソッドで親クラスのバージョンを

27
00:01:03,965 --> 00:01:06,644
オーバーライドすることです

28
00:01:06,644 --> 00:01:08,644
Unity では親のメソッドを子クラスでオーバーライド

29
00:01:08,644 --> 00:01:10,644
しようとすると警告が出力されます

30
00:01:10,644 --> 00:01:12,644
この警告を抑制し  Unity にオーバーライドが

31
00:01:12,644 --> 00:01:15,430
意図した動作であることを示すには

32
00:01:15,430 --> 00:01:18,046
virtual および override キーワードを使います

33
00:01:18,046 --> 00:01:20,953
この 2 つのキーワードはメソッドの戻り値の型の前に挿入します

34
00:01:21,453 --> 00:01:23,453
親クラスのメソッドでは

35
00:01:23,453 --> 00:01:26,298
virtual を使い  それ以下の子クラスでは

36
00:01:26,298 --> 00:01:29,309
override キーワードを使います

37
00:01:30,928 --> 00:01:33,744
virtual の宣言がなされたメソッドはその全子クラスで

38
00:01:33,744 --> 00:01:35,470
オーバーライドが可能になります

39
00:01:35,470 --> 00:01:37,470
オーバーライドの面白い使い方としては

40
00:01:37,470 --> 00:01:39,470
各子クラスで親クラスのメソッドの

41
00:01:39,470 --> 00:01:42,295
挙動を持たせたまま

42
00:01:42,295 --> 00:01:44,295
そこに機能を追加する

43
00:01:44,295 --> 00:01:46,005
手法があります

44
00:01:46,574 --> 00:01:49,502
この場合は base キーワードを使って

45
00:01:49,502 --> 00:01:51,502
親バージョンのメソッドを

46
00:01:51,502 --> 00:01:52,917
呼び出します

47
00:01:52,917 --> 00:01:54,917
先ほどの例に戻ると

48
00:01:54,917 --> 00:01:56,917
Enemy の Yell メソッドで Humanoid 版のメソッドを維持したまま

49
00:01:56,917 --> 00:01:58,334
さらに独自の機能を追加してみます

50
00:01:58,334 --> 00:02:00,901
また Orc の Yell メソッドでも Enemy 版のメソッドを維持したまま

51
00:02:00,901 --> 00:02:02,514
同じく独自の機能を追加してみます

52
00:02:02,514 --> 00:02:04,514
これを実現するには Enemy と Orc で

53
00:02:04,514 --> 00:02:06,945
base キーワードを使って親クラスの

54
00:02:06,945 --> 00:02:08,945
Yell メソッドを呼び出します

55
00:02:10,688 --> 00:02:13,868
こうすることで Orc の Yell メソッドが呼び出された時に

56
00:02:13,868 --> 00:02:15,868
Enemy の Yell メソッドが呼び出されるようになり その結果

57
00:02:15,868 --> 00:02:18,391
Humanoid の Yell メソッドが呼び出されることになるのです

58
00:02:18,391 --> 00:02:21,563
またオーバーライドはポリモーフィズムにおいても大変有用です

59
00:02:21,563 --> 00:02:23,563
親メソッドを virtual と宣言して

60
00:02:23,563 --> 00:02:25,563
子メソッドを override と宣言し

61
00:02:25,563 --> 00:02:28,358
親バージョンのメソッドをオーバーライドしておくと

62
00:02:28,358 --> 00:02:30,358
子の参照を親オブジェクトにアップキャストして

63
00:02:30,358 --> 00:02:32,358
メソッドを呼び出した時に

64
00:02:32,358 --> 00:02:34,358
子バージョンのメソッドが

65
00:02:34,358 --> 00:02:36,358
呼び出されるようになるのです

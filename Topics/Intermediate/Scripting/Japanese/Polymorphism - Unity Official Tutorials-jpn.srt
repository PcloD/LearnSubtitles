1
00:00:00,649 --> 00:00:02,635
ポリモーフィズム（多態性）は継承の機能で

2
00:00:02,635 --> 00:00:05,475
クラスに複数の型を受け入れさせることができます

3
00:00:05,475 --> 00:00:07,475
継承の階層内において

4
00:00:07,475 --> 00:00:11,109
子クラスは常に親クラスと is-a 関係にあります

5
00:00:11,109 --> 00:00:14,068
これは基底クラスが必要なときいつでも

6
00:00:14,068 --> 00:00:16,732
代わりに派生クラスが使えるということです

7
00:00:17,232 --> 00:00:19,232
たとえば次に示すような継承階層のゲームがあるとしましょう

8
00:00:19,232 --> 00:00:21,232
Orc と Goblin の親として Enemy があり

9
00:00:21,232 --> 00:00:24,289
Enemy の親に Humanoid があるという構造です

10
00:00:25,024 --> 00:00:27,024
ここでシーン中の全 Enemy オブジェクトの

11
00:00:27,024 --> 00:00:29,024
コレクションを作る必要ができたとします

12
00:00:29,524 --> 00:00:31,524
これにはコレクションを 2 つ作るという手もあります

13
00:00:31,524 --> 00:00:33,952
ひとつは Orc もうひとつが Goblinですね

14
00:00:33,952 --> 00:00:35,952
しかしここでは Orc オブジェクトと Goblin オブジェクトを

15
00:00:35,952 --> 00:00:38,862
要素として持つコレクション 1 つに

16
00:00:38,862 --> 00:00:40,335
することが可能です

17
00:00:41,125 --> 00:00:43,708
またもし同じように Humanoid を継承する

18
00:00:43,708 --> 00:00:45,708
Player クラスがあるならば さらに

19
00:00:45,708 --> 00:00:47,708
シーン内の Humanoid オブジェクト すなわち 

20
00:00:47,708 --> 00:00:50,968
Orc・Goblin・Player すべてを含めることも

21
00:00:50,968 --> 00:00:52,968
可能なわけです

22
00:00:52,968 --> 00:00:54,968
ポリモーフィズムはまた関数のパラメーターのような場合にも

23
00:00:54,968 --> 00:00:56,029
活用できます

24
00:00:56,029 --> 00:00:58,029
たとえば OnTrigger 関数

25
00:00:58,029 --> 00:01:00,029
通常ここでは Collider パラメーター

26
00:01:00,029 --> 00:01:02,849
一般的には other のようなものが使われます

27
00:01:03,459 --> 00:01:06,289
ゲームオブジェクトは Collider コンポーネントを持たず

28
00:01:06,289 --> 00:01:08,622
代わりに BoxCollider・SphereCollider

29
00:01:08,622 --> 00:01:11,985
MeshCollider などを持ちます

30
00:01:12,485 --> 00:01:14,693
そして OnTrigger 関数が呼び出されるとき

31
00:01:14,693 --> 00:01:17,662
どの種類のコライダーが使用されているのかは分かりません

32
00:01:17,662 --> 00:01:20,651
実際 関数はオブジェクト毎に個別に

33
00:01:20,651 --> 00:01:22,358
コライダーをパースしています

34
00:01:22,358 --> 00:01:24,358
各種コライダーはいずれも Collider 親クラスから関数を

35
00:01:24,358 --> 00:01:27,488
継承しているので どれでも動作するのです

36
00:01:27,988 --> 00:01:31,090
ここでは  逆は不可能であることはしっかり覚えておきましょう

37
00:01:31,424 --> 00:01:33,687
先の例で言えば

38
00:01:33,687 --> 00:01:35,687
「Orc は Enemy である」（is-a 関係）は正でも

39
00:01:35,687 --> 00:01:37,948
「Enemy は Orc である」は誤りなのです

40
00:01:37,948 --> 00:01:40,448
子クラスが予期されている場面で

41
00:01:40,448 --> 00:01:42,198
親クラスを渡すことはできないのです

42
00:01:42,808 --> 00:01:44,808
さてポリモーフィズムの賢い使い方のひとつに

43
00:01:44,808 --> 00:01:47,662
コンストラクターとオブジェクト参照を使う方法があります

44
00:01:47,662 --> 00:01:50,132
基底クラス型のオブジェクトを宣言したあと

45
00:01:50,132 --> 00:01:53,574
派生クラスのコンストラクターは呼び出せます

46
00:01:53,574 --> 00:01:55,574
これは変数の参照が基底クラスの型を

47
00:01:55,574 --> 00:01:57,905
予期していて子クラスのコンストラクターは

48
00:01:57,905 --> 00:01:59,905
何らかの派生型を

49
00:01:59,905 --> 00:02:01,780
作るためです

50
00:02:01,780 --> 00:02:03,780
この部分がわかりにくい場合は

51
00:02:03,780 --> 00:02:07,206
子クラスは親クラスである

52
00:02:07,206 --> 00:02:09,592
だからこの変換は機能すると覚えましょう

53
00:02:09,592 --> 00:02:12,468
なお このプロセスはアップキャストと呼ばれます

54
00:02:13,175 --> 00:02:15,175
オブジェクトがアップキャストされている状態では

55
00:02:15,175 --> 00:02:18,097
そのオブジェクトは親クラスのものとして扱われます

56
00:02:18,097 --> 00:02:21,635
この例では ChildClass がアップキャストされている間

57
00:02:21,635 --> 00:02:24,355
親クラスとしてのみ扱われます

58
00:02:24,717 --> 00:02:26,717
つまり ここで使えるのは親クラスの

59
00:02:26,717 --> 00:02:28,884
変数とメソッドだけになるということで

60
00:02:28,884 --> 00:02:30,884
その時親クラスのオブジェクト内に

61
00:02:30,884 --> 00:02:33,203
あるかのように扱われるということです

62
00:02:33,203 --> 00:02:35,203
なお virtual 関数だけは例外で

63
00:02:35,203 --> 00:02:37,825
最後にオーバーライドされたバージョンが呼び出されます

64
00:02:37,825 --> 00:02:39,825
virtual 関数とオーバーライドの

65
00:02:39,825 --> 00:02:41,825
詳細については下記リンク先にある

66
00:02:41,825 --> 00:02:44,141
オーバーライドのレッスンをご覧ください

67
00:02:44,141 --> 00:02:47,591
ここで ChildClass を子クラスとして扱うには

68
00:02:47,591 --> 00:02:50,077
ChildClass 変数を子クラスの型に

69
00:02:50,077 --> 00:02:51,773
ダウンキャストする必要があります

70
00:02:52,370 --> 00:02:54,370
具体的には

71
00:02:54,370 --> 00:02:58,266
型の名前をカッコで囲み  変数の前に置きます

72
00:02:58,266 --> 00:03:01,122
この他にも さらにカッコで囲んで

73
00:03:01,122 --> 00:03:03,941
.（ドット）演算子を使ってメンバーにアクセスしたり

74
00:03:03,941 --> 00:03:05,941
参照を作って新しいバージョンに

75
00:03:05,941 --> 00:03:07,941
アクセスしたりもできます

1
00:00:00,442 --> 00:00:02,577
static メンバー... たとえば変数やメソッドなどは

2
00:00:02,577 --> 00:00:04,577
クラス内の全インスタンスで共有される

3
00:00:04,577 --> 00:00:05,945
メンバーです

4
00:00:05,945 --> 00:00:08,182
さらに static メンバーはクラスのオブジェクトを

5
00:00:08,182 --> 00:00:10,182
インスタンス化せずともクラスから直接

6
00:00:10,182 --> 00:00:12,362
アクセスすることもできます

7
00:00:12,362 --> 00:00:14,362
通常  メンバー変数はクラスの

8
00:00:14,362 --> 00:00:16,642
各オブジェクトに固有になります

9
00:00:16,642 --> 00:00:18,505
クラスの各オブジェクトが同じ変数を持っていても

10
00:00:18,505 --> 00:00:21,123
値はそれぞれ異なるためです

11
00:00:21,123 --> 00:00:23,123
しかし static 変数の場合にはクラスの各オブジェクトが

12
00:00:23,123 --> 00:00:26,297
同一の値を持つ同一の変数になります

13
00:00:26,297 --> 00:00:28,297
このためどこかで static 変数の値を

14
00:00:28,297 --> 00:00:30,297
変更すると他の場所でも値が

15
00:00:30,297 --> 00:00:32,297
変更されることになるのです

16
00:00:33,142 --> 00:00:35,142
たとえいば Enemy クラスのオブジェクトが

17
00:00:35,142 --> 00:00:37,142
いくつインスタンス化されたかを知りたい場合

18
00:00:37,642 --> 00:00:39,642
static メンバー変数 enemyCount を

19
00:00:39,642 --> 00:00:42,144
作れば簡単に確認できます

20
00:00:42,644 --> 00:00:44,644
キーワード 'static' をメンバーの宣言に含めることで

21
00:00:44,644 --> 00:00:46,644
そのメンバーが static（静的）であることを宣言し

22
00:00:46,644 --> 00:00:48,644
このためクラスのインスタンスではなく

23
00:00:48,644 --> 00:00:51,814
クラス自体に属することになります

24
00:00:51,814 --> 00:00:53,814
あとは Enemy オブジェクトが作成された時に

25
00:00:53,814 --> 00:00:56,954
変数をインクリメントさせるだけです

26
00:00:56,954 --> 00:00:58,954
あらゆるオブジェクトが同一変数のインクリメントとなるため

27
00:00:58,954 --> 00:01:00,954
この変数には作成された Enemy の

28
00:01:00,954 --> 00:01:02,716
合計数とイコールになるのです

29
00:01:02,716 --> 00:01:04,482
また static 変数はアクセスするのも

30
00:01:04,482 --> 00:01:06,329
簡単です

31
00:01:06,329 --> 00:01:09,641
ここにいくつか Enemy を作成するゲームクラスがあります

32
00:01:09,641 --> 00:01:11,641
何体の Enemy が作成されたかを確認するには

33
00:01:11,641 --> 00:01:13,641
クラス名とドット演算子を使うだけで

34
00:01:13,641 --> 00:01:15,641
enemyCount に簡単に

35
00:01:15,641 --> 00:01:17,641
アクセスできます

36
00:01:18,141 --> 00:01:21,550
この場合は enemyCount 変数はイコール 3 となります

37
00:01:22,434 --> 00:01:24,434
このプロセスはゲームオブジェクトコンポーネントとなる

38
00:01:24,434 --> 00:01:26,128
スクリプトでも同様です

39
00:01:26,128 --> 00:01:28,128
たとえばシーン中で作成されたプレイヤーの数を

40
00:01:28,128 --> 00:01:30,128
知りたい場合はまず Player スクリプトコンポーネントを

41
00:01:30,128 --> 00:01:32,128
作ります

42
00:01:32,128 --> 00:01:34,322
このスクリプトでは static playerCount 

43
00:01:34,322 --> 00:01:36,724
変数を宣言してそれをインクリメント

44
00:01:36,724 --> 00:01:38,215
させられます

45
00:01:38,215 --> 00:01:40,215
これでこのスクリプトがアタッチされた

46
00:01:40,215 --> 00:01:42,215
ゲームオブジェクトが作られるとき

47
00:01:42,215 --> 00:01:43,993
合計プレイヤーカウントが増加するようになります

48
00:01:43,993 --> 00:01:45,993
そして他のスクリプトコンポーネントでも

49
00:01:45,993 --> 00:01:48,286
スクリプトの名前とドット演算子を使えば

50
00:01:48,286 --> 00:01:50,286
この static 変数にアクセスできます

51
00:01:51,076 --> 00:01:53,076
static 変数と同様  static メソッドも

52
00:01:53,076 --> 00:01:55,076
クラスの特定のオブジェクトではなく

53
00:01:55,076 --> 00:01:57,412
クラスに属するメソッドとなります

54
00:01:57,412 --> 00:01:59,412
ごく簡単な例で示すと たとえばクラス内で

55
00:01:59,412 --> 00:02:01,817
2 つの数字を足した結果を返す

56
00:02:01,817 --> 00:02:03,817
static メソッドを呼ぶ Utilities というクラスが

57
00:02:03,817 --> 00:02:06,602
あるとします

58
00:02:06,602 --> 00:02:08,948
この時メソッド Add が static であることは

59
00:02:08,948 --> 00:02:10,948
直前に 'static' キーワードが付いていることから分かります

60
00:02:11,628 --> 00:02:13,628
この場合別のクラスでこの Add メソッドは

61
00:02:13,628 --> 00:02:15,628
クラス名とドット演算子で呼び出せるように

62
00:02:15,628 --> 00:02:17,628
なるわけですstatic メンバーを使うのにクラスの

63
00:02:17,628 --> 00:02:18,877
オブジェクトをインスタンス化する

64
00:02:18,877 --> 00:02:20,877
必要はありません

65
00:02:21,515 --> 00:02:23,653
さて 気づかないままに static メソッドを使ってしまっている

66
00:02:23,653 --> 00:02:25,472
ケースというのももちろん考えられます

67
00:02:25,472 --> 00:02:28,007
Unity 上で Input を扱うときに扱う

68
00:02:28,007 --> 00:02:30,434
Input.GetAccess / Input.GetKey /

69
00:02:30,434 --> 00:02:33,153
Input.GetButton はすべて

70
00:02:33,153 --> 00:02:34,750
static メソッドです

71
00:02:34,750 --> 00:02:36,750
これらが static であるのは Input クラスの

72
00:02:36,750 --> 00:02:38,750
オブジェクトをインスタンス化しなくとも

73
00:02:38,750 --> 00:02:40,319
使えるところからわかります

74
00:02:40,929 --> 00:02:42,929
じっさい Unity にはさまざまな機能を

75
00:02:42,929 --> 00:02:44,929
提供するため多数の static メソッドが

76
00:02:44,929 --> 00:02:46,929
用意されています

77
00:02:47,429 --> 00:02:49,429
ここで覚えておくべき重要な点としては

78
00:02:49,429 --> 00:02:51,429
非 static クラスメンバー変数は

79
00:02:51,429 --> 00:02:53,732
static メソッド内では使用できないという点です

80
00:02:53,732 --> 00:02:56,202
これは static メソッドはクラスに属しており

81
00:02:56,202 --> 00:02:57,800
非 static 変数はクラスの

82
00:02:57,800 --> 00:02:59,800
インスタンスに属しているためです

83
00:03:00,576 --> 00:03:02,756
またこの他 クラス全体を static にすることも可能です

84
00:03:02,756 --> 00:03:04,756
これを行なうには単純に クラス名の前に

85
00:03:04,756 --> 00:03:06,327
static キーワードを記載します

86
00:03:06,327 --> 00:03:08,327
こうするとクラスが static となり

87
00:03:08,327 --> 00:03:11,178
クラスのインスタンスが作成できなくなります

88
00:03:11,178 --> 00:03:13,178
これは Input クラスのように 一切が

89
00:03:13,178 --> 00:03:15,178
static メンバー変数とメソッドで構成される場合に

90
00:03:15,178 --> 00:03:17,178
有用です
